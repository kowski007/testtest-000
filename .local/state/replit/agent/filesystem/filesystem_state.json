{"file_contents":{"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/pages/faq.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronDown, ChevronUp, HelpCircle } from \"lucide-react\";\nimport Layout from \"@/components/layout\";\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n  category: \"general\" | \"creation\" | \"trading\" | \"technical\";\n}\n\nexport default function FAQ() {\n  const [openItems, setOpenItems] = useState<number[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<\n    \"all\" | \"general\" | \"creation\" | \"trading\" | \"technical\"\n  >(\"all\");\n\n  const faqData: FAQItem[] = [\n    {\n      question: \"What is Every1.fun?\",\n      answer:\n        \"Every1.fun is a platform that allows you to transform public goods projects, social media channels, posts and articles into tradeable digital assets (coins) on Base blockchain. It bridges traditional web content with ZORA Protocol.\",\n      category: \"general\",\n    },\n    {\n      question: \"How do I create a coin?\",\n      answer:\n        \"Simply paste a blog URL into our platform, preview the extracted content, customize the metadata, and mint it as a coin on the Base blockchain. The process is automated and user-friendly.\",\n      category: \"creation\",\n    },\n    {\n      question: \"What blockchains does Every1.fun support?\",\n      answer:\n        \"Currently, Every1.fun operates on the Base network using Zora Protocol, which is an Ethereum Layer 2 built by Coinbase. We chose Base for its low fees, fast transactions, and growing DeFi ecosystem.\",\n      category: \"technical\",\n    },\n    {\n      question: \"Can I trade coins created by others?\",\n      answer:\n        \"Yes! Once coins are minted, they become tradeable digital assets. You can buy, sell, and trade them on supported marketplaces and within our platform.\",\n      category: \"trading\",\n    },\n    {\n      question: \"How is the value of a coin determined?\",\n      answer:\n        \"Coin values are determined by market demand, the quality and popularity of the content, creator reputation, and trading activity. It follows standard supply and demand economics.\",\n      category: \"trading\",\n    },\n    {\n      question: \"Do I need a crypto wallet?\",\n      answer:\n        \"Yes, you'll need a compatible Web3 wallet like MetaMask, WalletConnect, or others to interact with the blockchain, create coins, and make trades.\",\n      category: \"technical\",\n    },\n    {\n      question: \"What types of content can I monetize?\",\n      answer:\n        \"You can create coins from blog posts, articles, news stories, opinion pieces, tutorials, and any web content that can be scraped. The content should be publicly accessible.\",\n      category: \"creation\",\n    },\n    {\n      question: \"Are there any fees?\",\n      answer:\n        \"There are standard blockchain transaction fees (gas fees) for minting and trading. We also charge a small platform fee for our services, which helps maintain and improve the platform.\",\n      category: \"general\",\n    },\n    {\n      question: \"How do I claim my Creator Earnings?\",\n      answer:\n        \"You don't need to claim anything! Creator Earnings are automatically sent to your wallet address every time someone trades your coin. The earnings come from trading fees and are distributed instantly on-chain. Just check your wallet to see your accumulated earnings.\",\n      category: \"creation\",\n    },\n    {\n      question: \"How is content stored?\",\n      answer:\n        \"Content metadata is stored on IPFS (InterPlanetary File System) for decentralized, permanent storage. This ensures your coins and their associated content remain accessible.\",\n      category: \"technical\",\n    },\n    {\n      question: \"Can I edit a coin after creation?\",\n      answer:\n        \"Once minted on the blockchain, the core coin data cannot be changed. However, you can update certain metadata fields and descriptions through our platform interface.\",\n      category: \"creation\",\n    },\n  ];\n\n  const filteredFAQs =\n    selectedCategory === \"all\"\n      ? faqData\n      : faqData.filter((item) => item.category === selectedCategory);\n\n  const toggleItem = (index: number) => {\n    setOpenItems((prev) =>\n      prev.includes(index) ? prev.filter((i) => i !== index) : [...prev, index],\n    );\n  };\n\n  const categories = [\n    { key: \"all\", label: \"All Questions\" },\n    { key: \"general\", label: \"General\" },\n    { key: \"creation\", label: \"Creating Coins\" },\n    { key: \"trading\", label: \"Trading\" },\n    { key: \"technical\", label: \"Technical\" },\n  ] as const;\n\n  return (\n    <Layout>\n      <div className=\"p-8\">\n        <div className=\"max-w-5xl mx-auto p-4 sm:p-6 lg:p-8\">\n          <div className=\"mb-8 text-center\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HelpCircle className=\"w-5 h-5 text-black\" />\n            </div>\n            <h1 className=\"text-2xl font-black mb-4 text-foreground\">\n              F.A.Q<span className=\"spotify-green\"></span>\n            </h1>\n            <p className=\"text-l text-muted-foreground\">\n              Everything you need to know about Every1.fun and content tokenization.\n            </p>\n          </div>\n\n          {/* Category Filter */}\n          <div className=\"flex flex-wrap gap-2 mb-8 justify-center\">\n            {categories.map((category) => (\n              <button\n                key={category.key}\n                onClick={() => setSelectedCategory(category.key)}\n                className={`px-4 py-2 rounded-full font-semibold transition-colors ${\n                  selectedCategory === category.key\n                    ? \"bg-primary text-black\"\n                    : \"bg-muted/20 text-muted-foreground hover:text-foreground\"\n                }`}\n              >\n                {category.label}\n              </button>\n            ))}\n          </div>\n\n          {/* FAQ Items */}\n          <div className=\"space-y-4\">\n            {filteredFAQs.map((item, index) => (\n              <div\n                key={index}\n                className=\"spotify-card rounded-xl overflow-hidden\"\n              >\n                <button\n                  onClick={() => toggleItem(index)}\n                  className=\"w-full p-6 text-left flex items-center justify-between hover:bg-muted/5 transition-colors\"\n                >\n                  <h3 className=\"text-lg font-bold text-foreground pr-4\">\n                    {item.question}\n                  </h3>\n                  {openItems.includes(index) ? (\n                    <ChevronUp className=\"w-5 h-5 text-primary flex-shrink-0\" />\n                  ) : (\n                    <ChevronDown className=\"w-5 h-5 text-primary flex-shrink-0\" />\n                  )}\n                </button>\n\n                {openItems.includes(index) && (\n                  <div className=\"px-6 pb-6\">\n                    <div className=\"border-t border-border pt-4\">\n                      <p className=\"text-muted-foreground leading-relaxed\">\n                        {item.answer}\n                      </p>\n                      <div className=\"mt-3\">\n                        <span className=\"inline-block px-3 py-1 bg-muted/20 rounded-full text-xs font-semibold text-primary capitalize\">\n                          {item.category}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Social Links Section */}\n          <div className=\"mt-12 text-center bg-muted/10 rounded-xl p-8\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n              Connect With Us\n            </h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Follow us on social media for updates and announcements\n            </p>\n            <div className=\"flex items-center justify-center gap-4\">\n              <a\n                href=\"https://x.com/givestation\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 bg-muted/20 hover:bg-primary/20 rounded-full flex items-center justify-center transition-colors group\"\n              >\n                <svg\n                  className=\"w-5 h-5 text-muted-foreground group-hover:text-primary transition-colors\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n                </svg>\n              </a>\n              <a\n                href=\"https://discord.gg/givestation\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 bg-muted/20 hover:bg-primary/20 rounded-full flex items-center justify-center transition-colors group\"\n              >\n                <svg\n                  className=\"w-5 h-5 text-muted-foreground group-hover:text-primary transition-colors\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path d=\"M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 0 0-.041-.106 13.107 13.107 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.299 12.299 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.839 19.839 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418z\" />\n                </svg>\n              </a>\n              <a\n                href=\"https://t.me/coinit\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 bg-muted/20 hover:bg-primary/20 rounded-full flex items-center justify-center transition-colors group\"\n              >\n                <svg\n                  className=\"w-5 h-5 text-muted-foreground group-hover:text-primary transition-colors\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path d=\"M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z\" />\n                </svg>\n              </a>\n              <a\n                href=\"https://github.com/givestation\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-12 h-12 bg-muted/20 hover:bg-primary/20 rounded-full flex items-center justify-center transition-colors group\"\n              >\n                <svg\n                  className=\"w-5 h-5 text-muted-foreground group-hover:text-primary transition-colors\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\n                </svg>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":12816},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport type { Coin } from \"@shared/schema\";\nimport CoinCard from \"@/components/coin-card\";\nimport Layout from \"@/components/layout\";\nimport {\n  Coins as CoinsIcon,\n  ChevronLeft,\n  ChevronRight,\n  Globe,\n  PenTool,\n  Music,\n} from \"lucide-react\";\nimport {\n  SiYoutube,\n  SiFarcaster,\n  SiTiktok,\n  SiInstagram,\n  SiMedium,\n  SiSubstack,\n  SiGithub,\n  SiX,\n} from \"react-icons/si\";\nimport { useState, useMemo, useRef, useEffect } from \"react\";\nimport { getCoins } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { KarmaIcon } from \"@/components/karma-icon\";\nimport { GitcoinIcon } from \"@/components/gitcoin-icon\";\nimport { FarcasterIcon } from \"@/components/farcaster-icon\";\nimport { useAccount } from \"wagmi\";\nimport StreakDisplay from \"@/components/streak-display\";\n\n\ntype CoinWithPlatform = Coin & { platform?: string };\n\nexport default function Home() {\n  const { address, isConnected } = useAccount();\n  const { data: coins = [], isLoading } = useQuery<CoinWithPlatform[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n\n  const getCoinCount = (platformId: string) => {\n    if (platformId === \"all\") return coins.length;\n    return coins.filter((coin) => coin.platform === platformId).length;\n  };\n\n  // Hiding /channels page by not including it in the categories\n  const categories = [\n    { id: \"all\", label: \"All\", Icon: Globe },\n    // { id: \"youtube\", label: \"Channels\", Icon: SiYoutube }, // Hidden\n    { id: \"farcaster\", label: \"Farcaster\", Icon: FarcasterIcon },\n    { id: \"gitcoin\", label: \"Gitcoin\", Icon: GitcoinIcon },\n    { id: \"karmagap\", label: \"KarmaGap\", Icon: KarmaIcon },\n    { id: \"publicgoods\", label: \"Public Goods\", Icon: CoinsIcon },\n    { id: \"music\", label: \"Music\", Icon: Music },\n    { id: \"tiktok\", label: \"TikTok\", Icon: SiTiktok },\n    { id: \"instagram\", label: \"Instagram\", Icon: SiInstagram },\n    { id: \"medium\", label: \"Medium\", Icon: SiMedium },\n    { id: \"giveth\", label: \"Giveth\", Icon: CoinsIcon },\n    { id: \"twitter\", label: \"Twitter\", Icon: SiX },\n    { id: \"blog\", label: \"Blog\", Icon: PenTool },\n  ];\n\n  const filteredCoins = useMemo(() => {\n    if (selectedCategory === \"all\") return coins;\n    return coins.filter((coin) => coin.platform === selectedCategory);\n  }, [coins, selectedCategory]);\n\n  const scroll = (direction: \"left\" | \"right\") => {\n    if (scrollContainerRef.current) {\n      const scrollAmount = direction === \"left\" ? -400 : 400;\n      scrollContainerRef.current.scrollBy({\n        left: scrollAmount,\n        behavior: \"smooth\",\n      });\n    }\n  };\n\n  return (\n    <Layout>\n      {/* Category Bar */}\n      <section className=\"p-4 sm:p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"relative group\">\n            {/* Left Arrow - Hidden on mobile */}\n            <button\n              onClick={() => scroll(\"left\")}\n              className=\"hidden md:block absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-background/80 backdrop-blur-sm p-2 rounded-full border border-border/50 hover:bg-muted/30 transition-all opacity-0 group-hover:opacity-100\"\n              data-testid=\"button-scroll-left\"\n            >\n              <ChevronLeft className=\"w-4 h-4 text-white\" />\n            </button>\n\n            {/* Category Chips */}\n            <div\n              ref={scrollContainerRef}\n              className=\"flex gap-2 sm:gap-3 overflow-x-auto scrollbar-hide pb-2\"\n              style={{ scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}\n            >\n              {categories.map((category) => {\n                const IconComponent = category.Icon;\n                return (\n                  <button\n                    key={category.id}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      setSelectedCategory(category.id);\n                    }}\n                    onPointerDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    type=\"button\"\n                    className={`flex-shrink-0 flex items-center gap-1.5 px-3 sm:px-4 py-1.5 sm:py-2 rounded-full text-xs sm:text-sm font-medium transition-all whitespace-nowrap ${\n                      selectedCategory === category.id\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"bg-muted/20 text-muted-foreground hover:bg-muted/30 hover:text-foreground\"\n                    }`}\n                    data-testid={`button-category-${category.id}`}\n                  >\n                    <IconComponent\n                      className={`w-4 h-4 platform-icon-${category.id}`}\n                    />\n                    {category.label}\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Right Arrow - Hidden on mobile */}\n            <button\n              onClick={() => scroll(\"right\")}\n              className=\"hidden md:block absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-background/80 backdrop-blur-sm p-2 rounded-full border border-border/50 hover:bg-muted/30 transition-all opacity-0 group-hover:opacity-100\"\n              data-testid=\"button-scroll-right\"\n            >\n              <ChevronRight className=\"w-4 h-4 text-white\" />\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Streak Display Section */}\n      {isConnected && address && (\n        <section className=\"p-4 sm:p-6\">\n          <div className=\"max-w-md mx-auto\">\n            <StreakDisplay userAddress={address} />\n          </div>\n        </section>\n      )}\n\n      {/* Trending Coins Section */}\n      <section className=\"p-4 sm:p-8\">\n        <div className=\"max-w-5xl mx-auto\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-2\">\n              {[...Array(12)].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"spotify-card rounded-xl overflow-hidden p-3 sm:p-4 space-y-3\"\n                >\n                  <div className=\"aspect-square w-full bg-muted/20 rounded-lg animate-pulse\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-5 bg-muted/20 rounded w-3/4 animate-pulse\"></div>\n                    <div className=\"h-4 bg-muted/20 rounded w-1/2 animate-pulse\"></div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"h-4 bg-muted/20 rounded w-16 animate-pulse\"></div>\n                    <div className=\"h-4 bg-muted/20 rounded w-16 animate-pulse\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredCoins.length === 0 ? (\n            <div className=\"text-center py-8 sm:py-16\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <CoinsIcon className=\"w-6 h-6 sm:w-8 sm:h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg sm:text-xl font-bold text-foreground mb-2\">\n                No coins yet\n              </h3>\n              <p className=\"text-muted-foreground mb-4 sm:mb-6 px-4\">\n                Import your content, earn forever!\n              </p>\n              <Link href=\"/create\">\n                {/* Applying compact and rounded styles to Create button */}\n                <button className=\"spotify-button px-4 py-2 rounded-md font-semibold\">Create a coin</button>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-1.5\">\n              {filteredCoins.map((coin) => (\n                <CoinCard key={coin.id} coin={coin} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      </Layout>\n  );\n}","size_bytes":8219},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/migrate-old-data.ts":{"content":"import { storage } from \"./storage\";\n\n// Old coins data structure\ninterface OldCoin {\n  id: string;\n  coin_address: string;\n  creator_wallet: string;\n  transaction_hash: string;\n  created_at: string;\n  ipfs_uri: string;\n  metadata: {\n    tags?: string[];\n    image?: string;\n    title?: string;\n    author?: string;\n    content?: string;\n    description?: string;\n    originalUrl?: string;\n    publishDate?: string;\n  };\n  name: string;\n  symbol: string;\n}\n\nconst oldCoinsData: OldCoin[] = [\n  {\n    id: '085bbf2d-ea9a-4311-a93c-81efe81c4e03',\n    coin_address: '0xd4eC4b5D04EB1cc6344f25611542E540Da3AcBF7',\n    creator_wallet: '0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7',\n    transaction_hash: '0xf32a87327eb785d7c62bccc72e04099c36f6d9ac6795671edd44694f155b3be1',\n    created_at: '2025-09-25 00:03:55.594818',\n    ipfs_uri: 'ipfs://bafkreihrnjn4hj6wozky2ss357ma7ewasghxjovzpyykagy5c5qqkt5x3i',\n    metadata: {\n      tags: [],\n      image: 'https://zora.co/api/og-image/coin/base:0xde7c9a53edd5ef151210aa7c1da9dc80068547ab',\n      title: 'Test this test that',\n      author: '',\n      content: '',\n      description: 'A coin representing the blog post: Why Every Senior Developer I Know Is Planning Their Exit | by Harishsingh | Sep, 2025 | Medium',\n      originalUrl: 'https://zora.co/coin/base:0xde7c9a53edd5ef151210aa7c1da9dc80068547ab',\n      publishDate: ''\n    },\n    name: 'Test this test that',\n    symbol: 'TESTTHIS'\n  },\n  {\n    id: '5802d950-d913-4fc2-b4ef-5d4c2f1db213',\n    coin_address: '0x509059DBB581927C8641673126eBACD46AC359Ca',\n    creator_wallet: '0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7',\n    transaction_hash: '0xa0a1215e52ede64b456c92987c4ce6547ba53e309ae80ec064b1e06865f9f6ca',\n    created_at: '2025-09-25 16:07:43.724032',\n    ipfs_uri: 'ipfs://bafkreiel7sh6daodoktdm3pmaeblaknyp2otbilkz3xthvozvksu6gxnge',\n    metadata: {\n      tags: [],\n      image: 'https://yellow-patient-cheetah-559.mypinata.cloud/ipfs/bafkreiel7sh6daodoktdm3pmaeblaknyp2otbilkz3xthvozvksu6gxnge',\n      title: 'VICTORIA',\n      author: '',\n      content: '',\n      description: '',\n      originalUrl: '',\n      publishDate: ''\n    },\n    name: 'VICTORIA',\n    symbol: 'VICTO'\n  },\n  {\n    id: 'f3f15db4-b357-47f1-bff3-7537933845a0',\n    coin_address: '0x123...',\n    creator_wallet: '0xabc...',\n    transaction_hash: '0xhash...',\n    created_at: '2025-09-13 12:21:24.872099',\n    ipfs_uri: 'ipfs://uri',\n    metadata: {\n      tags: [],\n      image: '',\n      title: 'Recovered Blog Coin',\n      author: '',\n      content: '',\n      description: 'A recovered blog coin from the old system',\n      originalUrl: '',\n      publishDate: ''\n    },\n    name: 'Recovered Blog Coin',\n    symbol: 'BLOGFIX'\n  },\n  {\n    id: 'f4248ea3-59b2-4448-92ae-bfc7f59e9d12',\n    coin_address: '0xDE7C9a53eDd5Ef151210Aa7C1Da9dC80068547Ab',\n    creator_wallet: '0xb843A2D0D4B9E628500d2E0f6f0382e063C14a95',\n    transaction_hash: '0xf2469e00c6688fa9b193bc7b4c1f0ebacf64f87ae552dec948c53d83a0c4b370',\n    created_at: '2025-09-13 13:27:57.883838',\n    ipfs_uri: 'ipfs://bafkreihtfa57szgjp6qu7xzytj7otuyoyl67qmnzlu3p4bmesuumpsa3ki',\n    metadata: {\n      tags: [],\n      image: 'https://miro.medium.com/v2/da:true/resize:fit:1200/0*jCeSNt_UZku7uzGM',\n      title: 'Why Every Senior Developer I Know Is Planning Their Exit | by Harishsingh | Sep, 2025 | Medium',\n      author: 'Harishsingh',\n      content: 'Member-only storyWhy Every Senior Developer I Know Is Planning Their ExitHarishsingh4 min read·Sep 4, 2025--62ShareAfter 10 years in software development, with the last three in high-frequency trading, I\\'m witnessing something unprecedented: every senior developer in my network is planning their exit from traditional employment. Not just job-hopping , complete career pivots.Press enter or click to view image in full sizeAI-generated digital illustrationThe reasons go deeper than burnout or better pay. The fundamental relationship between developers and the industry has shifted, and the smart money is already moving.The Invisible Productivity TaxModern development has become an exercise in navigating bureaucracy rather than solving problems. Here\\'s what my day looked like this week:Time Breakdown (40-hour week):Actual coding: 12 hours (30%)Meetings about meetings: 8 hours (20%)Process compliance: 8 hours (20%)Documentation for audit trails: 6 hours (15%)Context switching overhead: 6 hours (15%)In HFT, microseconds matter. Yet I spend more time in Jira than optimizing algorithms. The irony is suffocating.// What I want to writefunc optimizeOrderExecution(order *Order) (*Execution, error) { return executeWithMinimalLatency(order)}// What compliance…',\n      description: 'Why Every Senior Developer I Know Is Planning Their Exit After 10 years in software development, with the last three in high-frequency trading, I\\'m witnessing something unprecedented: every senior …',\n      originalUrl: 'https://medium.com/@harishsingh8529/why-every-senior-developer-i-know-is-planning-their-exit-8294cc17b7c7',\n      publishDate: '2025-09-10T04:50:40.894Z'\n    },\n    name: 'Test this test that',\n    symbol: 'TESTEST'\n  },\n  {\n    id: 'fc0604ca-6e8a-4fed-b7e0-078ca63b6a09',\n    coin_address: '0x285f10f443aA139C1d0982815BF1B039aE438a3a',\n    creator_wallet: '0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7',\n    transaction_hash: '',\n    created_at: '2025-09-28 16:26:39.379569',\n    ipfs_uri: 'ipfs://bafkreicvvt4qxbyqjle5lkn472eyucggenrflzlkflozv2dpo5aj6jnvxm',\n    metadata: {\n      tags: [],\n      image: 'ipfs://bafybeifknagau4jdfz2bym4y7nurtjtop53wnamy5lzx573pzjpmxrg7mu',\n      title: 'CreatorEarning',\n      author: '',\n      content: '',\n      description: 'A coin representing the image: CreatorEarning',\n      originalUrl: '',\n      publishDate: ''\n    },\n    name: 'CreatorEarning',\n    symbol: 'CREATEANDEARN'\n  },\n  {\n    id: 'fd630af5-fad3-426b-920a-22aa86fee84e',\n    coin_address: '0xe8aFE7B4687abad8603495deC3b9Fd37D697b663',\n    creator_wallet: '0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7',\n    transaction_hash: '0x0a679ca18599d1401806dc9f1ce6211d9d8eeae35cc728bd0863624b8ea085a4',\n    created_at: '2025-09-25 14:47:07.161196',\n    ipfs_uri: 'ipfs://bafkreifzddskxxtsmqpjzutdg3hpf4qagowixd7bjem4y6jifzy3vi7oey',\n    metadata: {\n      tags: [],\n      image: 'ipfs://bafkreifzddskxxtsmqpjzutdg3hpf4qagowixd7bjem4y6jifzy3vi7oey',\n      title: 'YELLOW',\n      author: '',\n      content: '',\n      description: '',\n      originalUrl: '',\n      publishDate: ''\n    },\n    name: 'YELLOW',\n    symbol: 'YELLOW'\n  }\n];\n\nlet migrationCompleted = false;\n\nexport async function migrateOldData() {\n  const startTime = Date.now();\n  const errors: string[] = [];\n  let migratedCount = 0;\n\n  for (const oldCoin of oldCoinsData) {\n    try {\n      // Check if coin already exists by address\n      const existingCoin = await storage.getCoinByAddress(oldCoin.coin_address);\n      if (existingCoin) {\n        console.log(`Coin ${oldCoin.coin_address} already exists, skipping`);\n        continue;\n      }\n\n      // Create scraped content from metadata\n      const scrapedContent = await storage.createScrapedContent({\n        url: oldCoin.metadata.originalUrl || `https://etherscan.io/tx/${oldCoin.transaction_hash}`,\n        platform: 'blog',\n        title: oldCoin.metadata.title || oldCoin.name,\n        description: oldCoin.metadata.description || '',\n        author: oldCoin.metadata.author || '',\n        publishDate: oldCoin.metadata.publishDate || '',\n        image: oldCoin.metadata.image || '',\n        content: oldCoin.metadata.content || '',\n        tags: oldCoin.metadata.tags || [],\n      });\n\n      // Skip coins without creator_wallet\n      if (!oldCoin.creator_wallet) {\n        const errorMsg = `Skipped coin ${oldCoin.id}: missing creator_wallet`;\n        errors.push(errorMsg);\n        console.log(errorMsg);\n        continue;\n      }\n\n      // Create coin and creator, linked to scraped content\n      const coin = await storage.createCoin({\n        name: oldCoin.name,\n        symbol: oldCoin.symbol,\n        creator_wallet: oldCoin.creator_wallet,\n        address: oldCoin.coin_address,\n        status: 'active',\n        scrapedContentId: scrapedContent?.id || null,\n        ipfsUri: oldCoin.ipfs_uri || null,\n      });\n\n      // Create or update creator\n      let creator = await storage.getCreatorByAddress(oldCoin.creator_wallet);\n      if (!creator) {\n        creator = await storage.createCreator({\n          address: oldCoin.creator_wallet,\n          totalCoins: '1',\n          totalVolume: '0',\n          followers: '0',\n        });\n      } else {\n        const newTotalCoins = (parseInt(creator.totalCoins) + 1).toString();\n        await storage.updateCreator(creator.id, {\n          totalCoins: newTotalCoins,\n        });\n      }\n\n      migratedCount++;\n    } catch (error) {\n      const errorMsg = `Failed to migrate coin ${oldCoin.id}: ${error}`;\n      errors.push(errorMsg);\n    }\n  }\n\n  const duration = Date.now() - startTime;\n  return {\n    success: true,\n    count: migratedCount,\n    total: oldCoinsData.length,\n    errors,\n    duration: `${duration}ms`\n  };\n}\n\nexport async function autoMigrateOnStartup() {\n  if (migrationCompleted) {\n    return { message: \"Migration already completed\" };\n  }\n\n  try {\n    // Check if any coins exist already\n    const existingCoins = await storage.getAllCoins();\n    if (existingCoins.length === 0) {\n      console.log(\"No coins found, running automatic migration...\");\n      const result = await migrateOldData();\n      migrationCompleted = true;\n      console.log(`Migration completed: ${result.count}/${result.total} coins imported`);\n      return result;\n    } else {\n      console.log(`Found ${existingCoins.length} existing coins, skipping migration`);\n      migrationCompleted = true;\n      return { message: `Skipped migration, found ${existingCoins.length} existing coins` };\n    }\n  } catch (error) {\n    console.error(\"Auto migration failed:\", error);\n    return { error: \"Auto migration failed\" };\n  }\n}\n\n// Old rewards/fee data from previous database\ninterface OldReward {\n  type: 'platform' | 'trade';\n  coinAddress: string;\n  coinSymbol: string;\n  transactionHash: string;\n  rewardAmount: string;\n  recipientAddress: string;\n  createdAt: string;\n}\n\nconst oldRewardsData: OldReward[] = [\n  // Add your historical rewards data here\n  // Example format:\n  // {\n  //   type: 'platform',\n  //   coinAddress: '0xd4eC4b5D04EB1cc6344f25611542E540Da3AcBF7',\n  //   coinSymbol: 'TESTTHIS',\n  //   transactionHash: '0x...',\n  //   rewardAmount: '1000000000000000000', // 1 ZORA in wei\n  //   recipientAddress: '0xYourPlatformAddress',\n  //   createdAt: '2025-09-25 00:03:55'\n  // }\n];\n\nexport async function migrateOldRewards() {\n  const startTime = Date.now();\n  const errors: string[] = [];\n  let migratedCount = 0;\n\n  for (const oldReward of oldRewardsData) {\n    try {\n      // Check if reward already exists by transaction hash\n      const existingRewards = await storage.getAllRewards();\n      const exists = existingRewards.some(r => r.transactionHash === oldReward.transactionHash);\n      \n      if (exists) {\n        console.log(`Reward ${oldReward.transactionHash} already exists, skipping`);\n        continue;\n      }\n\n      await storage.createReward({\n        type: oldReward.type,\n        coinAddress: oldReward.coinAddress,\n        coinSymbol: oldReward.coinSymbol,\n        transactionHash: oldReward.transactionHash,\n        rewardAmount: oldReward.rewardAmount,\n        rewardCurrency: 'ZORA',\n        recipientAddress: oldReward.recipientAddress,\n      });\n\n      migratedCount++;\n    } catch (error) {\n      const errorMsg = `Failed to migrate reward ${oldReward.transactionHash}: ${error}`;\n      errors.push(errorMsg);\n    }\n  }\n\n  const duration = Date.now() - startTime;\n  return {\n    success: true,\n    count: migratedCount,\n    total: oldRewardsData.length,\n    errors,\n    duration: `${duration}ms`\n  };\n}\n\n// Export for use in routes\nexport { oldCoinsData, oldRewardsData };","size_bytes":11976},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/notifications.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAccount } from \"wagmi\";\nimport type { Notification } from \"@shared/schema\";\nimport Layout from \"@/components/layout\";\nimport { Bell, DollarSign, TrendingUp, Coins as CoinsIcon, Gift } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatDistanceToNow, isToday, isYesterday, differenceInMinutes } from \"date-fns\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useLocation } from \"wouter\";\nimport DailyPointsModal from \"@/components/daily-points-modal\"; // Assuming this component exists\n\nexport default function Notifications() {\n  const { address, isConnected } = useAccount();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [`/api/notifications/${address}`],\n    enabled: !!address,\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      return apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/notifications/${address}`] });\n    },\n  });\n\n  const { data: loginStreakData, isLoading: isLoadingLoginStreak } = useQuery({\n    queryKey: ['/api/login-streak', address],\n    enabled: !!address,\n  });\n\n  const { mutate: claimDailyPoints } = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/login-streak/claim', {\n        address: address,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/login-streak'] });\n      toast({\n        title: \"Points Claimed!\",\n        description: \"Your daily streak points have been added.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to claim points: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleNotificationClick = async (notification: Notification) => {\n    if (!notification.read) {\n      await markAsReadMutation.mutateAsync(notification.id);\n    }\n\n    // Handle daily streak notifications - trigger check-in which will show modal\n    if (notification.type === 'reward' && notification.title?.includes('Daily')) {\n      try {\n        await apiRequest('POST', '/api/login-streak/check-in', {\n          address: address,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/login-streak'] });\n      } catch (error) {\n        console.error('Failed to check-in:', error);\n      }\n    }\n\n    // Handle navigation based on notification type\n    if (notification.coinAddress) {\n      // Navigate to home and let the coin modal open\n      setLocation(`/`);\n    }\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'coin_created':\n        return <CoinsIcon className=\"w-4 h-4\" />;\n      case 'trade':\n      case 'buy':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'sell':\n        return <DollarSign className=\"w-4 h-4\" />;\n      case 'reward':\n        return <Gift className=\"w-4 h-4\" />;\n      case 'trending':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'performance':\n        return <DollarSign className=\"w-4 h-4\" />;\n      default:\n        return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getNotificationAvatar = (type: string, title?: string) => {\n    // Special styling for streak-related rewards\n    const isStreak = title?.includes('Streak') || title?.includes('Login');\n\n    const iconBg = type === 'coin_created' ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400' :\n                   type === 'trade' || type === 'buy' ? 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400' :\n                   type === 'sell' ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400' :\n                   type === 'reward' && isStreak ? 'bg-orange-100 dark:bg-orange-900/30 text-orange-600 dark:text-orange-400' :\n                   type === 'reward' ? 'bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400' :\n                   type === 'trending' ? 'bg-orange-100 dark:bg-orange-900/30 text-orange-600 dark:text-orange-400' :\n                   type === 'performance' ? 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400' :\n                   'bg-gray-100 dark:bg-gray-900/30 text-gray-600 dark:text-gray-400';\n\n    return (\n      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${iconBg}`}>\n        {getNotificationIcon(type)}\n      </div>\n    );\n  };\n\n  const groupNotificationsByTime = (notifications: Notification[]) => {\n    const now = new Date();\n    const groups: { [key: string]: Notification[] } = {\n      'Now': [],\n      'Today': [],\n      'Yesterday': [],\n      'Earlier': [],\n    };\n\n    notifications.forEach(notification => {\n      if (!notification.createdAt) {\n        groups['Earlier'].push(notification);\n        return;\n      }\n\n      const notifDate = new Date(notification.createdAt);\n\n      // Check if date is valid\n      if (isNaN(notifDate.getTime())) {\n        groups['Earlier'].push(notification);\n        return;\n      }\n\n      const minutesAgo = differenceInMinutes(now, notifDate);\n\n      if (minutesAgo < 5) {\n        groups['Now'].push(notification);\n      } else if (isToday(notifDate)) {\n        groups['Today'].push(notification);\n      } else if (isYesterday(notifDate)) {\n        groups['Yesterday'].push(notification);\n      } else {\n        groups['Earlier'].push(notification);\n      }\n    });\n\n    return Object.entries(groups).filter(([_, items]) => items.length > 0);\n  };\n\n  const groupedNotifications = groupNotificationsByTime(notifications);\n\n  if (!isConnected) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <Bell className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Connect Your Wallet</h2>\n            <p className=\"text-muted-foreground\">Please connect your wallet to view notifications</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  // Check if modal should be shown\n  const showModal = loginStreakData?.needsCheckIn && !isLoadingLoginStreak;\n\n  return (\n    <Layout>\n      {showModal && <DailyPointsModal onClaim={claimDailyPoints} />}\n      <section className=\"p-4 sm:p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Simple Header */}\n          <div className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold text-white dark:text-white\" data-testid=\"text-notifications-title\">Notifications</h1>\n          </div>\n\n          {/* Notifications List */}\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex items-start gap-3\">\n                  <Skeleton className=\"w-10 h-10 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-3 w-1/4\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Bell className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-white dark:text-white mb-2\">No notifications yet</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                You'll see notifications here when there's activity on your coins\n              </p>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-[calc(100vh-200px)]\">\n              <div className=\"space-y-6\">\n                {groupedNotifications.map(([timeGroup, groupNotifications]) => (\n                  <div key={timeGroup}>\n                    {/* Time Group Header */}\n                    <h2 className=\"text-sm font-semibold text-white dark:text-white mb-3\" data-testid={`text-time-group-${timeGroup.toLowerCase()}`}>\n                      {timeGroup}\n                    </h2>\n\n                    {/* Notifications in this time group */}\n                    <div className=\"space-y-3\">\n                      {groupNotifications.map((notification) => (\n                        <div\n                          key={notification.id}\n                          className=\"flex items-start gap-3 cursor-pointer hover:bg-muted/5 dark:hover:bg-muted/5 p-2 rounded-lg transition-colors\"\n                          onClick={() => handleNotificationClick(notification)}\n                          data-testid={`notification-item-${notification.id}`}\n                        >\n                          {/* Avatar */}\n                          <div className=\"flex-shrink-0\">\n                            {getNotificationAvatar(notification.type, notification.title)}\n                          </div>\n\n                          {/* Content */}\n                          <div className=\"flex-1 min-w-0\">\n                            <p className={`text-sm ${!notification.read ? 'font-medium text-white dark:text-white' : 'text-muted-foreground'}`}>\n                              {notification.message}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground mt-0.5\">\n                              {notification.createdAt && new Date(notification.createdAt).getTime()\n                                ? formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })\n                                : 'Recently'}\n                            </p>\n                          </div>\n\n                          {/* Unread indicator */}\n                          {!notification.read && (\n                            <div className=\"flex-shrink-0\">\n                              <div className=\"w-2 h-2 rounded-full bg-blue-500\" data-testid=\"indicator-unread\" />\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </section>\n    </Layout>\n  );\n}","size_bytes":10651},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2926},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertScrapedContentSchema, insertCoinSchema, updateCoinSchema, insertCommentSchema, insertNotificationSchema, insertFollowSchema, insertReferralSchema, updateCreatorSchema } from \"@shared/schema\";\nimport axios from \"axios\";\nimport { detectPlatform } from \"./platform-detector\";\nimport { scrapeByPlatform } from \"./platform-scrapers\";\nimport { migrateOldData } from \"./migrate-old-data\";\nimport { sendTelegramNotification } from \"./telegram-bot\";\nimport { RegistryService } from \"./registry-service\";\nimport { ActivityTrackerService } from \"./activity-tracker-service\";\nimport { base } from \"viem/chains\";\nimport { handleFileUpload } from \"./upload-handler\"; // Import the upload handler\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // GeckoTerminal API endpoints\n  app.get(\"/api/geckoterminal/pools/:network/:tokenAddress\", async (req, res) => {\n    try {\n      const { network, tokenAddress } = req.params;\n      const page = parseInt(req.query.page as string || '1');\n\n      const response = await axios.get(\n        `https://api.geckoterminal.com/api/v2/networks/${network}/tokens/${tokenAddress}/pools`,\n        { params: { page } }\n      );\n\n      res.json(response.data);\n    } catch (error) {\n      console.error('GeckoTerminal pool search error:', error);\n      res.status(500).json({ error: 'Failed to fetch pool data from GeckoTerminal' });\n    }\n  });\n\n  app.get(\"/api/geckoterminal/pool/:network/:poolAddress\", async (req, res) => {\n    try {\n      const { network, poolAddress } = req.params;\n      const include = req.query.include as string || 'base_token,quote_token';\n\n      const response = await axios.get(\n        `https://api.geckoterminal.com/api/v2/networks/${network}/pools/${poolAddress}`,\n        { params: { include } }\n      );\n\n      res.json(response.data);\n    } catch (error) {\n      console.error('GeckoTerminal pool data error:', error);\n      res.status(500).json({ error: 'Failed to fetch pool details from GeckoTerminal' });\n    }\n  });\n\n  app.get(\"/api/geckoterminal/ohlcv/:network/:poolAddress/:timeframe\", async (req, res) => {\n    try {\n      const { network, poolAddress, timeframe } = req.params;\n      const { aggregate = '1', limit = '100', currency = 'usd', token = 'base' } = req.query;\n\n      const response = await axios.get(\n        `https://api.geckoterminal.com/api/v2/networks/${network}/pools/${poolAddress}/ohlcv/${timeframe}`,\n        { params: { aggregate, limit, currency, token } }\n      );\n\n      res.json(response.data);\n    } catch (error) {\n      console.error('GeckoTerminal OHLCV data error:', error);\n      res.status(500).json({ error: 'Failed to fetch chart data from GeckoTerminal' });\n    }\n  });\n\n  // File upload endpoint\n  app.post(\"/api/upload\", handleFileUpload);\n\n  // Create scraped content endpoint (for direct content creation)\n  app.post(\"/api/scraped-content\", async (req, res) => {\n    try {\n      const validatedData = insertScrapedContentSchema.parse(req.body);\n      const stored = await storage.createScrapedContent(validatedData);\n      res.json(stored);\n    } catch (error) {\n      console.error('Create scraped content error:', error);\n      res.status(400).json({ \n        error: 'Invalid scraped content data',\n        details: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Scrape URL endpoint\n  app.post(\"/api/scrape\", async (req, res) => {\n    try {\n      const { url } = req.body;\n\n      if (!url) {\n        return res.status(400).json({ error: \"URL is required\" });\n      }\n\n      // Validate URL\n      try {\n        new URL(url);\n      } catch {\n        return res.status(400).json({ error: \"Invalid URL format\" });\n      }\n\n      // Detect platform\n      const platformInfo = detectPlatform(url);\n\n      // Scrape content using platform-specific logic\n      const scrapedData = await scrapeByPlatform(url, platformInfo.type);\n\n      // Validate and store\n      const validatedData = insertScrapedContentSchema.parse(scrapedData);\n      const stored = await storage.createScrapedContent(validatedData);\n\n      res.json(stored);\n\n    } catch (error) {\n      console.error('Scraping error:', error);\n\n      if (axios.isAxiosError(error)) {\n        if (error.code === 'ECONNABORTED') {\n          return res.status(408).json({\n            error: 'Request timeout - the page took too long to load'\n          });\n        }\n        if (error.response?.status === 404) {\n          return res.status(404).json({\n            error: 'Page not found - please check the URL is correct'\n          });\n        }\n        if (error.response?.status === 403) {\n          return res.status(403).json({\n            error: 'Access forbidden - this platform blocks automated access'\n          });\n        }\n        if (error.response?.status === 429) {\n          return res.status(429).json({\n            error: 'Rate limit exceeded - Instagram and TikTok often block scrapers. Try YouTube, Medium, or blog URLs instead.'\n          });\n        }\n      }\n\n      res.status(500).json({\n        error: 'Failed to scrape content - some platforms block automated access. Try a different URL or platform.'\n      });\n    }\n  });\n\n  // Get all coins\n  app.get(\"/api/coins\", async (req, res) => {\n    try {\n      const coins = await storage.getAllCoins();\n\n      // Add platform detection to each coin based on available fields\n      const coinsWithPlatform = coins.map(coin => {\n        let platform = 'all';\n\n        // Check multiple sources for URL\n        const urls = [\n          coin.image,\n          coin.description,\n          coin.name\n        ].filter(Boolean).join(' ').toLowerCase();\n\n        if (urls.includes('youtube.com') || urls.includes('youtu.be')) {\n          platform = 'youtube';\n        } else if (urls.includes('warpcast.com') || urls.includes('farcaster')) {\n          platform = 'farcaster';\n        } else if (urls.includes('gitcoin.co')) {\n          platform = 'gitcoin';\n        } else if (urls.includes('spotify.com') || urls.includes('open.spotify')) {\n          platform = 'spotify';\n        } else if (urls.includes('tiktok.com')) {\n          platform = 'tiktok';\n        } else if (urls.includes('instagram.com')) {\n          platform = 'instagram';\n        } else if (urls.includes('medium.com')) {\n          platform = 'medium';\n        } else if (urls.includes('giveth.io')) {\n          platform = 'giveth';\n        } else if (urls.includes('twitter.com') || urls.includes('x.com')) {\n          platform = 'twitter';\n        } else if (urls.includes('blog') || urls.includes('wordpress') || urls.includes('blogspot')) {\n          platform = 'blog';\n        }\n\n        return {\n          ...coin,\n          platform\n        };\n      });\n\n      res.json(coinsWithPlatform);\n    } catch (error: any) {\n      console.error(\"Error fetching coins:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get coins by creator\n  app.get(\"/api/coins/creator/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const coins = await storage.getCoinsByCreator(address);\n      res.json(coins);\n    } catch (error) {\n      console.error('Get creator coins error:', error);\n      res.status(500).json({ error: 'Failed to fetch creator coins' });\n    }\n  });\n\n  // Create coin\n  app.post(\"/api/coins\", async (req, res) => {\n    try {\n      const validatedData = insertCoinSchema.parse(req.body);\n      const coin = await storage.createCoin(validatedData);\n\n      // Auto-create or update creator (only if creator address exists)\n      const creatorAddress = validatedData.creator_wallet;\n      if (!creatorAddress) {\n        return res.status(400).json({ error: 'Creator address is required' });\n      }\n\n      let creator = await storage.getCreatorByAddress(creatorAddress);\n      if (!creator) {\n        // Create new creator with referral code (will be set when they set username)\n        creator = await storage.createCreator({\n          address: creatorAddress,\n          totalCoins: '1',\n          totalVolume: '0',\n          followers: '0',\n          referralCode: null,\n        });\n      } else {\n        // Update existing creator's coin count\n        const newTotalCoins = (parseInt(creator.totalCoins) + 1).toString();\n        await storage.updateCreator(creator.id, {\n          totalCoins: newTotalCoins,\n        });\n      }\n\n      // Create in-app notification for coin creation\n      await storage.createNotification({\n        userId: creatorAddress,\n        type: 'coin_created',\n        title: '🪙 Coin Created Successfully!',\n        message: `Your coin \"${coin.name}\" (${coin.symbol}) has been created${coin.address ? ' and is now live on the blockchain!' : '!'}`,\n        coinAddress: coin.address,\n        coinSymbol: coin.symbol,\n        read: false,\n      });\n\n      // Record on-chain if coin has been deployed (has address)\n      if (coin.address && coin.status === 'active') {\n        try {\n          const { activityTrackerService } = await import('./activity-tracker.js');\n          const txHash = await activityTrackerService.recordCoinCreation(\n            coin.address as `0x${string}`,\n            creatorAddress as `0x${string}`,\n            coin.image || '',\n            coin.name,\n            coin.symbol\n          );\n\n          if (txHash) {\n            console.log(`✅ Coin ${coin.symbol} recorded on-chain: ${txHash}`);\n          }\n        } catch (error) {\n          console.error('Failed to record coin creation on-chain:', error);\n          // Don't fail the request if on-chain recording fails\n        }\n      }\n\n      // Send Telegram notification for coin creation (to individual users and channel)\n      await sendTelegramNotification(\n        creatorAddress,\n        'New Coin Created! 🪙',\n        `Your coin \"${coin.name}\" (${coin.symbol}) has been created successfully!${coin.address ? `\\n\\nAddress: ${coin.address}` : ''}`,\n        'coin_created',\n        coin,\n        undefined // Stats will be fetched if coin has an address\n      );\n\n      res.json(coin);\n    } catch (error) {\n      console.error(\"Create coin error:\", error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return res.status(400).json({\n        error: \"Invalid coin data\",\n        details: errorMessage\n      });\n    }\n  });\n\n  // Update coin\n  app.patch(\"/api/coins/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = updateCoinSchema.parse(req.body);\n      const coin = await storage.updateCoin(id, validatedData);\n      if (!coin) {\n        return res.status(404).json({ error: 'Coin not found' });\n      }\n\n      // Create in-app notification when coin becomes active\n      if (validatedData.status === 'active' && validatedData.address && coin.creator_wallet) {\n        await storage.createNotification({\n          userId: coin.creator_wallet,\n          type: 'coin_created',\n          title: '🚀 Coin Deployed Successfully!',\n          message: `Your coin \"${coin.name}\" (${coin.symbol}) is now live on the blockchain! Address: ${validatedData.address}`,\n          coinAddress: validatedData.address,\n          coinSymbol: coin.symbol,\n          read: false,\n        });\n\n        // Also send Telegram notification\n        await sendTelegramNotification(\n          coin.creator_wallet,\n          '🪙 Coin Deployed Successfully!',\n          `Your coin \"${coin.name}\" (${coin.symbol}) is now live on the blockchain!\\n\\nAddress: ${validatedData.address}\\n\\n🚀 Start trading now!`,\n          'coin_created',\n          coin,\n          undefined // Stats will be fetched if needed\n        );\n      }\n\n      res.json(coin);\n    } catch (error) {\n      console.error('Update coin error:', error);\n      res.status(400).json({ error: 'Invalid update data' });\n    }\n  });\n\n  // Get coin by address\n  app.get(\"/api/coins/address/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const coin = await storage.getCoinByAddress(address);\n      if (!coin) {\n        return res.status(404).json({ error: 'Coin not found' });\n      }\n      res.json(coin);\n    } catch (error) {\n      console.error('Get coin error:', error);\n      res.status(500).json({ error: 'Failed to fetch coin' });\n    }\n  });\n\n  // Migrate old data endpoint\n  app.post(\"/api/migrate\", async (_req, res) => {\n    try {\n      const coinsResult = await migrateOldData();\n      const { migrateOldRewards } = await import(\"./migrate-old-data\");\n      const rewardsResult = await migrateOldRewards();\n\n      res.json({\n        coins: coinsResult,\n        rewards: rewardsResult,\n        summary: {\n          totalMigrated: coinsResult.count + rewardsResult.count,\n          coinsCount: coinsResult.count,\n          rewardsCount: rewardsResult.count,\n        }\n      });\n    } catch (error) {\n      console.error('Migration error:', error);\n      res.status(500).json({ error: 'Migration failed' });\n    }\n  });\n\n  // Broadcast existing coins to Telegram\n  app.post(\"/api/telegram/broadcast-coins\", async (_req, res) => {\n    try {\n      const coins = await storage.getAllCoins();\n\n      if (coins.length === 0) {\n        return res.json({\n          success: true,\n          message: 'No coins to broadcast',\n          broadcasted: 0\n        });\n      }\n\n      // Broadcast coins one by one with professional formatting\n      let successCount = 0;\n      const errors: string[] = [];\n\n      for (const coin of coins) {\n        try {\n          // Only broadcast coins that have addresses (deployed coins)\n          if (coin.address && coin.creator_wallet) {\n            await sendTelegramNotification(\n              coin.creator_wallet,\n              'Coin Created',\n              '',\n              'coin_created',\n              coin,\n              undefined\n            );\n            successCount++;\n\n            // Add a small delay between broadcasts to avoid rate limiting\n            await new Promise(resolve => setTimeout(resolve, 500));\n          }\n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : String(error);\n          errors.push(`${coin.name}: ${errorMsg}`);\n          console.error(`Failed to broadcast coin ${coin.name}:`, error);\n        }\n      }\n\n      res.json({\n        success: true,\n        message: `Broadcasted ${successCount} out of ${coins.length} coins`,\n        broadcasted: successCount,\n        total: coins.length,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      console.error('Broadcast error:', error);\n      res.status(500).json({ error: 'Broadcast failed' });\n    }\n  });\n\n  // Create reward endpoint (for tracking platform and trade fees)\n  app.post(\"/api/rewards\", async (req, res) => {\n    try {\n      const { type, coinAddress, coinSymbol, transactionHash, rewardAmount, recipientAddress, traderAddress } = req.body;\n\n      if (!type || !coinAddress || !coinSymbol || !transactionHash || !rewardAmount || !recipientAddress) {\n        return res.status(400).json({ error: 'Missing required reward fields' });\n      }\n\n      const reward = await storage.createReward({\n        type,\n        coinAddress,\n        coinSymbol,\n        transactionHash,\n        rewardAmount,\n        rewardCurrency: 'ZORA',\n        recipientAddress\n      });\n\n      // Record fees on-chain if activity tracker is configured\n      if (traderAddress) {\n        const { activityTrackerService } = await import('./activity-tracker.js');\n\n        // Calculate creator and platform fees based on type\n        const rewardAmountBigInt = BigInt(rewardAmount);\n        let creatorFee = 0n;\n        let platformFee = 0n;\n\n        if (type === 'platform') {\n          platformFee = rewardAmountBigInt;\n        } else if (type === 'trade') {\n          creatorFee = rewardAmountBigInt;\n        }\n\n        // Record to blockchain\n        await activityTrackerService.recordFees(\n          coinAddress as `0x${string}`,\n          traderAddress as `0x${string}`,\n          creatorFee,\n          platformFee\n        );\n      }\n\n      // Send earnings notification to creator (for trade fees only, not platform)\n      if (type === 'trade' && recipientAddress) {\n        // Use notification service for randomized earnings messages\n        const { notificationService } = await import('./notification-service');\n        await notificationService.notifyUserEarnings(recipientAddress, reward);\n      }\n\n      res.json(reward);\n    } catch (error) {\n      console.error('Create reward error:', error);\n      res.status(500).json({ error: 'Failed to create reward' });\n    }\n  });\n\n  // Get all rewards\n  app.get(\"/api/rewards\", async (_req, res) => {\n    try {\n      const rewards = await storage.getAllRewards();\n      res.json(rewards);\n    } catch (error) {\n      console.error('Get rewards error:', error);\n      res.status(500).json({ error: 'Failed to fetch rewards' });\n    }\n  });\n\n  // Get rewards by coin\n  app.get(\"/api/rewards/coin/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const rewards = await storage.getRewardsByCoin(address);\n      res.json(rewards);\n    } catch (error) {\n      console.error('Get coin rewards error:', error);\n      res.status(500).json({ error: 'Failed to fetch coin rewards' });\n    }\n  });\n\n  // Check coin's platform referral status and earnings\n  app.get(\"/api/rewards/coin/:address/status\", async (req, res) => {\n    try {\n      const { address } = req.params;\n\n      // Get coin info\n      const coin = await storage.getCoinByAddress(address);\n      if (!coin) {\n        return res.status(404).json({ error: 'Coin not found' });\n      }\n\n      // Get all rewards for this coin\n      const rewards = await storage.getRewardsByCoin(address);\n\n      // Calculate earnings\n      const platformFees = rewards\n        .filter(r => r.type === 'platform')\n        .reduce((sum, r) => sum + parseFloat(r.rewardAmount) / 1e18, 0);\n\n      const tradeFees = rewards\n        .filter(r => r.type === 'trade')\n        .reduce((sum, r) => sum + parseFloat(r.rewardAmount) / 1e18, 0);\n\n      const totalEarnings = platformFees + tradeFees;\n\n      // Check if platform referral was likely set (has platform rewards)\n      const hasPlatformReferral = rewards.some(r => r.type === 'platform');\n\n      res.json({\n        coinAddress: address,\n        coinSymbol: coin.symbol,\n        coinName: coin.name,\n        status: coin.status,\n        hasPlatformReferral,\n        platformReferralAddress: hasPlatformReferral\n          ? rewards.find(r => r.type === 'platform')?.recipientAddress\n          : null,\n        earnings: {\n          total: totalEarnings,\n          platform: platformFees,\n          trade: tradeFees,\n          currency: 'ZORA'\n        },\n        rewardsCount: {\n          total: rewards.length,\n          platform: rewards.filter(r => r.type === 'platform').length,\n          trade: rewards.filter(r => r.type === 'trade').length\n        },\n        firstReward: rewards.length > 0 ? rewards.length - 1 : null,\n        lastReward: rewards.length > 0 ? rewards[0].createdAt : null\n      });\n    } catch (error) {\n      console.error('Get coin status error:', error);\n      res.status(500).json({ error: 'Failed to fetch coin status' });\n    }\n  });\n\n  // Get rewards by recipient\n  app.get(\"/api/rewards/recipient/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const rewards = await storage.getRewardsByRecipient(address);\n      res.json(rewards);\n    } catch (error) {\n      console.error('Get recipient rewards error:', error);\n      res.status(500).json({ error: 'Failed to fetch recipient rewards' });\n    }\n  });\n\n  // Record a new reward (duplicate endpoint - should be consolidated)\n  app.post(\"/api/rewards/record\", async (req, res) => {\n    try {\n      const rewardData = {\n        type: req.body.type, // 'platform' or 'trade'\n        coinAddress: req.body.coinAddress,\n        coinSymbol: req.body.coinSymbol,\n        transactionHash: req.body.transactionHash,\n        rewardAmount: req.body.rewardAmount, // In wei as string\n        rewardCurrency: req.body.rewardCurrency || 'ZORA',\n        recipientAddress: req.body.recipientAddress,\n      };\n\n      const reward = await storage.createReward(rewardData);\n      \n      // Send earnings notification if it's a trade reward\n      if (rewardData.type === 'trade' && rewardData.recipientAddress) {\n        const { notificationService } = await import('./notification-service');\n        await notificationService.notifyUserEarnings(rewardData.recipientAddress, reward);\n      }\n      \n      res.json(reward);\n    } catch (error) {\n      console.error('Create reward error:', error);\n      res.status(400).json({ error: 'Invalid reward data' });\n    }\n  });\n\n  // Get all creators\n  app.get(\"/api/creators\", async (req, res) => {\n    try {\n      const creators = await storage.getAllCreators();\n      res.json(creators);\n    } catch (error) {\n      console.error('Get creators error:', error);\n      res.status(500).json({ error: 'Failed to fetch creators' });\n    }\n  });\n\n  // Get top creators\n  app.get(\"/api/creators/top\", async (req, res) => {\n    try {\n      const creators = await storage.getTopCreators();\n      res.json(creators);\n    } catch (error) {\n      console.error('Get top creators error:', error);\n      res.status(500).json({ error: 'Failed to fetch top creators' });\n    }\n  });\n\n  // Get creator by address\n  app.get(\"/api/creators/address/:address\", async (req, res) => {\n    const { address } = req.params;\n    try {\n      const creator = await storage.getCreatorByAddress(address);\n      if (!creator) {\n        return res.status(404).json({ error: \"Creator not found\" });\n      }\n      res.json(creator);\n    } catch (error: any) {\n      console.error(\"Error fetching creator:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get creator by username\n  app.get(\"/api/creators/username/:username\", async (req, res) => {\n    const { username } = req.params;\n    try {\n      const creators = await storage.getAllCreators();\n      const creator = creators.find(c => c.name?.toLowerCase() === username.toLowerCase());\n      if (!creator) {\n        return res.status(404).json({ error: \"Creator not found\" });\n      }\n      res.json(creator);\n    } catch (error: any) {\n      console.error(\"Error fetching creator:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Create or update creator\n  app.post(\"/api/creators\", async (req, res) => {\n    try {\n      const { address } = req.body;\n\n      // Check if creator already exists\n      const existingCreator = await storage.getCreatorByAddress(address);\n      if (existingCreator) {\n        return res.json(existingCreator);\n      }\n\n      // Create new creator with username as referral code\n      const referralCode = await getReferralCodeFromUsername(req.body.name || null, req.body.address);\n      const creatorData = {\n        address: req.body.address,\n        name: req.body.name || null,\n        bio: req.body.bio || null,\n        avatar: req.body.avatar || null,\n        verified: req.body.verified || 'false',\n        totalCoins: req.body.totalCoins || '0',\n        totalVolume: req.body.totalVolume || '0',\n        followers: req.body.followers || '0',\n        referralCode: referralCode,\n      };\n\n      const creator = await storage.createCreator(creatorData);\n      res.json(creator);\n    } catch (error) {\n      console.error('Create creator error:', error);\n      res.status(400).json({ error: 'Invalid creator data' });\n    }\n  });\n\n  // Update creator\n  app.patch(\"/api/creators/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData: any = {\n        name: req.body.name,\n        bio: req.body.bio,\n        avatar: req.body.avatar,\n        verified: req.body.verified,\n        totalCoins: req.body.totalCoins,\n        totalVolume: req.body.totalVolume,\n        followers: req.body.followers,\n      };\n\n      // If name is being updated, also update the referral code to match username\n      if (req.body.name !== undefined) {\n        const creator = await storage.getCreator(id);\n        if (creator) {\n          const newReferralCode = await getReferralCodeFromUsername(req.body.name, creator.address);\n          updateData.referralCode = newReferralCode;\n        }\n      }\n\n      const creator = await storage.updateCreator(id, updateData);\n      if (!creator) {\n        return res.status(404).json({ error: 'Creator not found' });\n      }\n      res.json(creator);\n    } catch (error) {\n      console.error('Update creator error:', error);\n      res.status(400).json({ error: 'Invalid update data' });\n    }\n  });\n\n  // Get all comments\n  app.get(\"/api/comments\", async (_req, res) => {\n    try {\n      const comments = await storage.getAllComments();\n      res.json(comments);\n    } catch (error) {\n      console.error('Get comments error:', error);\n      res.status(500).json({ error: 'Failed to fetch comments' });\n    }\n  });\n\n  // Get comments by coin address\n  app.get(\"/api/comments/coin/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const comments = await storage.getCommentsByCoin(address);\n      res.json(comments);\n    } catch (error) {\n      console.error('Get coin comments error:', error);\n      res.status(500).json({ error: 'Failed to fetch coin comments' });\n    }\n  });\n\n  // Create a comment\n  app.post(\"/api/comments\", async (req, res) => {\n    try {\n      const validatedData = insertCommentSchema.parse(req.body);\n      const comment = await storage.createComment(validatedData);\n      res.json(comment);\n    } catch (error) {\n      console.error('Create comment error:', error);\n      res.status(400).json({ error: 'Invalid comment data' });\n    }\n  });\n\n  // Get notifications for user\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const notifications = await storage.getNotificationsByUser(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error('Get notifications error:', error);\n      res.status(500).json({ error: 'Failed to fetch notifications' });\n    }\n  });\n\n  // Get unread notifications for user\n  app.get(\"/api/notifications/:userId/unread\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const notifications = await storage.getUnreadNotificationsByUser(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error('Get unread notifications error:', error);\n      res.status(500).json({ error: 'Failed to fetch unread notifications' });\n    }\n  });\n\n  // Create notification\n  app.post(\"/api/notifications\", async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(validatedData);\n\n      // Send Telegram notification if available\n      await sendTelegramNotification(\n        notification.userId,\n        notification.title,\n        notification.message,\n        notification.type\n      );\n\n      res.json(notification);\n    } catch (error) {\n      console.error('Create notification error:', error);\n      res.status(400).json({ error: 'Invalid notification data' });\n    }\n  });\n\n  // Mark notification as read\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.markNotificationAsRead(id);\n      if (!notification) {\n        return res.status(404).json({ error: 'Notification not found' });\n      }\n      res.json(notification);\n    } catch (error) {\n      console.error('Mark notification read error:', error);\n      res.status(500).json({ error: 'Failed to mark notification as read' });\n    }\n  });\n\n  // Mark all notifications as read\n  app.patch(\"/api/notifications/:userId/read-all\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark all notifications read error:', error);\n      res.status(500).json({ error: 'Failed to mark all notifications as read' });\n    }\n  });\n\n  // Delete notification\n  app.delete(\"/api/notifications/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteNotification(id);\n      if (!deleted) {\n        return res.status(404).json({ error: 'Notification not found' });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete notification error:', error);\n      res.status(500).json({ error: 'Failed to delete notification' });\n    }\n  });\n\n  // Registry endpoints for onchain verification\n  const registryService = new RegistryService(base.id);\n\n  // Activity Tracker endpoints for grant verification\n  const activityTrackerService = new ActivityTrackerService(base.id);\n\n  // Manually trigger batch registration of unregistered coins\n  app.post(\"/api/registry/sync\", async (_req, res) => {\n    try {\n      const coins = await storage.getAllCoins();\n      const unregisteredCoins = coins.filter(\n        coin => coin.address && coin.status === 'active' && !coin.registryTxHash\n      );\n\n      if (unregisteredCoins.length === 0) {\n        return res.json({\n          message: 'No coins to register',\n          registered: 0\n        });\n      }\n\n      const txHash = await registryService.registerCoinsBatch(unregisteredCoins);\n\n      if (txHash) {\n        const now = new Date();\n        for (const coin of unregisteredCoins) {\n          const metadataHash = registryService.generateMetadataHash(coin);\n          await storage.updateCoin(coin.id, {\n            registryTxHash: txHash,\n            metadataHash,\n            registeredAt: now,\n          });\n        }\n\n        return res.json({\n          success: true,\n          transactionHash: txHash,\n          registered: unregisteredCoins.length\n        });\n      } else {\n        return res.status(500).json({\n          error: 'Failed to register coins batch'\n        });\n      }\n    } catch (error) {\n      console.error('Registry sync error:', error);\n      res.status(500).json({ error: 'Failed to sync registry' });\n    }\n  });\n\n  // Get registry statistics\n  app.get(\"/api/registry/stats\", async (_req, res) => {\n    try {\n      const totalRegistered = await registryService.getTotalCoinsRegistered();\n      const allCoins = await storage.getAllCoins();\n      const registeredInDb = allCoins.filter(c => c.registryTxHash).length;\n      const pendingRegistration = allCoins.filter(\n        c => c.address && c.status === 'active' && !c.registryTxHash\n      ).length;\n\n      res.json({\n        totalOnchain: totalRegistered,\n        totalInDb: allCoins.length,\n        registeredInDb,\n        pendingRegistration,\n      });\n    } catch (error) {\n      console.error('Registry stats error:', error);\n      res.status(500).json({ error: 'Failed to fetch registry stats' });\n    }\n  });\n\n  // Manually trigger batch recording of unrecorded coins to activity tracker\n  app.post(\"/api/activity-tracker/sync\", async (_req, res) => {\n    try {\n      const coins = await storage.getAllCoins();\n      const unrecordedCoins = coins.filter(\n        coin => coin.address && coin.status === 'active' && !coin.activityTrackerTxHash\n      );\n\n      if (unrecordedCoins.length === 0) {\n        return res.json({\n          success: true,\n          message: 'No coins to record on activity tracker',\n          recorded: 0,\n          alreadyRegistered: 0\n        });\n      }\n\n      // Ensure all coins have a createdAt timestamp\n      for (const coin of unrecordedCoins) {\n        if (!coin.createdAt) {\n          // Set a reasonable past date for coins without creation dates\n          const fallbackDate = new Date('2025-01-01T00:00:00Z');\n          await storage.updateCoin(coin.id, {\n            createdAt: fallbackDate\n          });\n          coin.createdAt = fallbackDate;\n          console.log(`✅ Set fallback createdAt for ${coin.symbol}: ${fallbackDate.toISOString()}`);\n        }\n      }\n\n      const results = await activityTrackerService.recordCoinBatch(unrecordedCoins);\n\n      const now = new Date();\n      let newlyRecorded = 0;\n      let alreadyRegistered = 0;\n      const failedCoins: string[] = [];\n      \n      for (const [coinId, txHash] of results.entries()) {\n        await storage.updateCoin(coinId, {\n          activityTrackerTxHash: txHash,\n          activityTrackerRecordedAt: now,\n        });\n        \n        // Check if this was already registered (txHash equals coin address)\n        const coin = unrecordedCoins.find(c => c.id === coinId);\n        if (coin && txHash === coin.address) {\n          alreadyRegistered++;\n        } else {\n          newlyRecorded++;\n        }\n      }\n\n      // Track failed coins\n      for (const coin of unrecordedCoins) {\n        if (!results.has(coin.id)) {\n          failedCoins.push(`${coin.symbol} (${coin.address})`);\n        }\n      }\n\n      const response: any = {\n        success: true,\n        message: `Processed ${unrecordedCoins.length} coins: ${newlyRecorded} newly recorded, ${alreadyRegistered} already on-chain, ${failedCoins.length} failed`,\n        recorded: newlyRecorded,\n        alreadyRegistered: alreadyRegistered,\n        failed: failedCoins.length,\n        total: unrecordedCoins.length,\n        transactionHashes: Array.from(results.values()).filter(h => h.startsWith('0x') && h.length > 42)\n      };\n\n      if (failedCoins.length > 0) {\n        response.failedCoins = failedCoins;\n        response.troubleshooting = [\n          'Check console logs for detailed error messages',\n          'Verify PLATFORM_PRIVATE_KEY has sufficient ETH for gas',\n          'Ensure VITE_ACTIVITY_TRACKER_ADDRESS is correct',\n          'Some coins may already be registered on-chain'\n        ];\n      }\n\n      return res.json(response);\n    } catch (error) {\n      console.error('Activity tracker sync error:', error);\n      res.status(500).json({ error: 'Failed to sync activity tracker' });\n    }\n  });\n\n  // Get activity tracker statistics\n  app.get(\"/api/activity-tracker/stats\", async (_req, res) => {\n    try {\n      const allCoins = await storage.getAllCoins();\n      const recordedInDb = allCoins.filter(c => c.activityTrackerTxHash).length;\n      const pendingRecording = allCoins.filter(\n        c => c.address && c.status === 'active' && !c.activityTrackerTxHash\n      ).length;\n\n      res.json({\n        totalInDb: allCoins.length,\n        recordedInDb,\n        pendingRecording,\n      });\n    } catch (error) {\n      console.error('Activity tracker stats error:', error);\n      res.status(500).json({ error: 'Failed to fetch activity tracker stats' });\n    }\n  });\n\n  // Broadcast all existing coins to Telegram\n  app.post(\"/api/telegram/broadcast-coins\", async (_req, res) => {\n    try {\n      const { broadcastExistingCoins } = await import(\"./telegram-bot\");\n      const coins = await storage.getAllCoins();\n      await broadcastExistingCoins(coins);\n\n      res.json({\n        success: true,\n        message: `Broadcasting ${coins.length} coins to connected Telegram users`\n      });\n    } catch (error) {\n      console.error('Telegram broadcast error:', error);\n      res.status(500).json({ error: 'Failed to broadcast coins' });\n    }\n  });\n\n  // Verify if a coin is registered onchain\n  app.get(\"/api/registry/verify/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const isRegistered = await registryService.isPlatformCoin(address);\n\n      const coin = await storage.getCoinByAddress(address);\n\n      res.json({\n        address,\n        isRegistered,\n        registryTxHash: coin?.registryTxHash || null,\n        registeredAt: coin?.registeredAt || null,\n      });\n    } catch (error) {\n      console.error('Registry verify error:', error);\n      res.status(500).json({ error: 'Failed to verify coin' });\n    }\n  });\n\n  // Get creator coin count from registry\n  app.get(\"/api/registry/creator/:address/count\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const count = await registryService.getCreatorCoinCount(address);\n\n      res.json({\n        creator: address,\n        onchainCoinCount: count,\n      });\n    } catch (error) {\n      console.error('Registry creator count error:', error);\n      res.status(500).json({ error: 'Failed to fetch creator coin count' });\n    }\n  });\n\n  // ===== FOLLOW/UNFOLLOW ENDPOINTS =====\n\n  // Follow a user\n  app.post(\"/api/follows\", async (req, res) => {\n    try {\n      const validatedData = insertFollowSchema.parse(req.body);\n\n      // Check if already following\n      const isFollowing = await storage.isFollowing(validatedData.followerAddress, validatedData.followingAddress);\n      if (isFollowing) {\n        return res.status(400).json({ error: 'Already following this user' });\n      }\n\n      const follow = await storage.createFollow(validatedData);\n\n      // Update follower count for the followed user\n      const creator = await storage.getCreatorByAddress(validatedData.followingAddress);\n      if (creator) {\n        const currentFollowers = parseInt(creator.followers || '0');\n        await storage.updateCreator(creator.id, {\n          followers: (currentFollowers + 1).toString()\n        });\n      }\n\n      res.json(follow);\n    } catch (error) {\n      console.error('Create follow error:', error);\n      res.status(400).json({ error: 'Failed to follow user' });\n    }\n  });\n\n  // Unfollow a user\n  app.delete(\"/api/follows/:followerAddress/:followingAddress\", async (req, res) => {\n    try {\n      const { followerAddress, followingAddress } = req.params;\n      const deleted = await storage.deleteFollow(followerAddress, followingAddress);\n\n      if (deleted) {\n        // Update follower count for the unfollowed user\n        const creator = await storage.getCreatorByAddress(followingAddress);\n        if (creator) {\n          const currentFollowers = parseInt(creator.followers || '0');\n          await storage.updateCreator(creator.id, {\n            followers: Math.max(0, currentFollowers - 1).toString()\n          });\n        }\n      }\n\n      res.json({ success: deleted });\n    } catch (error) {\n      console.error('Delete follow error:', error);\n      res.status(500).json({ error: 'Failed to unfollow user' });\n    }\n  });\n\n  // Check if following\n  app.get(\"/api/follows/check/:followerAddress/:followingAddress\", async (req, res) => {\n    try {\n      const { followerAddress, followingAddress } = req.params;\n      const isFollowing = await storage.isFollowing(followerAddress, followingAddress);\n      res.json({ isFollowing });\n    } catch (error) {\n      console.error('Check follow error:', error);\n      res.status(500).json({ error: 'Failed to check follow status' });\n    }\n  });\n\n  // Get followers of a user\n  app.get(\"/api/follows/followers/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const followers = await storage.getFollowers(address);\n      res.json(followers);\n    } catch (error) {\n      console.error('Get followers error:', error);\n      res.status(500).json({ error: 'Failed to get followers' });\n    }\n  });\n\n  // Get users that a user is following\n  app.get(\"/api/follows/following/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const following = await storage.getFollowing(address);\n      res.json(following);\n    } catch (error) {\n      console.error('Get following error:', error);\n      res.status(500).json({ error: 'Failed to get following' });\n    }\n  });\n\n  // ===== REFERRAL ENDPOINTS =====\n\n  // Helper function to get referral code from username\n  async function getReferralCodeFromUsername(name: string | null, address: string): Promise<string> {\n    // Use username if available, otherwise use shortened wallet address (without 0x prefix)\n    const referralCode = name || address.slice(2, 10); // Remove 0x and take first 8 chars\n\n    console.log(`Using referral code: ${referralCode} for address: ${address.slice(0, 8)}...`);\n    return referralCode;\n  }\n\n  // Generate referral link\n  app.post(\"/api/referrals/generate\", async (req, res) => {\n    try {\n      const { address } = req.body;\n\n      if (!address) {\n        return res.status(400).json({ error: 'Address is required' });\n      }\n\n      // Get or create creator\n      let creator = await storage.getCreatorByAddress(address);\n      if (!creator) {\n        creator = await storage.createCreator({\n          address: address,\n          name: null,\n          bio: null,\n          avatar: null,\n          verified: 'false',\n          totalCoins: '0',\n          totalVolume: '0',\n          followers: '0',\n          referralCode: null,\n          points: '0'\n        });\n      }\n\n      // Set referral code based on username or address\n      const referralCode = await getReferralCodeFromUsername(creator.name, address);\n\n      // Update if referral code changed or is null\n      if (!creator.referralCode || creator.referralCode !== referralCode) {\n        const updated = await storage.updateCreator(creator.id, { referralCode });\n        if (updated) {\n          creator = updated;\n        }\n      }\n\n      // Ensure we have a valid referral code\n      const finalReferralCode = creator.referralCode || referralCode;\n\n      // Use the actual host from the request\n      const host = req.get('host') || 'localhost:5000';\n      const protocol = req.get('x-forwarded-proto') || req.protocol || 'http';\n      const referralLink = `${protocol}://${host}/?ref=${finalReferralCode}`;\n\n      console.log(`Generated referral link: ${referralLink}`);\n\n      res.json({\n        referralCode: finalReferralCode,\n        referralLink\n      });\n    } catch (error) {\n      console.error('Generate referral error:', error);\n      res.status(500).json({ error: 'Failed to generate referral link' });\n    }\n  });\n\n  // Apply referral (when a new user signs up with a referral code)\n  app.post(\"/api/referrals/apply\", async (req, res) => {\n    try {\n      const validatedData = insertReferralSchema.parse(req.body);\n\n      // Check if referral already exists\n      const existing = await storage.getReferralByAddresses(\n        validatedData.referrerAddress, \n        validatedData.referredAddress\n      );\n\n      if (existing) {\n        return res.status(400).json({ error: 'Referral already exists' });\n      }\n\n      // Check if user is trying to refer themselves\n      if (validatedData.referrerAddress.toLowerCase() === validatedData.referredAddress.toLowerCase()) {\n        return res.status(400).json({ error: 'Cannot refer yourself' });\n      }\n\n      // Create referral\n      const referral = await storage.createReferral(validatedData);\n\n      // Update referrer's points\n      const referrer = await storage.getCreatorByAddress(validatedData.referrerAddress);\n      const pointsToAdd = parseInt(validatedData.pointsEarned || '100');\n\n      if (referrer) {\n        const currentPoints = parseInt(referrer.points || '0');\n        await storage.updateCreator(referrer.id, {\n          points: (currentPoints + pointsToAdd).toString()\n        });\n      }\n\n      // Get referred user info\n      const referredUser = await storage.getCreatorByAddress(validatedData.referredAddress);\n      const referredName = referredUser?.name || `${validatedData.referredAddress.slice(0, 6)}...${validatedData.referredAddress.slice(-4)}`;\n      const referrerName = referrer?.name || `${validatedData.referrerAddress.slice(0, 6)}...${validatedData.referrerAddress.slice(-4)}`;\n\n      // Send notification to REFERRER (they earned points)\n      await storage.createNotification({\n        userId: validatedData.referrerAddress,\n        type: 'reward',\n        title: 'Referral Successful! 🎉',\n        message: `${referredName} joined using your referral link! You earned ${pointsToAdd} points.`,\n        read: false,\n      });\n\n      // Send Telegram notification to referrer\n      await sendTelegramNotification(\n        validatedData.referrerAddress,\n        'Referral Successful! 🎉',\n        `${referredName} joined using your referral link! You earned ${pointsToAdd} points.`,\n        'reward'\n      );\n\n      // Send notification to REFERRED USER (welcoming them)\n      await storage.createNotification({\n        userId: validatedData.referredAddress,\n        type: 'reward',\n        title: 'Welcome to CoinIT! 🚀',\n        message: `You joined via ${referrerName}'s referral link. Start creating and trading coins now!`,\n        read: false,\n      });\n\n      // Send Telegram notification to referred user\n      await sendTelegramNotification(\n        validatedData.referredAddress,\n        'Welcome to CoinIT! 🚀',\n        `You joined via ${referrerName}'s referral link. Start creating and trading coins now!`,\n        'reward'\n      );\n\n      res.json(referral);\n    } catch (error) {\n      console.error('Apply referral error:', error);\n      res.status(400).json({ error: 'Failed to apply referral' });\n    }\n  });\n\n  // Get referrals by referrer\n  app.get(\"/api/referrals/referrer/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const referrals = await storage.getReferralsByReferrer(address);\n      res.json(referrals);\n    } catch (error) {\n      console.error('Get referrals error:', error);\n      res.status(500).json({ error: 'Failed to get referrals' });\n    }\n  });\n\n  // Get referrals by code\n  app.get(\"/api/referrals/code/:code\", async (req, res) => {\n    try {\n      const { code } = req.params;\n      const referrals = await storage.getReferralsByCode(code);\n      res.json(referrals);\n    } catch (error) {\n      console.error('Get referrals by code error:', error);\n      res.status(500).json({ error: 'Failed to get referrals' });\n    }\n  });\n\n  // Get referral stats for a user\n  app.get(\"/api/referrals/stats/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const referrals = await storage.getReferralsByReferrer(address);\n      const creator = await storage.getCreatorByAddress(address);\n\n      const totalPoints = parseInt(creator?.points || '0');\n      const totalReferrals = referrals.length;\n\n      res.json({\n        totalPoints,\n        totalReferrals,\n        referrals\n      });\n    } catch (error) {\n      console.error('Get referral stats error:', error);\n      res.status(500).json({ error: 'Failed to get referral stats' });\n    }\n  });\n\n  // Get login streak for a user\n  app.get(\"/api/login-streak/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const loginStreak = await storage.getLoginStreak(address);\n      res.json(loginStreak || null);\n    } catch (error) {\n      console.error('Get login streak error:', error);\n      res.status(500).json({ error: 'Failed to get login streak' });\n    }\n  });\n\n  // Check for unclaimed daily points and send reminder\n  app.post(\"/api/login-streak/check-unclaimed\", async (req, res) => {\n    try {\n      const { address } = req.body;\n      \n      if (!address) {\n        return res.status(400).json({ error: 'Address is required' });\n      }\n\n      const today = new Date().toISOString().split('T')[0];\n      const loginStreak = await storage.getLoginStreak(address);\n\n      // If no streak exists, user hasn't claimed their first points\n      if (!loginStreak) {\n        await storage.createNotification({\n          userId: address,\n          type: 'reward',\n          title: '🎁 Claim Your Welcome Bonus!',\n          message: 'You have 10 points waiting for you! Visit the app to claim your first daily login bonus and start your streak.',\n          amount: '10',\n          read: false,\n        });\n\n        await sendTelegramNotification(\n          address,\n          '🎁 Claim Your Welcome Bonus!',\n          'You have 10 points waiting! Visit the app to claim your first daily login bonus 🔥',\n          'reward'\n        );\n\n        return res.json({ hasUnclaimed: true, pointsAvailable: 10, isFirstTime: true });\n      }\n\n      // If last login was not today, user has unclaimed points\n      if (loginStreak.lastLoginDate !== today) {\n        const lastLogin = new Date(loginStreak.lastLoginDate || today);\n        const todayDate = new Date(today);\n        const daysDiff = Math.floor((todayDate.getTime() - lastLogin.getTime()) / (1000 * 60 * 60 * 24));\n        \n        let currentStreak = parseInt(loginStreak.currentStreak || '0');\n        let pointsAvailable = 10;\n        let streakStatus = '';\n\n        if (daysDiff === 1) {\n          // Can continue streak\n          const nextStreak = currentStreak + 1;\n          pointsAvailable = 10 + Math.min(Math.floor(nextStreak / 7) * 5, 50);\n          streakStatus = `Continue your ${currentStreak} day streak`;\n        } else {\n          // Streak will reset\n          pointsAvailable = 10;\n          streakStatus = `Your ${currentStreak} day streak will reset`;\n        }\n\n        await storage.createNotification({\n          userId: address,\n          type: 'reward',\n          title: '🔥 Daily Points Available!',\n          message: `${streakStatus}! Claim ${pointsAvailable} points now by visiting the app. Don't miss out!`,\n          amount: pointsAvailable.toString(),\n          read: false,\n        });\n\n        await sendTelegramNotification(\n          address,\n          '🔥 Daily Points Available!',\n          `${streakStatus}! Claim ${pointsAvailable} points now 🎁`,\n          'reward'\n        );\n\n        return res.json({ \n          hasUnclaimed: true, \n          pointsAvailable, \n          currentStreak,\n          willReset: daysDiff > 1 \n        });\n      }\n\n      res.json({ hasUnclaimed: false });\n    } catch (error) {\n      console.error('Check unclaimed error:', error);\n      res.status(500).json({ error: 'Failed to check unclaimed points' });\n    }\n  });\n\n  // Check and record daily login\n  app.post(\"/api/login-streak/check-in\", async (req, res) => {\n    try {\n      const { address } = req.body;\n      \n      if (!address) {\n        return res.status(400).json({ error: 'Address is required' });\n      }\n\n      const today = new Date().toISOString().split('T')[0];\n      let loginStreak = await storage.getLoginStreak(address);\n      \n      if (!loginStreak) {\n        loginStreak = await storage.createLoginStreak({\n          userAddress: address,\n          currentStreak: '1',\n          longestStreak: '1',\n          lastLoginDate: today,\n          totalPoints: '10',\n          loginDates: [today]\n        });\n\n        let creator = await storage.getCreatorByAddress(address);\n        if (!creator) {\n          creator = await storage.createCreator({\n            address,\n            points: '10'\n          });\n        } else {\n          const newPoints = (parseInt(creator.points || '0') + 10).toString();\n          await storage.updateCreator(creator.id, { points: newPoints });\n        }\n\n        // Create notification for first login - CLAIMED\n        await storage.createNotification({\n          userId: address,\n          type: 'reward',\n          title: '🎉 Welcome Bonus Claimed!',\n          message: 'Congratulations! You claimed 10 points for your first daily login. Come back tomorrow to continue your streak!',\n          amount: '10',\n          read: false,\n        });\n\n        // Send Telegram notification\n        await sendTelegramNotification(\n          address,\n          '🎉 Welcome Bonus Claimed!',\n          'You earned 10 points for your first login! Come back daily to build your streak 🔥',\n          'reward'\n        );\n\n        return res.json({\n          streak: loginStreak,\n          pointsEarned: 10,\n          isFirstLogin: true\n        });\n      }\n\n      if (loginStreak.lastLoginDate === today) {\n        return res.json({\n          streak: loginStreak,\n          pointsEarned: 0,\n          alreadyCheckedIn: true\n        });\n      }\n\n      const lastLogin = new Date(loginStreak.lastLoginDate || today);\n      const todayDate = new Date(today);\n      const daysDiff = Math.floor((todayDate.getTime() - lastLogin.getTime()) / (1000 * 60 * 60 * 24));\n      \n      let newStreak = parseInt(loginStreak.currentStreak || '0');\n      let pointsEarned = 10;\n      let isNewStreak = false;\n      \n      if (daysDiff === 1) {\n        newStreak += 1;\n        pointsEarned = 10 + Math.min(Math.floor(newStreak / 7) * 5, 50);\n      } else {\n        newStreak = 1;\n        pointsEarned = 10;\n        isNewStreak = true;\n      }\n\n      const newLongestStreak = Math.max(newStreak, parseInt(loginStreak.longestStreak || '0')).toString();\n      const loginDates = [...(loginStreak.loginDates || []), today];\n      const newTotalPoints = (parseInt(loginStreak.totalPoints || '0') + pointsEarned).toString();\n\n      const updatedStreak = await storage.updateLoginStreak(address, {\n        currentStreak: newStreak.toString(),\n        longestStreak: newLongestStreak,\n        lastLoginDate: today,\n        totalPoints: newTotalPoints,\n        loginDates\n      });\n\n      let creator = await storage.getCreatorByAddress(address);\n      if (!creator) {\n        creator = await storage.createCreator({\n          address,\n          points: pointsEarned.toString()\n        });\n      } else {\n        const newPoints = (parseInt(creator.points || '0') + pointsEarned).toString();\n        await storage.updateCreator(creator.id, { points: newPoints });\n      }\n\n      // Create notification for daily check-in - CLAIMED\n      let notificationMessage = '';\n      let notificationTitle = '';\n\n      if (isNewStreak) {\n        notificationTitle = '🔥 Daily Points Claimed!';\n        notificationMessage = `Your streak was reset, but you claimed ${pointsEarned} points! Login daily to build up bonus points and longer streaks.`;\n      } else if (newStreak >= 7) {\n        const bonusPoints = pointsEarned - 10;\n        notificationTitle = `🔥 ${newStreak} Day Streak - ${pointsEarned} Points Claimed!`;\n        notificationMessage = `Amazing! You've claimed ${pointsEarned} points (10 base + ${bonusPoints} streak bonus) for ${newStreak} consecutive days! Keep it going!`;\n      } else {\n        notificationTitle = `🔥 Day ${newStreak} Streak - ${pointsEarned} Points Claimed!`;\n        notificationMessage = `Great! You claimed ${pointsEarned} points for day ${newStreak} of your streak. ${7 - newStreak} more days to unlock bonus points!`;\n      }\n\n      // Check if this is a new personal record\n      if (newStreak.toString() === newLongestStreak && newStreak > parseInt(loginStreak.longestStreak || '0')) {\n        notificationTitle = `🏆 New Record! ${newStreak} Day Streak - ${pointsEarned} Points!`;\n        notificationMessage = `Congratulations! You've set a new personal record and claimed ${pointsEarned} points for your ${newStreak} day login streak! You're unstoppable! 🚀`;\n      }\n\n      await storage.createNotification({\n        userId: address,\n        type: 'reward',\n        title: notificationTitle,\n        message: notificationMessage,\n        amount: pointsEarned.toString(),\n        read: false,\n      });\n\n      // Send Telegram notification\n      await sendTelegramNotification(\n        address,\n        notificationTitle,\n        notificationMessage,\n        'reward'\n      );\n\n      res.json({\n        streak: updatedStreak,\n        pointsEarned,\n        isNewStreak: daysDiff !== 1\n      });\n    } catch (error) {\n      console.error('Check-in error:', error);\n      res.status(500).json({ error: 'Failed to check in' });\n    }\n  });\n\n  // Get activity events from blockchain\n  app.get(\"/api/blockchain/activity-events\", async (req, res) => {\n    try {\n      const { activityTrackerService } = await import('./activity-tracker.js');\n      const fromBlock = req.query.fromBlock ? BigInt(req.query.fromBlock as string) : 0n;\n      const events = await activityTrackerService.getActivityEvents(fromBlock);\n\n      res.json({\n        success: true,\n        events: events.map(log => ({\n          blockNumber: log.blockNumber?.toString(),\n          transactionHash: log.transactionHash,\n          args: log.args\n        }))\n      });\n    } catch (error) {\n      console.error('Get activity events error:', error);\n      res.status(500).json({ error: 'Failed to get activity events' });\n    }\n  });\n\n  // Blockchain metrics endpoints\n  app.get(\"/api/blockchain/platform-stats\", async (_req, res) => {\n    try {\n      const { activityTrackerService } = await import('./activity-tracker.js');\n      const stats = await activityTrackerService.getPlatformStats();\n\n      if (!stats) {\n        return res.json({\n          totalCoins: 0,\n          totalPlatformFees: \"0\",\n          totalCreatorFees: \"0\",\n          totalVolume: \"0\",\n          totalCreators: 0\n        });\n      }\n\n      res.json({\n        totalCoins: stats.totalCoins.toString(),\n        totalPlatformFees: stats.totalPlatformFees.toString(),\n        totalCreatorFees: stats.totalCreatorFees.toString(),\n        totalVolume: stats.totalVolume.toString(),\n        totalCreators: stats.totalCreators.toString()\n      });\n    } catch (error) {\n      console.error('Get platform stats error:', error);\n      res.status(500).json({ error: 'Failed to get platform stats' });\n    }\n  });\n\n  app.get(\"/api/blockchain/coin-metrics/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const { activityTrackerService } = await import('./activity-tracker.js');\n      const metrics = await activityTrackerService.getCoinMetrics(address as `0x${string}`);\n\n      if (!metrics) {\n        return res.json({\n          totalCreatorFees: \"0\",\n          totalPlatformFees: \"0\",\n          currentMarketCap: \"0\",\n          totalVolume: \"0\",\n          tradeCount: \"0\",\n          lastUpdated: \"0\"\n        });\n      }\n\n      res.json({\n        totalCreatorFees: metrics.totalCreatorFees.toString(),\n        totalPlatformFees: metrics.totalPlatformFees.toString(),\n        currentMarketCap: metrics.currentMarketCap.toString(),\n        totalVolume: metrics.totalVolume.toString(),\n        tradeCount: metrics.tradeCount.toString(),\n        lastUpdated: metrics.lastUpdated.toString()\n      });\n    } catch (error) {\n      console.error('Get coin metrics error:', error);\n      res.status(500).json({ error: 'Failed to get coin metrics' });\n    }\n  });\n\n  app.get(\"/api/blockchain/creator-stats/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const { activityTrackerService } = await import('./activity-tracker.js');\n      const stats = await activityTrackerService.getCreatorStats(address as `0x${string}`);\n\n      if (!stats) {\n        return res.json({\n          coinsCreated: \"0\",\n          totalFeesEarned: \"0\"\n        });\n      }\n\n      res.json({\n        coinsCreated: stats.coinsCreated.toString(),\n        totalFeesEarned: stats.totalFeesEarned.toString()\n      });\n    } catch (error) {\n      console.error('Get creator stats error:', error);\n      res.status(500).json({ error: 'Failed to get creator stats' });\n    }\n  });\n\n  // === NOTIFICATION SERVICE ENDPOINTS ===\n  \n  // Send all periodic notifications (top creators, earners, coins, points, trades)\n  app.post(\"/api/notifications/send-all\", async (_req, res) => {\n    try {\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendAllPeriodicNotifications();\n      res.json({ success: true, message: 'All periodic notifications sent' });\n    } catch (error) {\n      console.error('Send all notifications error:', error);\n      res.status(500).json({ error: 'Failed to send notifications' });\n    }\n  });\n\n  // Send top creators notification\n  app.post(\"/api/notifications/top-creators\", async (_req, res) => {\n    try {\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendTopCreatorsNotification();\n      res.json({ success: true, message: 'Top creators notification sent' });\n    } catch (error) {\n      console.error('Send top creators notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Send top earners notification (with optional time period)\n  app.post(\"/api/notifications/top-earners\", async (req, res) => {\n    try {\n      const hours = parseInt(req.body.hours) || undefined; // 10, 24, 72, etc.\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendTopEarnersNotification(hours);\n      res.json({ success: true, message: `Top earners notification sent${hours ? ` for ${hours}h` : ''}` });\n    } catch (error) {\n      console.error('Send top earners notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Send top coins notification\n  app.post(\"/api/notifications/top-coins\", async (_req, res) => {\n    try {\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendTopCoinsNotification();\n      res.json({ success: true, message: 'Top coins notification sent' });\n    } catch (error) {\n      console.error('Send top coins notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Send top points earners notification\n  app.post(\"/api/notifications/top-points\", async (_req, res) => {\n    try {\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendTopPointsNotification();\n      res.json({ success: true, message: 'Top points notification sent' });\n    } catch (error) {\n      console.error('Send top points notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Send recent trades notification\n  app.post(\"/api/notifications/recent-trades\", async (_req, res) => {\n    try {\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendRecentTradesNotification();\n      res.json({ success: true, message: 'Recent trades notification sent' });\n    } catch (error) {\n      console.error('Send recent trades notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Send weekly top earners notification\n  app.post(\"/api/notifications/weekly-top-earners\", async (_req, res) => {\n    try {\n      const { notificationService } = await import('./notification-service');\n      await notificationService.sendWeeklyTopEarnersNotification();\n      res.json({ success: true, message: 'Weekly top earners notification sent' });\n    } catch (error) {\n      console.error('Send weekly top earners notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Notify about top traders for specific time period\n  app.post(\"/api/notifications/top-traders\", async (req, res) => {\n    try {\n      const hours = parseInt(req.body.hours) || 24; // Default 24 hours\n      const { notificationService } = await import('./notification-service');\n      await notificationService.notifyTopTraders(hours);\n      res.json({ success: true, message: `Top traders notification sent for ${hours}h period` });\n    } catch (error) {\n      console.error('Send top traders notification error:', error);\n      res.status(500).json({ error: 'Failed to send notification' });\n    }\n  });\n\n  // Get analytics data\n  app.get(\"/api/analytics/top-earners\", async (req, res) => {\n    try {\n      const hours = parseInt(req.query.hours as string) || undefined;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const { notificationService } = await import('./notification-service');\n      const topEarners = await notificationService.getTopEarners(limit, hours);\n      res.json(topEarners);\n    } catch (error) {\n      console.error('Get top earners error:', error);\n      res.status(500).json({ error: 'Failed to fetch top earners' });\n    }\n  });\n\n  app.get(\"/api/analytics/top-creators\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const { notificationService } = await import('./notification-service');\n      const topCreators = await notificationService.getTopCreatorsByVolume(limit);\n      res.json(topCreators);\n    } catch (error) {\n      console.error('Get top creators error:', error);\n      res.status(500).json({ error: 'Failed to fetch top creators' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":64679},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const scrapedContent = pgTable(\"scraped_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  url: text(\"url\").notNull(),\n  platform: text(\"platform\").notNull().default('blog'),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  author: text(\"author\"),\n  publishDate: text(\"publish_date\"),\n  image: text(\"image\"),\n  content: text(\"content\"),\n  tags: json(\"tags\").$type<string[]>(),\n  metadata: json(\"metadata\"),\n  scrapedAt: timestamp(\"scraped_at\").defaultNow().notNull(),\n});\n\nexport const coins = pgTable(\"coins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  symbol: text(\"symbol\").notNull(),\n  address: text(\"address\"),\n  creator_wallet: text(\"creator_wallet\").notNull(),\n  status: text(\"status\").notNull().default('pending'),\n  scrapedContentId: varchar(\"scraped_content_id\").references(() => scrapedContent.id),\n  ipfsUri: text(\"ipfs_uri\"),\n  chainId: text(\"chain_id\"),\n  registryTxHash: text(\"registry_tx_hash\"),\n  metadataHash: text(\"metadata_hash\"),\n  registeredAt: timestamp(\"registered_at\"),\n  activityTrackerTxHash: text(\"activity_tracker_tx_hash\"), // Activity tracker transaction hash\n  activityTrackerRecordedAt: timestamp(\"activity_tracker_recorded_at\"), // When recorded on activity tracker\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  image: text(\"image\"), // Image URL for display\n  description: text(\"description\"), // Coin description\n});\n\nexport const insertScrapedContentSchema = createInsertSchema(scrapedContent).omit({\n  id: true,\n  scrapedAt: true,\n});\n\nexport const coinStatusSchema = z.enum(['pending', 'active', 'failed']);\nexport type CoinStatus = z.infer<typeof coinStatusSchema>;\n\nexport const insertCoinSchema = createInsertSchema(coins).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  status: coinStatusSchema.optional(),\n  address: z.string().optional(),\n});\n\nexport const updateCoinSchema = z.object({\n  address: z.string().optional(),\n  status: coinStatusSchema.optional(),\n  chainId: z.string().optional(),\n  registryTxHash: z.string().optional(),\n  metadataHash: z.string().optional(),\n  registeredAt: z.date().optional(),\n  activityTrackerTxHash: z.string().optional(),\n  activityTrackerRecordedAt: z.date().optional(),\n  createdAt: z.date().optional(),\n});\n\nexport type InsertScrapedContent = z.infer<typeof insertScrapedContentSchema>;\nexport type ScrapedContent = typeof scrapedContent.$inferSelect;\n\nexport type InsertCoin = z.infer<typeof insertCoinSchema>;\nexport type UpdateCoin = z.infer<typeof updateCoinSchema>;\nexport type Coin = typeof coins.$inferSelect;\nexport const rewards = pgTable(\"rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'platform' or 'trade'\n  coinAddress: text(\"coin_address\").notNull(),\n  coinSymbol: text(\"coin_symbol\").notNull(),\n  transactionHash: text(\"transaction_hash\").notNull(),\n  rewardAmount: text(\"reward_amount\").notNull(), // In wei as string\n  rewardCurrency: text(\"reward_currency\").notNull().default('ZORA'),\n  recipientAddress: text(\"recipient_address\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertRewardSchema = createInsertSchema(rewards).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\nexport type Reward = typeof rewards.$inferSelect;\n\n// Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(), // Wallet address\n  type: text(\"type\").notNull(), // 'coin_created', 'trade', 'buy', 'sell', 'reward'\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  coinAddress: text(\"coin_address\"),\n  coinSymbol: text(\"coin_symbol\"),\n  amount: text(\"amount\"),\n  transactionHash: text(\"transaction_hash\"),\n  read: boolean(\"read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n  read: true,\n}).extend({\n  type: z.enum(['coin_created', 'trade', 'buy', 'sell', 'reward', 'trending', 'performance']),\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\nexport const creators = pgTable(\"creators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  address: text(\"address\").notNull().unique(),\n  name: text(\"name\"),\n  bio: text(\"bio\"),\n  avatar: text(\"avatar\"),\n  verified: text(\"verified\").notNull().default('false'),\n  totalCoins: text(\"total_coins\").notNull().default('0'),\n  totalVolume: text(\"total_volume\").notNull().default('0'),\n  followers: text(\"followers\").notNull().default('0'),\n  points: text(\"points\").notNull().default('0'),\n  referralCode: text(\"referral_code\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertCreatorSchema = createInsertSchema(creators).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateCreatorSchema = z.object({\n  name: z.string().optional(),\n  bio: z.string().optional(),\n  avatar: z.string().optional(),\n  verified: z.string().optional(),\n  totalCoins: z.string().optional(),\n  totalVolume: z.string().optional(),\n  followers: z.string().optional(),\n  points: z.string().optional(),\n  referralCode: z.string().optional(),\n});\n\nexport type InsertCreator = z.infer<typeof insertCreatorSchema>;\nexport type UpdateCreator = z.infer<typeof updateCreatorSchema>;\nexport type Creator = typeof creators.$inferSelect;\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coinAddress: text(\"coin_address\").notNull(),\n  userAddress: text(\"user_address\").notNull(),\n  comment: text(\"comment\").notNull(),\n  transactionHash: text(\"transaction_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Comment = typeof comments.$inferSelect;\n\nexport const follows = pgTable(\"follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerAddress: text(\"follower_address\").notNull(),\n  followingAddress: text(\"following_address\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertFollowSchema = createInsertSchema(follows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertFollow = z.infer<typeof insertFollowSchema>;\nexport type Follow = typeof follows.$inferSelect;\n\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerAddress: text(\"referrer_address\").notNull(),\n  referredAddress: text(\"referred_address\").notNull(),\n  referralCode: text(\"referral_code\").notNull(),\n  pointsEarned: text(\"points_earned\").notNull().default('100'),\n  claimed: boolean(\"claimed\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertReferralSchema = createInsertSchema(referrals).omit({\n  id: true,\n  createdAt: true,\n  claimed: true,\n});\n\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type Referral = typeof referrals.$inferSelect;\n\nexport const loginStreaks = pgTable(\"login_streaks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userAddress: text(\"user_address\").notNull().unique(),\n  currentStreak: text(\"current_streak\").notNull().default('0'),\n  longestStreak: text(\"longest_streak\").notNull().default('0'),\n  lastLoginDate: text(\"last_login_date\"),\n  totalPoints: text(\"total_points\").notNull().default('0'),\n  loginDates: json(\"login_dates\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertLoginStreakSchema = createInsertSchema(loginStreaks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateLoginStreakSchema = z.object({\n  currentStreak: z.string().optional(),\n  longestStreak: z.string().optional(),\n  lastLoginDate: z.string().optional(),\n  totalPoints: z.string().optional(),\n  loginDates: z.array(z.string()).optional(),\n});\n\nexport type InsertLoginStreak = z.infer<typeof insertLoginStreakSchema>;\nexport type UpdateLoginStreak = z.infer<typeof updateLoginStreakSchema>;\nexport type LoginStreak = typeof loginStreaks.$inferSelect;","size_bytes":8962},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/trade-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport type { Coin, Comment } from \"@shared/schema\";\nimport { useAccount, usePublicClient, useWalletClient } from \"wagmi\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, CheckCircle2, ExternalLink, Coins, MessageCircle, Users, Activity as ActivityIcon, Info, Copy, Check, TrendingUp } from \"lucide-react\";\nimport { getCoin, getCoinHolders } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { formatEther } from \"viem\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\nimport GeckoTerminalChart from \"@/components/geckoterminal-chart\";\nimport { formatSmartCurrency } from \"@/lib/utils\";\n\n// Assuming ProfileCardModal component is defined elsewhere and imported\n// For demonstration, a placeholder is included here. In a real scenario, import it.\nconst ProfileCardModal = ({ creatorAddress, open, onOpenChange }: { creatorAddress?: string; open: boolean; onOpenChange: (open: boolean) => void }) => {\n  // Placeholder for Profile Card Modal content and logic\n  if (!creatorAddress) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Creator Profile</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex flex-col items-center p-4\">\n          <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-lg font-bold text-foreground mb-3\">\n            {creatorAddress.slice(0, 4).toUpperCase()}\n          </div>\n          <p className=\"text-lg font-semibold text-foreground mb-1\">{creatorAddress.slice(0, 10)}...</p>\n          <p className=\"text-sm text-muted-foreground mb-3\">@{creatorAddress.slice(0, 8)}</p>\n          <p className=\"text-xs text-muted-foreground text-center mb-4\">Some placeholder stats like Marketcap, Holders would go here.</p>\n          <Button className=\"w-full rounded-full\">Follow</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\ninterface TradeModalProps {\n  coin: Coin;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function TradeModal({ coin, open, onOpenChange }: TradeModalProps) {\n  const { toast } = useToast();\n  const [ethAmount, setEthAmount] = useState(\"0.000111\");\n  const [isTrading, setIsTrading] = useState(false);\n  const [txHash, setTxHash] = useState<string | null>(null);\n  const [isBuying, setIsBuying] = useState(true);\n  const [comment, setComment] = useState(\"\");\n  const [standaloneComment, setStandaloneComment] = useState(\"\");\n  const [balance, setBalance] = useState<string>(\"0\");\n  const [marketCap, setMarketCap] = useState<string | null>(null);\n  const [volume24h, setVolume24h] = useState<string | null>(null);\n  const [creatorEarnings, setCreatorEarnings] = useState<string | null>(null);\n  const [coinImage, setCoinImage] = useState<string | null>(null);\n  const [creatorAvatar, setCreatorAvatar] = useState<string | null>(null);\n  \n  // Fetch creator data to get avatar\n  const { data: creatorProfile } = useQuery({\n    queryKey: ['/api/creators/address', coin.creator_wallet],\n    enabled: !!coin.creator_wallet && open,\n  });\n  const [holders, setHolders] = useState<Array<{\n    address: string;\n    balance: string;\n    percentage: number;\n    profile?: string | null;\n  }>>([]);\n  const [totalSupply, setTotalSupply] = useState<string | null>(null);\n  const [uniqueHoldersCount, setUniqueHoldersCount] = useState<number>(0);\n  const [chartData, setChartData] = useState<Array<{ time: string; price: number }>>([\n    { time: '12:00 AM', price: 0.001 },\n    { time: '6:00 AM', price: 0.0015 },\n    { time: '12:00 PM', price: 0.002 },\n    { time: '6:00 PM', price: 0.0025 },\n  ]);\n  const [timeframe, setTimeframe] = useState<'1H' | '1D' | 'W' | 'M' | 'All'>('1D');\n  const [priceChange, setPriceChange] = useState<number>(0);\n  const [currentSlide, setCurrentSlide] = useState(0); // Added state for current slide tracking\n  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false); // State to control profile modal visibility\n  const [swapActivities, setSwapActivities] = useState<Array<{\n    activityType: string;\n    coinAmount: string;\n    senderAddress: string;\n    blockTimestamp: string;\n    transactionHash: string;\n  }>>([]);\n\n  const { address, isConnected } = useAccount();\n  const { data: walletClient } = useWalletClient();\n  const publicClient = usePublicClient();\n\n  const GATEWAY_URLS = [\n    \"ipfs.io\",\n    \"cloudflare-ipfs.com\",\n    \"gateway.pinata.cloud\",\n  ];\n\n  const [copiedAddress, setCopiedAddress] = useState(false);\n\n  // Fetch comments for this coin\n  const { data: comments = [], isLoading: commentsLoading } = useQuery<Comment[]>({\n    queryKey: ['/api/comments/coin', coin.address],\n    enabled: open && !!coin.address,\n  });\n\n  // Mutation for creating a comment\n  const createCommentMutation = useMutation({\n    mutationFn: async (commentData: { coinAddress: string; userAddress: string; comment: string; transactionHash?: string }) => {\n      return await apiRequest('POST', '/api/comments', commentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/comments/coin', coin.address] });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedAddress(true);\n    setTimeout(() => setCopiedAddress(false), 2000);\n  };\n\n  const handleStandaloneComment = async () => {\n    if (!isConnected || !address || !coin.address || !standaloneComment.trim()) return;\n\n    try {\n      await createCommentMutation.mutateAsync({\n        coinAddress: coin.address,\n        userAddress: address,\n        comment: standaloneComment.trim(),\n      });\n\n      setStandaloneComment(\"\");\n\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted\",\n      });\n    } catch (error) {\n      console.error('Failed to post comment:', error);\n      toast({\n        title: \"Failed to post comment\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Fetch user balance\n  useEffect(() => {\n    async function fetchBalance() {\n      if (!address || !publicClient) return;\n\n      try {\n        const bal = await publicClient.getBalance({ address });\n        setBalance(formatEther(bal));\n      } catch (error) {\n        console.error(\"Error fetching balance:\", error);\n      }\n    }\n\n    if (isConnected && open) {\n      fetchBalance();\n    }\n  }, [address, isConnected, publicClient, open]);\n\n  // Fetch chart data\n  useEffect(() => {\n    async function fetchChartData() {\n      if (!coin.address) return;\n\n      try {\n        // Get the time range for the chart\n        const now = Date.now();\n        let startTime: number;\n\n        switch (timeframe) {\n          case '1H':\n            startTime = now - (60 * 60 * 1000);\n            break;\n          case '1D':\n            startTime = now - (24 * 60 * 60 * 1000);\n            break;\n          case 'W':\n            startTime = now - (7 * 24 * 60 * 60 * 1000);\n            break;\n          case 'M':\n            startTime = now - (30 * 24 * 60 * 60 * 1000);\n            break;\n          case 'All':\n            startTime = 0;\n            break;\n        }\n\n        // Fetch historical price data from Zora\n        const response = await fetch(`https://api.zora.co/graphql`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${import.meta.env.VITE_NEXT_PUBLIC_ZORA_API_KEY || ''}`,\n          },\n          body: JSON.stringify({\n            query: `\n              query GetCoinPriceHistory($address: String!, $chainId: Int!) {\n                zora20Token(address: $address, chainId: $chainId) {\n                  priceHistory {\n                    timestamp\n                    priceUsd\n                  }\n                }\n              }\n            `,\n            variables: {\n              address: coin.address.toLowerCase(),\n              chainId: base.id,\n            },\n          }),\n        });\n\n        const data = await response.json();\n        const priceHistory = data?.data?.zora20Token?.priceHistory || [];\n\n        if (priceHistory.length > 0) {\n          // Filter by timeframe and format data\n          const filtered = priceHistory\n            .filter((point: any) => point.timestamp >= startTime)\n            .map((point: any) => ({\n              time: new Date(point.timestamp).toLocaleTimeString('en-US', {\n                hour: '2-digit',\n                minute: '2-digit',\n              }),\n              price: parseFloat(point.priceUsd || '0'),\n            }));\n\n          setChartData(filtered);\n\n          // Calculate price change percentage\n          if (filtered.length >= 2) {\n            const firstPrice = filtered[0].price;\n            const lastPrice = filtered[filtered.length - 1].price;\n            const change = ((lastPrice - firstPrice) / firstPrice) * 100;\n            setPriceChange(change);\n          }\n        } else {\n          // Fallback: generate sample data points from market cap if no history\n          const basePrice = parseFloat(marketCap || '1000') / 1000000;\n          setChartData([\n            { time: '12:00 AM', price: basePrice * 0.8 },\n            { time: '6:00 AM', price: basePrice * 0.9 },\n            { time: '12:00 PM', price: basePrice * 0.95 },\n            { time: '6:00 PM', price: basePrice },\n          ]);\n        }\n      } catch (error) {\n        console.error('Error fetching chart data:', error);\n        // Use fallback data based on market cap\n        const basePrice = parseFloat(marketCap || '1000') / 1000000;\n        setChartData([\n          { time: '12:00 AM', price: basePrice * 0.8 },\n          { time: '6:00 AM', price: basePrice * 0.9 },\n          { time: '12:00 PM', price: basePrice * 0.95 },\n          { time: '6:00 PM', price: basePrice },\n        ]);\n      }\n    }\n\n    if (open && marketCap) {\n      fetchChartData();\n    }\n  }, [coin.address, open, timeframe, marketCap]);\n\n  // Fetch coin stats and creator avatar\n  useEffect(() => {\n    let isMounted = true; // Flag to track if component is mounted\n\n    async function fetchCoinStats() {\n      if (!coin.address) return;\n\n      try {\n        const response = await getCoin({\n          address: coin.address as `0x${string}`,\n          chain: base.id,\n        });\n\n        const coinData = response.data?.zora20Token;\n\n        if (coinData && isMounted) {\n          console.log('🔍 Zora API response for', coin.name, ':', {\n            volume24h: coinData.volume24h,\n            creatorEarnings: coinData.creatorEarnings,\n            marketCap: coinData.marketCap,\n          });\n\n          // Set market cap - handle both string and number\n          if (coinData.marketCap !== null && coinData.marketCap !== undefined) {\n            const mcValue = typeof coinData.marketCap === 'string'\n              ? parseFloat(coinData.marketCap)\n              : coinData.marketCap;\n            setMarketCap(mcValue.toFixed(2));\n          }\n\n          // Set 24h volume - handle both string and number, ensure accurate display\n          if (coinData.volume24h !== null && coinData.volume24h !== undefined) {\n            const volValue = typeof coinData.volume24h === 'string'\n              ? parseFloat(coinData.volume24h)\n              : coinData.volume24h;\n            if (!isNaN(volValue) && volValue >= 0) {\n              setVolume24h(volValue.toString());\n              // Calculate creator earnings from volume (0.5% of total volume)\n              const estimatedEarnings = volValue * 0.005;\n              setCreatorEarnings(estimatedEarnings.toString());\n            } else {\n              setVolume24h(\"0\");\n              setCreatorEarnings(\"0\");\n            }\n          } else {\n            setVolume24h(\"0\");\n            setCreatorEarnings(\"0\");\n          }\n\n          // Set coin image\n          if (coinData.mediaContent?.previewImage) {\n            const previewImage = coinData.mediaContent.previewImage as any;\n            setCoinImage(previewImage.medium || previewImage.small || null);\n          } else if (coin.metadata?.image) {\n            setCoinImage(coin.metadata.image);\n          }\n        }\n\n        // Fetch holder details\n        const holdersResponse = await getCoinHolders({\n          chainId: base.id,\n          address: coin.address as `0x${string}`,\n          count: 50, // Get top 50 holders\n        });\n\n        const holderBalances = holdersResponse.data?.zora20Token?.tokenBalances?.edges || [];\n        const supply = parseFloat(coinData?.totalSupply || \"0\");\n\n        if (holderBalances.length > 0 && supply > 0) {\n          const processedHolders = holderBalances.map((edge: any) => {\n            const balance = parseFloat(edge.node.balance || \"0\");\n            const percentage = (balance / supply) * 100;\n\n            return {\n              address: edge.node.ownerAddress,\n              balance: edge.node.balance,\n              percentage: percentage,\n              profile: edge.node.ownerProfile?.handle || null,\n            };\n          });\n\n          setHolders(processedHolders);\n        }\n\n        // Fetch swap activities using getCoinSwaps\n        const { getCoinSwaps } = await import(\"@zoralabs/coins-sdk\");\n        const swapsResponse = await getCoinSwaps({\n          address: coin.address as `0x${string}`,\n          chain: base.id,\n          first: 50,\n        });\n\n        const swaps = swapsResponse.data?.zora20Token?.swapActivities?.edges || [];\n        console.log('📊 Swap activities data:', swaps.length > 0 ? swaps[0] : 'No swaps');\n\n        if (swaps.length > 0) {\n          const processedSwaps = swaps.map((edge: any) => ({\n            activityType: edge.node.activityType,\n            coinAmount: edge.node.coinAmount,\n            senderAddress: edge.node.senderAddress,\n            blockTimestamp: edge.node.blockTimestamp,\n            transactionHash: edge.node.transactionHash,\n          }));\n          setSwapActivities(processedSwaps);\n\n          // Calculate 24h volume and creator earnings from swap activities\n          const now = Date.now();\n          const twentyFourHoursAgo = now - (24 * 60 * 60 * 1000);\n\n          let totalVolume24h = 0;\n          let totalCreatorFees = 0;\n\n          swaps.forEach((edge: any) => {\n            const swap = edge.node;\n            const swapTime = new Date(swap.blockTimestamp).getTime();\n\n            // Only count swaps from the last 24 hours\n            if (swapTime >= twentyFourHoursAgo) {\n              // Get the USD value of the swap\n              const swapValueUsd = parseFloat(swap.ethAmount || swap.valueUsd || swap.totalValueUsd || \"0\");\n\n              if (swapValueUsd > 0) {\n                totalVolume24h += swapValueUsd;\n\n                // Creator typically gets a fee (e.g., 2-5% of each trade)\n                // Check if there's a creatorFee field, otherwise estimate at 3%\n                const creatorFee = parseFloat(swap.creatorFee || swap.creatorFeeUsd || \"0\");\n                if (creatorFee > 0) {\n                  totalCreatorFees += creatorFee;\n                } else {\n                  // Estimate creator fee at 3% if not provided\n                  totalCreatorFees += swapValueUsd * 0.03;\n                }\n              }\n            }\n          });\n\n          console.log('💰 Calculated from swaps:', { totalVolume24h, totalCreatorFees });\n\n          // Only override if we calculated non-zero values OR if API returned zero\n          if (totalVolume24h > 0 || (coinData?.volume24h === \"0.0\" || !coinData?.volume24h)) {\n            setVolume24h(totalVolume24h.toFixed(2));\n          }\n\n          if (totalCreatorFees > 0 || !coinData?.creatorEarnings || coinData.creatorEarnings.length === 0) {\n            setCreatorEarnings(totalCreatorFees.toFixed(2));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching coin stats:\", error);\n      }\n    }\n\n    if (open) {\n      fetchCoinStats();\n    }\n\n    return () => {\n      isMounted = false; // Cleanup function to set isMounted to false when component unmounts\n    };\n  }, [\n    coin.address,\n    open,\n    coin.name,\n    coin.image,\n    coin.metadata?.image,\n  ]);\n\n  // Update creator avatar when profile loads\n  useEffect(() => {\n    if (creatorProfile?.avatar) {\n      setCreatorAvatar(creatorProfile.avatar);\n    }\n  }, [creatorProfile]);\n\n  const getImageSrc = (imageUrl?: string) => {\n    if (!imageUrl) return null;\n    if (imageUrl.startsWith(\"ipfs://\")) {\n      const hash = imageUrl.replace(\"ipfs://\", \"\");\n      return `https://${GATEWAY_URLS[0]}/ipfs/${hash}`;\n    }\n    if (imageUrl.includes(\"yellow-patient-cheetah-559.mypinata.cloud\")) {\n      const hash = imageUrl.split(\"/ipfs/\")[1];\n      if (hash) {\n        return `https://${GATEWAY_URLS[0]}/ipfs/${hash}`;\n      }\n    }\n    return imageUrl;\n  };\n\n  const formatAddress = (address?: string) => {\n    if (!address) return 'Unknown';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const handleTrade = async () => {\n    if (!isConnected || !address || !walletClient || !publicClient) {\n      toast({\n        title: \"Wallet not connected\",\n        description: \"Please connect your wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const ethAmountNum = parseFloat(ethAmount);\n    if (!ethAmount || ethAmountNum <= 0) {\n      toast({\n        title: \"Invalid amount\",\n        description: \"Please enter a valid ETH amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check balance\n    const balanceNum = parseFloat(balance);\n    if (isBuying && ethAmountNum > balanceNum) {\n      toast({\n        title: \"Insufficient balance\",\n        description: `You only have ${parseFloat(balance).toFixed(6)} ETH`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsTrading(true);\n\n    try {\n      const { tradeZoraCoin } = await import(\"@/lib/zora\");\n\n      const result = await tradeZoraCoin({\n        coinAddress: coin.address as `0x${string}`,\n        ethAmount,\n        walletClient,\n        publicClient,\n        userAddress: address,\n        isBuying,\n      });\n\n      if (result?.hash) {\n        setTxHash(result.hash);\n\n        // Always save trade record (with or without comment)\n        if (coin.address) {\n          try {\n            await createCommentMutation.mutateAsync({\n              coinAddress: coin.address,\n              userAddress: address,\n              comment: comment.trim() || `Traded ${coin.symbol}`,\n              transactionHash: result.hash,\n            });\n          } catch (error) {\n            console.error('Failed to save trade record:', error);\n            toast({\n              title: \"Trade record not saved\",\n              description: \"Your trade was successful but the activity record could not be saved\",\n              variant: \"destructive\",\n            });\n          }\n        }\n\n        // Create reward records for platform and trade fees\n        const ADMIN_REFERRAL_ADDRESS = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\";\n        const tradeAmountInWei = (parseFloat(ethAmount) * 1e18).toString();\n\n        // Estimate fees based on trade amount (approximate percentages)\n        // Platform fee: ~2% of trade amount (20% of total fees which are ~10% of trade)\n        // Trade fee: ~0.4% of trade amount (4% of total fees which are ~10% of trade)\n        const platformFeeWei = (parseFloat(ethAmount) * 0.02 * 1e18).toString();\n        const tradeFeeWei = (parseFloat(ethAmount) * 0.004 * 1e18).toString();\n\n        // Create platform reward (20%)\n        try {\n          await apiRequest('POST', '/api/rewards', {\n            type: 'platform',\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            transactionHash: result.hash,\n            rewardAmount: platformFeeWei,\n            recipientAddress: ADMIN_REFERRAL_ADDRESS\n          });\n        } catch (error) {\n          console.error('Failed to create platform reward:', error);\n        }\n\n        // Create trade reward (4%)\n        try {\n          await apiRequest('POST', '/api/rewards', {\n            type: 'trade',\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            transactionHash: result.hash,\n            rewardAmount: tradeFeeWei,\n            recipientAddress: ADMIN_REFERRAL_ADDRESS\n          });\n        } catch (error) {\n          console.error('Failed to create trade reward:', error);\n        }\n\n        // Create notification for the trade\n        const notificationType = isBuying ? 'buy' : 'sell';\n        const notificationTitle = isBuying ? '✅ Purchase Successful!' : '✅ Sale Successful!';\n\n        const notificationMessage = isBuying\n          ? `You bought ${coin.symbol} for ${ethAmount} ETH`\n          : `You sold ${coin.symbol} for ${ethAmount} ETH`;\n\n        try {\n          await apiRequest('POST', '/api/notifications', {\n            userId: address,\n            type: notificationType,\n            title: notificationTitle,\n            message: notificationMessage,\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            amount: ethAmount,\n            transactionHash: result.hash,\n            read: false\n          });\n          console.log('✅ Trade notification created');\n        } catch (error) {\n          console.error('Failed to create trade notification:', error);\n        }\n\n        toast({\n          title: \"Trade successful!\",\n          description: `You ${isBuying ? 'bought' : 'sold'} ${coin.symbol} tokens${comment ? ` - ${comment}` : ''}`,\n        });\n\n        // Refresh balance\n        const newBal = await publicClient.getBalance({ address });\n        setBalance(formatEther(newBal));\n      } else {\n        throw new Error(\"Transaction completed but no hash returned\");\n      }\n\n    } catch (error) {\n      console.error(\"Trade failed:\", error);\n\n      const errorMessage = error instanceof Error ? error.message : \"Trade failed\";\n\n      toast({\n        title: \"Trade failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTrading(false);\n    }\n  };\n\n  const handleClose = (open: boolean) => {\n    if (!open) {\n      setTxHash(null);\n      setEthAmount(\"0.000111\");\n      setComment(\"\");\n      setStandaloneComment(\"\");\n      setIsProfileModalOpen(false);\n      setIsBuying(true);\n      setIsTrading(false);\n    }\n    onOpenChange(open);\n  };\n\n  const setQuickAmount = (amount: string) => {\n    if (amount === 'Max') {\n      // Set to 90% of balance to leave some for gas\n      const maxAmount = (parseFloat(balance) * 0.9).toFixed(6);\n      setEthAmount(maxAmount);\n    } else {\n      setEthAmount(amount);\n    }\n  };\n\n  const imageUrlFromCoin = coin?.metadata?.animation_url || coin?.image || coin?.metadata?.image || \"\";\n  const isAudio = coin?.type === \"audio\" || coin?.metadata?.type === \"audio\" || imageUrlFromCoin?.includes('spotify') || imageUrlFromCoin?.match(/\\.(mp3|wav|ogg|m4a)$/i);\n  const isVideo = coin?.type === \"video\" || coin?.metadata?.type === \"video\" || imageUrlFromCoin?.match(/\\.(mp4|webm|mov|avi)$/i);\n\n  const displayImage = coinImage || getImageSrc(imageUrlFromCoin);\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent \n        className=\"sm:max-w-3xl max-h-[90vh] bg-card/95 backdrop-blur-sm border-border/50 p-0 overflow-hidden sm:rounded-3xl\"\n        onPointerDownOutside={(e) => {\n          handleClose(false);\n        }}\n        onEscapeKeyDown={(e) => {\n          handleClose(false);\n        }}\n      >\n        <div className=\"flex max-h-[85vh]\">\n          {/* Left side - Carousel with Image and Chart */}\n          <div className=\"w-5/12 bg-gradient-to-br from-muted/20 to-muted/10 flex flex-col p-4\">\n            {/* Market Cap and Price Change */}\n            <div className=\"mb-3\">\n              <p className=\"text-xs text-muted-foreground mb-0.5\">Market cap</p>\n              <div className=\"flex items-baseline gap-2\">\n                <h3 className=\"text-xl font-bold text-foreground\">\n                  ${marketCap || '0'}\n                </h3>\n                <span className={`text-xs font-semibold ${priceChange >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                  {priceChange >= 0 ? '+' : ''}{priceChange.toFixed(2)}%\n                </span>\n              </div>\n            </div>\n\n            {/* Carousel - Image & Chart Slides */}\n            <div className=\"flex-1 min-h-[200px] relative px-4\">\n              <Carousel className=\"w-full h-full\" opts={{ loop: false }} onSlideChange={(e) => setCurrentSlide(e.slidesInView[0].index)}>\n                <CarouselContent className=\"h-full\">\n                  {/* Slide 1: Coin Image/Video/Audio */}\n                  <CarouselItem className=\"h-full\">\n                    <div className=\"h-full flex items-center justify-center bg-gradient-to-br from-muted/10 to-muted/5 rounded-lg overflow-hidden\">\n                      {displayImage ? (\n                        isVideo ? (\n                          <video\n                            src={displayImage}\n                            controls\n                            autoPlay\n                            loop\n                            muted\n                            playsInline\n                            preload=\"auto\"\n                            className=\"max-w-full max-h-full object-contain\"\n                          />\n                        ) : isAudio ? (\n                          <div className=\"flex flex-col items-center gap-4 p-4\">\n                            <Coins className=\"w-16 h-16 text-primary/40\" />\n                            <audio\n                              src={displayImage}\n                              controls\n                              className=\"w-full max-w-md\"\n                            />\n                          </div>\n                        ) : (\n                          <img\n                            src={displayImage}\n                            alt={(coin as any).metadata?.title || coin.name}\n                            className=\"max-w-full max-h-full object-contain\"\n                          />\n                        )\n                      ) : (\n                        <div className=\"flex flex-col items-center justify-center text-muted-foreground\">\n                          <Coins className=\"w-16 h-16 mb-2 opacity-30\" />\n                          <p className=\"text-sm\">No media available</p>\n                        </div>\n                      )}\n                    </div>\n                  </CarouselItem>\n\n                  {/* Slide 2: Price Chart */}\n                  <CarouselItem className=\"h-full\">\n                    <div className=\"h-full w-full flex items-center justify-center\" style={{ minHeight: '200px' }}>\n                      {chartData.length > 0 ? (\n                        <ResponsiveContainer width=\"100%\" height={250}>\n                          <LineChart data={chartData} margin={{ top: 5, right: 5, left: -20, bottom: 5 }}>\n                            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" opacity={0.3} />\n                            <XAxis\n                              dataKey=\"time\"\n                              stroke=\"#888\"\n                              fontSize={10}\n                              tickLine={false}\n                            />\n                            <YAxis\n                              stroke=\"#888\"\n                              fontSize={10}\n                              tickLine={false}\n                              tickFormatter={(value) => `$${value.toFixed(4)}`}\n                            />\n                            <Tooltip\n                              contentStyle={{\n                                backgroundColor: '#1a1a1a',\n                                border: '1px solid #333',\n                                borderRadius: '8px',\n                                fontSize: '12px'\n                              }}\n                              formatter={(value: any) => [`$${value.toFixed(6)}`, 'Price']}\n                            />\n                            <Line\n                              type=\"monotone\"\n                              dataKey=\"price\"\n                              stroke=\"#22c55e\"\n                              strokeWidth={2}\n                              dot={false}\n                            />\n                          </LineChart>\n                        </ResponsiveContainer>\n                      ) : (\n                        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                          <div className=\"text-center\">\n                            <TrendingUp className=\"w-12 h-12 mx-auto mb-2 opacity-30\" />\n                            <p className=\"text-sm\">Loading price data...</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </CarouselItem>\n\n                  {/* Slide 3: GeckoTerminal Chart */}\n                  <CarouselItem className=\"h-full\">\n                    <div className=\"h-full w-full\" style={{ minHeight: '250px' }}>\n                      <GeckoTerminalChart\n                        network=\"base\"\n                        tokenAddress={coin.address || undefined}\n                        height=\"250px\"\n                        chartType=\"price\"\n                        resolution=\"1d\"\n                        lightChart={false}\n                        showInfo={false}\n                        showSwaps={false}\n                        bgColor=\"111827\"\n                        overlayColor=\"8B5CF6\"\n                      />\n                    </div>\n                  </CarouselItem>\n                </CarouselContent>\n                <CarouselPrevious className=\"left-0 bg-background/80 hover:bg-background\" />\n                <CarouselNext className=\"right-0 bg-background/80 hover:bg-background\" />\n              </Carousel>\n            </div>\n\n            {/* Timeframe Selector - Only show on chart slide */}\n            {currentSlide === 1 && (\n              <div className=\"flex gap-1.5 mt-3\">\n                {(['1H', '1D', 'W', 'M', 'All'] as const).map((tf) => (\n                  <Button\n                    key={tf}\n                    variant={timeframe === tf ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    className={`flex-1 h-7 text-xs ${\n                      timeframe === tf\n                        ? 'bg-primary text-black'\n                        : 'text-muted-foreground hover:text-foreground'\n                    }`}\n                    onClick={() => setTimeframe(tf)}\n                  >\n                    {tf}\n                  </Button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Right side - Tabbed Interface */}\n          <div className=\"w-7/12 flex flex-col overflow-hidden\">\n            <DialogHeader className=\"px-4 pt-4 pb-2\">\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-bold text-foreground\">{coin.name}</h3>\n                  <p className=\"text-xs text-muted-foreground mt-0.5\">\n                    @{formatAddress(coin.creator_wallet)}\n                  </p>\n                </div>\n              </DialogTitle>\n            </DialogHeader>\n\n            <Tabs defaultValue=\"trade\" className=\"flex-1 flex flex-col overflow-hidden\">\n              <TabsList className=\"w-full justify-start rounded-none border-b border-border/50 bg-transparent px-4 h-auto p-0\">\n                <TabsTrigger \n                  value=\"trade\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-4 py-2 bg-transparent\"\n                >\n                  Trade\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"comments\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-4 py-2 bg-transparent\"\n                >\n                  Comments\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"holders\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-4 py-2 bg-transparent\"\n                >\n                  Holders\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"activity\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-4 py-2 bg-transparent\"\n                >\n                  Activity\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"details\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-4 py-2 bg-transparent\"\n                >\n                  Details\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"trade\" className=\"flex-1 px-4 pb-4 mt-0 pt-3 overflow-y-auto min-h-[400px]\">{/* Trade Tab Content */}\n\n            {/* Stats Row */}\n            <div className=\"grid grid-cols-3 gap-2 mb-3\">\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Market Cap</p>\n                <p className=\"text-sm font-bold text-green-500\">\n                  {marketCap && typeof marketCap === 'string' ? `$${marketCap}` : marketCap && typeof marketCap === 'number' ? `$${marketCap.toFixed(2)}` : 'Loading...'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">24H Volume</p>\n                <p className=\"text-sm font-semibold text-foreground\">\n                  {volume24h ? formatSmartCurrency(typeof volume24h === 'string' ? parseFloat(volume24h) : volume24h) : 'Loading...'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Creator Earnings</p>\n                <p className=\"text-sm font-semibold text-foreground\">\n                  {creatorEarnings ? formatSmartCurrency(typeof creatorEarnings === 'string' ? parseFloat(creatorEarnings) : creatorEarnings) : 'Loading...'}\n                </p>\n              </div>\n            </div>\n\n            {/* Buy/Sell Toggle */}\n            <div className=\"flex gap-2 mb-3\">\n              <Button\n                onClick={() => setIsBuying(true)}\n                className={`flex-1 h-9 text-sm font-bold transition-all rounded-full ${\n                  isBuying\n                    ? 'bg-green-500 hover:bg-green-600 text-foreground'\n                    : 'bg-transparent text-muted-foreground hover:bg-muted/50 border border-border/30'\n                }`}\n                disabled={isTrading || !!txHash}\n                variant={isBuying ? \"default\" : \"outline\"}\n              >\n                Buy\n              </Button>\n              <Button\n                onClick={() => setIsBuying(false)}\n                className={`flex-1 h-9 text-sm font-bold transition-all rounded-full ${\n                  !isBuying\n                    ? 'bg-red-500 hover:bg-red-600 text-foreground'\n                    : 'bg-transparent text-muted-foreground hover:bg-muted/50 border border-border/30'\n                }`}\n                disabled={isTrading || !!txHash}\n                variant={!isBuying ? \"default\" : \"outline\"}\n              >\n                Sell\n              </Button>\n            </div>\n\n            {/* Amount Input */}\n            <div className=\"mb-2.5\">\n              <div className=\"relative\">\n                <Input\n                  type=\"number\"\n                  step=\"0.000001\"\n                  min=\"0\"\n                  value={ethAmount}\n                  onChange={(e) => setEthAmount(e.target.value)}\n                  className=\"h-12 text-xl font-bold pr-20 bg-muted/30 border-border/50 text-foreground rounded-2xl\"\n                  disabled={isTrading || !!txHash}\n                  data-testid=\"input-eth-amount\"\n                />\n                <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1.5\">\n                  <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center text-foreground text-xs font-bold\">\n                    Ξ\n                  </div>\n                  <span className=\"text-sm font-semibold text-foreground\">ETH</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Amount Buttons */}\n            <div className=\"grid grid-cols-4 gap-2 mb-3\">\n              {['0.001', '0.01', '0.1', 'Max'].map((label) => (\n                <Button\n                  key={label}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuickAmount(label)}\n                  disabled={isTrading || !!txHash}\n                  className=\"h-8 text-xs bg-muted/20 hover:bg-muted/40 border-border/30 text-foreground rounded-full\"\n                >\n                  {label === 'Max' ? label : `${label} ETH`}\n                </Button>\n              ))}\n            </div>\n\n            {/* Comment Input */}\n            <div className=\"mb-3\">\n              <Input\n                placeholder=\"Add a comment (optional)\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                className=\"h-9 bg-muted/20 border-border/30 text-foreground placeholder:text-muted-foreground rounded-xl text-sm\"\n                disabled={isTrading || !!txHash}\n                maxLength={200}\n              />\n            </div>\n\n            {/* Action Button */}\n            {!txHash ? (\n              !isConnected ? (\n                <div className=\"p-2.5 bg-yellow-500/10 border border-yellow-500/30 rounded-lg\">\n                  <p className=\"text-xs text-yellow-500 text-center font-medium\">\n                    Please connect your wallet to trade\n                  </p>\n                </div>\n              ) : (\n                <Button\n                  className={`w-full h-11 text-base font-bold transition-all rounded-full ${\n                    isBuying\n                      ? 'bg-green-500 hover:bg-green-600'\n                      : 'bg-red-500 hover:bg-red-600'\n                  } text-foreground`}\n                  onClick={handleTrade}\n                  disabled={isTrading || createCommentMutation.isPending || !ethAmount || parseFloat(ethAmount) <= 0}\n                  data-testid=\"button-confirm-trade\"\n                >\n                  {isTrading ? (\n                    <>\n                      <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                      Trading...\n                    </>\n                  ) : (\n                    `${isBuying ? 'Buy' : 'Sell'} ${coin.symbol}`\n                  )}\n                </Button>\n              )\n            ) : (\n              <div className=\"p-3 rounded-lg bg-green-500/10 border border-green-500/30\">\n                <div className=\"flex items-start gap-2.5\">\n                  <CheckCircle2 className=\"w-4 h-4 text-green-400 mt-0.5 flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-semibold text-green-400 text-sm mb-1.5\">\n                      Transaction Successful!\n                    </div>\n                    <a\n                      href={`https://basescan.org/tx/${txHash}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-xs text-muted-foreground hover:text-foreground flex items-center gap-1 transition-colors\"\n                      data-testid=\"link-tx-explorer\"\n                    >\n                      View on BaseScan\n                      <ExternalLink className=\"w-3 h-3\" />\n                    </a>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* External Links */}\n            {coin.address && (\n              <div className=\"flex items-center gap-2 pt-2 mt-2 border-t border-border/30\">\n                <a\n                  href={`https://basescan.org/address/${coin.address}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 bg-muted/30 hover:bg-muted/50 rounded-lg transition-colors text-xs font-medium text-foreground\"\n                  title=\"View on BaseScan\"\n                >\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5zm0 18c-3.87-.93-7-5.07-7-9V8.3l7-3.11 7 3.11V11c0 3.93-3.13 8.07-7 9z\"/>\n                  </svg>\n                  BaseScan\n                </a>\n                <a\n                  href={`https://www.geckoterminal.com/base/pools/${coin.address}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 bg-muted/30 hover:bg-muted/50 rounded-lg transition-colors text-xs font-medium text-foreground\"\n                  title=\"View on GeckoTerminal\"\n                >\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"/>\n                  </svg>\n                  GeckoTerminal\n                </a>\n                <a\n                  href={`https://dexscreener.com/base/${coin.address}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 bg-muted/30 hover:bg-muted/50 rounded-lg transition-colors text-xs font-medium text-foreground\"\n                  title=\"View on DexScreener\"\n                >\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n                  </svg>\n                  DexScreener\n                </a>\n              </div>\n            )}\n\n            {/* Balance */}\n            <div className=\"mt-auto pt-3 text-xs text-muted-foreground text-right\">\n              Balance: {parseFloat(balance).toFixed(6)} ETH\n            </div>\n          </TabsContent>\n\n          {/* Comments Tab */}\n          <TabsContent value=\"comments\" className=\"flex-1 px-4 pb-4 mt-0 pt-3 overflow-y-auto min-h-[400px]\">\n            <div className=\"mb-3\">\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Add a comment...\"\n                  className=\"h-9 bg-muted/20 border-border/30 text-foreground placeholder:text-muted-foreground flex-1 rounded-xl text-sm\"\n                  disabled={!isConnected || createCommentMutation.isPending}\n                  value={standaloneComment}\n                  onChange={(e) => setStandaloneComment(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      handleStandaloneComment();\n                    }\n                  }}\n                />\n                <Button\n                  onClick={handleStandaloneComment}\n                  disabled={!isConnected || createCommentMutation.isPending || !standaloneComment.trim()}\n                  className=\"h-9 rounded-full px-4 text-sm\"\n                >\n                  {createCommentMutation.isPending ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    'Post'\n                  )}\n                </Button>\n              </div>\n              {!isConnected && (\n                <p className=\"text-xs text-muted-foreground mt-1.5\">\n                  Connect your wallet to comment\n                </p>\n              )}\n            </div>\n\n            <ScrollArea className=\"flex-1\">\n              {commentsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"w-5 h-5 animate-spin text-muted-foreground\" />\n                </div>\n              ) : comments && comments.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {comments.map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"p-2.5 rounded-lg bg-muted/20 border border-border/30\"\n                      data-testid={`comment-${c.id}`}\n                    >\n                      <div className=\"flex items-start gap-2.5\">\n                        <div className=\"w-7 h-7 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-xs font-bold text-foreground flex-shrink-0\">\n                          {c.userAddress ? c.userAddress.slice(2, 4).toUpperCase() : '??'}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-0.5\">\n                            <span className=\"text-sm font-medium text-foreground truncate\">\n                              {c.userAddress ? `${c.userAddress.slice(0, 6)}...${c.userAddress.slice(-4)}` : 'Unknown'}</span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(c.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground break-words\">\n                            {c.comment}\n                          </p>\n                          {c.transactionHash && (\n                            <a\n                              href={`https://basescan.org/tx/${c.transactionHash}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-primary/70 hover:text-primary flex items-center gap-1 mt-1.5\"\n                              data-testid={`link-comment-tx-${c.id}`}\n                            >\n                              View transaction <ExternalLink className=\"w-3 h-3\" />\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-48 text-center\">\n                  <MessageCircle className=\"w-10 h-10 text-muted-foreground/30 mb-2\" />\n                  <p className=\"text-sm font-medium text-foreground mb-1\">No comments yet</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Be the first to add a comment\n                  </p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          {/* Holders Tab */}\n          <TabsContent value=\"holders\" className=\"flex-1 px-4 pb-4 mt-0 pt-3 overflow-y-auto min-h-[400px]\">\n            <div className=\"mb-3 flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Total Holders</p>\n                <p className=\"text-lg font-bold text-foreground\">{uniqueHoldersCount}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Total Supply</p>\n                <p className=\"text-lg font-bold text-foreground\">\n                  {totalSupply ? parseFloat(totalSupply).toLocaleString(undefined, { maximumFractionDigits: 0 }) : '-'}\n                </p>\n              </div>\n            </div>\n\n            <ScrollArea className=\"flex-1\">\n              {holders.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {holders.map((holder, index) => {\n                    const creatorAddress = coin.creator_wallet;\n                    const isCreator = creatorAddress ? holder.address.toLowerCase() === creatorAddress.toLowerCase() : false;\n\n                    // Format token balance - convert from wei-like units and format compactly\n                    const tokenBalance = parseFloat(holder.balance);\n                    let formattedBalance: string;\n\n                    if (tokenBalance > 1e18) {\n                      // Very large numbers (wei units) - convert to standard units\n                      formattedBalance = (tokenBalance / 1e18).toLocaleString(undefined, {\n                        maximumFractionDigits: 2,\n                        minimumFractionDigits: 2\n                      });\n                    } else if (tokenBalance > 1e6) {\n                      // Millions\n                      formattedBalance = (tokenBalance / 1e6).toFixed(2) + 'M';\n                    } else if (tokenBalance > 1e3) {\n                      // Thousands\n                      formattedBalance = (tokenBalance / 1e3).toFixed(2) + 'K';\n                    } else {\n                      formattedBalance = tokenBalance.toLocaleString(undefined, { maximumFractionDigits: 2 });\n                    }\n\n                    // Format percentage - handle edge cases properly\n                    let formattedPercentage: string;\n                    if (holder.percentage < 0.01 && holder.percentage > 0) {\n                      formattedPercentage = '<0.01';\n                    } else if (holder.percentage >= 100 || isNaN(holder.percentage)) {\n                      // If data is inconsistent, calculate from total holders instead\n                      const totalHoldersBalance = holders.reduce((sum, h) => sum + parseFloat(h.balance), 0);\n                      const actualPercentage = totalHoldersBalance > 0\n                        ? (tokenBalance / totalHoldersBalance) * 100\n                        : 0;\n                      formattedPercentage = actualPercentage.toFixed(2);\n                    } else {\n                      formattedPercentage = holder.percentage.toFixed(2);\n                    }\n\n\n                    return (\n                      <div\n                        key={holder.address}\n                        className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/10 transition-colors border-b border-border/30\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex items-center gap-1.5 min-w-[25px]\">\n                            <span className=\"text-xs font-bold text-muted-foreground\">#{index + 1}</span>\n                          </div>\n                          <div className={`w-8 h-8 rounded-full ${\n                            index === 0\n                              ? 'bg-gradient-to-br from-yellow-500 to-orange-500'\n                              : isCreator\n                                ? 'bg-gradient-to-br from-primary to-secondary'\n                                : 'bg-gradient-to-br from-blue-500 to-cyan-500'\n                          } flex items-center justify-center text-xs font-bold text-foreground flex-shrink-0`}\n                            // Add onClick to open Profile Card Modal\n                            onClick={() => {\n                              // You might want to fetch specific creator details here if needed\n                              setIsProfileModalOpen(true);\n                            }}\n                            style={{ cursor: 'pointer' }} // Indicate it's clickable\n                          >\n                            {holder.address.slice(2, 4).toUpperCase()}\n                          </div>\n                          <div>\n                            <div className=\"flex items-center gap-1.5\">\n                              <p className=\"text-sm font-semibold text-foreground\">\n                                {holder.address.slice(0, 6)}...{holder.address.slice(-4)}\n                              </p>\n                              {isCreator && (\n                                <span className=\"text-xs px-1.5 py-0.5 rounded bg-primary/20 text-primary font-medium\">\n                                  Creator\n                                </span>\n                              )}\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formattedBalance} tokens\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-bold text-foreground\">\n                            {formattedPercentage}%\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-48 text-center\">\n                  <Users className=\"w-10 h-10 text-muted-foreground/30 mb-2\" />\n                  <p className=\"text-sm font-medium text-foreground mb-1\">Loading holders...</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Fetching holder information from blockchain\n                  </p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\" className=\"flex-1 px-4 pb-4 mt-0 pt-3 overflow-y-auto min-h-[400px]\">\n            <ScrollArea className=\"flex-1\">\n              {swapActivities.length > 0 ? (\n                <div className=\"space-y-1.5\">\n                  {swapActivities.map((swap, index) => {\n                    // Convert coin amount from wei to readable format\n                    const coinAmount = parseFloat(swap.coinAmount);\n                    let formattedAmount: string;\n\n                    if (coinAmount > 1e18) {\n                      // Very large numbers (wei units) - convert to standard units\n                      formattedAmount = (coinAmount / 1e18).toLocaleString(undefined, {\n                        maximumFractionDigits: 2,\n                        minimumFractionDigits: 2\n                      });\n                    } else if (coinAmount > 1e6) {\n                      // Millions\n                      formattedAmount = (coinAmount / 1e6).toFixed(2) + 'M';\n                    } else if (coinAmount > 1e3) {\n                      // Thousands\n                      formattedAmount = (coinAmount / 1e3).toFixed(2) + 'K';\n                    } else {\n                      formattedAmount = coinAmount.toLocaleString(undefined, { maximumFractionDigits: 2 });\n                    }\n\n                    // Format timestamp - handle both string and number timestamps\n                    let formattedDate: string;\n                    const timestamp = swap.blockTimestamp;\n\n                    // Parse the timestamp properly\n                    let dateObj: Date;\n                    if (!timestamp) {\n                      dateObj = new Date();\n                    } else if (typeof timestamp === 'string') {\n                      // Try parsing as ISO string first\n                      dateObj = new Date(timestamp);\n                      // If invalid, try as number\n                      if (isNaN(dateObj.getTime())) {\n                        const numTimestamp = parseInt(timestamp);\n                        dateObj = numTimestamp > 10000000000\n                          ? new Date(numTimestamp)\n                          : new Date(numTimestamp * 1000);\n                      }\n                    } else {\n                      // It's a number - check if seconds or milliseconds\n                      dateObj = timestamp > 10000000000\n                        ? new Date(timestamp)\n                        : new Date(timestamp * 1000);\n                    }\n\n                    formattedDate = dateObj.toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                      year: 'numeric'\n                    });\n\n                    return (\n                      <div\n                        key={`${swap.transactionHash}-${index}`}\n                        className=\"flex items-center gap-2.5 p-2.5 rounded-lg hover:bg-muted/10 transition-colors border-b border-border/30\"\n                        data-testid={`activity-${index}`}\n                      >\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold text-foreground flex-shrink-0 ${\n                          swap.activityType === 'BUY'\n                            ? 'bg-green-500/20 border border-green-500/30'\n                            : 'bg-red-500/20 border border-red-500/30'\n                        }`}>\n                          {swap.senderAddress.slice(2, 4).toUpperCase()}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-0.5\">\n                            <span className=\"text-sm font-medium text-foreground truncate\">\n                              {swap.senderAddress.slice(0, 6)}...{swap.senderAddress.slice(-4)}\n                            </span>\n                            <span className={`text-xs font-bold px-1.5 py-0.5 rounded ${\n                              swap.activityType === 'BUY'\n                                ? 'bg-green-500/20 text-green-500'\n                                : 'bg-red-500/20 text-red-500'\n                            }`}>\n                              {swap.activityType}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formattedAmount} {coin.symbol}\n                            </p>\n                            <span className=\"text-xs text-muted-foreground\">•</span>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formattedDate}\n                            </p>\n                          </div>\n                        </div>\n                        <a\n                          href={`https://basescan.org/tx/${swap.transactionHash}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-primary/70 hover:text-primary flex-shrink-0\"\n                        >\n                          <ExternalLink className=\"w-4 h-4\" />\n                        </a>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-48 text-center\">\n                  <ActivityIcon className=\"w-10 h-10 text-muted-foreground/30 mb-2\" />\n                  <p className=\"text-sm font-medium text-foreground mb-1\">No trades yet</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Trading activity will appear here\n                  </p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          {/* Details Tab */}\n          <TabsContent value=\"details\" className=\"flex-1 px-4 pb-4 mt-0 pt-3 overflow-y-auto min-h-[400px]\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Info className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Created</span>\n                </div>\n                <span className=\"text-sm font-medium text-foreground\">\n                  {coin.createdAt\n                    ? new Date(coin.createdAt).toLocaleDateString('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                      })\n                    : 'N/A'}\n                </span>\n              </div>\n\n              {coin.address && (\n                <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Coins className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Contract address</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-mono text-foreground\">\n                      {coin.address.slice(0, 6)}...{coin.address.slice(-4)}\n                    </span>\n                    <button\n                      onClick={() => copyToClipboard(coin.address!)}\n                      className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                    >\n                      {copiedAddress ? (\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                      ) : (\n                        <Copy className=\"w-4 h-4\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <ActivityIcon className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Chain</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                    <span className=\"text-[10px] font-bold text-foreground\">B</span>\n                  </div>\n                  <span className=\"text-sm font-medium text-foreground\">Base</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Users className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Creator</span>\n                </div>\n                <span className=\"text-sm font-mono text-foreground\">\n                  {formatAddress(coin.creator_wallet)}\n                </span>\n              </div>\n\n              {totalSupply && (\n                <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Coins className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Total Supply</span>\n                  </div>\n                  <span className=\"text-sm font-medium text-foreground\">\n                    {parseFloat(totalSupply).toLocaleString(undefined, { maximumFractionDigits: 0 })}\n                  </span>\n                </div>\n              )}\n\n              {uniqueHoldersCount > 0 && (\n                <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Users className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Unique Holders</span>\n                  </div>\n                  <span className=\"text-sm font-medium text-foreground\">\n                    {uniqueHoldersCount}\n                  </span>\n                </div>\n              )}\n\n              {(coin as any).metadata?.originalUrl && (\n                <div className=\"flex items-center justify-between py-2\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <ExternalLink className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Original post</span>\n                  </div>\n                  <a\n                    href={(coin as any).metadata.originalUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm text-primary hover:underline\"\n                  >\n                    View\n                  </a>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </div>\n      </DialogContent>\n\n      {/* Profile Card Modal */}\n      <ProfileCardModal\n        creatorAddress={coin.creator_wallet}\n        open={isProfileModalOpen}\n        onOpenChange={setIsProfileModalOpen}\n      />\n    </Dialog>\n  );\n}","size_bytes":65597},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/url-input-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, Search } from \"lucide-react\";\n\ninterface URLInputFormProps {\n  onScraped: (data: any) => void;\n}\n\nexport default function URLInputForm({ onScraped }: URLInputFormProps) {\n  const [url, setUrl] = useState(\"\");\n  const { toast } = useToast();\n\n  const scrapeMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const res = await apiRequest(\"POST\", \"/api/scrape\", { url });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Content scraped successfully!\",\n        description: \"Review the preview below to create your coin.\",\n      });\n      onScraped(data);\n      setUrl(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Scraping failed\",\n        description: error.message || \"Failed to scrape content from URL\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!url) {\n      toast({\n        title: \"URL required\",\n        description: \"Please enter a valid URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    scrapeMutation.mutate(url);\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto\">\n      <div className=\"bg-card border border-border/60 rounded-3xl p-8 shadow-black/20 dark:shadow-black/40\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"bg-muted/30 dark:bg-muted/20 rounded-2xl p-1 border border-border/30\">\n              <Input\n                type=\"url\"\n                id=\"contentUrl\"\n                placeholder=\"Paste any URL - Public goods, YouTube, Vlogs, Blogs, Music...\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                className=\"bg-transparent border-0 text-foreground placeholder:text-muted-foreground h-12 text-sm px-5 focus-visible:ring-0 focus-visible:ring-offset-0\"\n                disabled={scrapeMutation.isPending}\n                data-testid=\"input-content-url\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={scrapeMutation.isPending}\n              className=\"w-full h-12 bg-gradient-to-r from-primary to-primary hover:from-primary/90 text-primary-foreground font-semibold rounded-2xl transition-all\"\n              data-testid=\"button-scrape\"\n            >\n              {scrapeMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                  Importing...\n                </>\n              ) : (\n                <>\n                  <Search className=\"w-5 h-5 mr-2\" />\n                  Import Content\n                </>\n              )}\n            </Button>\n          </div>\n\n          <div className=\"pt-2 border-t border-border/30\">\n            <p className=\"text-xs text-muted-foreground text-center leading-relaxed\">\n              <span className=\"font-medium text-foreground\">Supports:</span>{\" \"}\n              Public goods, YouTube, Farcaster, X, Twitch, Blogs, and more\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3437},"contracts/YoubuidlChannelsRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract YoubuidlChannelsRegistry {\n    struct CoinRecord {\n        address coinAddress;\n        address creator;\n        bytes32 metadataHash;\n        uint256 timestamp;\n        bool exists;\n    }\n    \n    address public owner;\n    uint256 public totalCoinsRegistered;\n    \n    mapping(address => CoinRecord) public platformCoins;\n    mapping(address => address[]) public creatorCoins;\n    mapping(address => uint256) public creatorCoinCount;\n    \n    event CoinRegistered(\n        address indexed coinAddress,\n        address indexed creator,\n        bytes32 metadataHash,\n        uint256 timestamp\n    );\n    \n    event BatchRegistered(\n        uint256 count,\n        uint256 timestamp\n    );\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can register coins\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n        totalCoinsRegistered = 0;\n    }\n    \n    function registerCoin(\n        address coinAddress,\n        address creator,\n        bytes32 metadataHash\n    ) public onlyOwner {\n        require(coinAddress != address(0), \"Invalid coin address\");\n        require(creator != address(0), \"Invalid creator address\");\n        require(!platformCoins[coinAddress].exists, \"Coin already registered\");\n        \n        platformCoins[coinAddress] = CoinRecord({\n            coinAddress: coinAddress,\n            creator: creator,\n            metadataHash: metadataHash,\n            timestamp: block.timestamp,\n            exists: true\n        });\n        \n        creatorCoins[creator].push(coinAddress);\n        creatorCoinCount[creator]++;\n        totalCoinsRegistered++;\n        \n        emit CoinRegistered(coinAddress, creator, metadataHash, block.timestamp);\n    }\n    \n    function registerBatch(\n        address[] memory coinAddresses,\n        address[] memory creators,\n        bytes32[] memory metadataHashes\n    ) public onlyOwner {\n        require(\n            coinAddresses.length == creators.length && \n            creators.length == metadataHashes.length,\n            \"Array length mismatch\"\n        );\n        \n        for (uint256 i = 0; i < coinAddresses.length; i++) {\n            if (!platformCoins[coinAddresses[i]].exists) {\n                platformCoins[coinAddresses[i]] = CoinRecord({\n                    coinAddress: coinAddresses[i],\n                    creator: creators[i],\n                    metadataHash: metadataHashes[i],\n                    timestamp: block.timestamp,\n                    exists: true\n                });\n                \n                creatorCoins[creators[i]].push(coinAddresses[i]);\n                creatorCoinCount[creators[i]]++;\n                totalCoinsRegistered++;\n                \n                emit CoinRegistered(\n                    coinAddresses[i],\n                    creators[i],\n                    metadataHashes[i],\n                    block.timestamp\n                );\n            }\n        }\n        \n        emit BatchRegistered(coinAddresses.length, block.timestamp);\n    }\n    \n    function isPlatformCoin(address coinAddress) public view returns (bool) {\n        return platformCoins[coinAddress].exists;\n    }\n    \n    function getCoinRecord(address coinAddress) public view returns (\n        address creator,\n        bytes32 metadataHash,\n        uint256 timestamp,\n        bool exists\n    ) {\n        CoinRecord memory record = platformCoins[coinAddress];\n        return (\n            record.creator,\n            record.metadataHash,\n            record.timestamp,\n            record.exists\n        );\n    }\n    \n    function getCreatorCoins(address creator) public view returns (address[] memory) {\n        return creatorCoins[creator];\n    }\n    \n    function getCreatorCoinCount(address creator) public view returns (uint256) {\n        return creatorCoinCount[creator];\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Invalid new owner\");\n        owner = newOwner;\n    }\n}\n","size_bytes":4053},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastIcon,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, variant, ...props }) {\n        return (\n          <Toast key={id} variant={variant} {...props}>\n            <ToastIcon variant={variant} />\n            <div className=\"flex-1 grid gap-1.5\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":865},"server/telegram-bot.ts":{"content":"\nimport TelegramBot from 'node-telegram-bot-api';\nimport { storage } from './storage';\n\nconst TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';\nconst TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID || '';\n\nlet bot: TelegramBot | null = null;\nconst userWallets = new Map<number, string>();\n\n// Helper function to format wallet address for display\nfunction formatAddress(address: string): string {\n  if (!address) return 'Unknown';\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n}\n\n// Helper function to format timestamps\nfunction formatTimestamp(date: Date | string | null | undefined): string {\n  if (!date) return 'N/A';\n  const d = typeof date === 'string' ? new Date(date) : date;\n  if (!d || isNaN(d.getTime())) return 'N/A';\n  return d.toLocaleString('en-US', { \n    month: '2-digit',\n    day: '2-digit', \n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n    timeZone: 'UTC'\n  }).replace(',', '') + ' UTC';\n}\n\n// Helper function to format numbers with commas\nfunction formatNumber(num: number | string): string {\n  const n = typeof num === 'string' ? parseFloat(num) : num;\n  if (isNaN(n)) return '0.00';\n  return n.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n}\n\n// Format new coin creation notification\nfunction formatNewCoinMessage(coin: any, stats?: any): string {\n  const marketCap = stats?.marketCap ? `$${formatNumber(stats.marketCap)}` : '$0.00';\n  const totalSupply = stats?.totalSupply ? formatNumber(stats.totalSupply) : '1.00B';\n  const creatorAddress = coin.creator_wallet || 'Unknown';\n  const contractAddress = coin.address || 'Pending';\n  \n  let message = `🆕🪙 NEW CREATOR COIN CREATED\\n\\n`;\n  message += `📛 ${coin.name} (${coin.symbol})\\n`;\n  message += `💰 Market Cap: ${marketCap}\\n`;\n  message += `📊 Total Supply: ${totalSupply}\\n`;\n  message += `👤 [${formatAddress(creatorAddress)}](https://zora.co/profile/${creatorAddress})\\n`;\n  message += `📅 Created: ${formatTimestamp(coin.createdAt)}\\n`;\n  message += `📄 Contract: ${formatAddress(contractAddress)}\\n\\n`;\n  \n  if (coin.address) {\n    message += `🔗 [View on Zora](https://zora.co/creator-coins/base:${coin.address}) | `;\n    message += `[BaseScan](https://basescan.org/address/${coin.address}) | `;\n    message += `[DexScreener](https://dexscreener.com/base/${coin.address})`;\n  }\n  \n  return message;\n}\n\n// Format trading activity notification\nfunction formatTradingActivityMessage(coin: any, stats?: any, activityTime?: Date): string {\n  const marketCap = stats?.marketCap ? `$${formatNumber(stats.marketCap)}` : '$0.00';\n  const volume24h = stats?.volume24h ? `$${formatNumber(stats.volume24h)}` : '$0.00';\n  const totalSupply = stats?.totalSupply ? formatNumber(stats.totalSupply) : '1.00B';\n  const holders = stats?.uniqueHolders || stats?.holders || 0;\n  const creatorAddress = coin.creator_wallet || 'Unknown';\n  const contractAddress = coin.address || 'Unknown';\n  \n  let message = `🔄📊 TRADING ACTIVITY\\n\\n`;\n  message += `📛 ${coin.name} (${coin.symbol})\\n`;\n  message += `💰 Market Cap: ${marketCap}\\n`;\n  message += `📊 24h Volume: ${volume24h}\\n`;\n  message += `📊 Total Supply: ${totalSupply}\\n`;\n  message += `👥 Holders: ${holders}\\n`;\n  message += `👤 [${formatAddress(creatorAddress)}](https://zora.co/profile/${creatorAddress})\\n`;\n  message += `📄 Contract: ${formatAddress(contractAddress)}\\n`;\n  message += `📅 Created: ${formatTimestamp(coin.createdAt)}\\n`;\n  if (activityTime) {\n    message += `⏰ Activity: ${formatTimestamp(activityTime)}\\n`;\n  }\n  message += `\\n`;\n  \n  if (coin.address) {\n    message += `🔗 [View on Zora](https://zora.co/creator-coins/base:${coin.address}) | `;\n    message += `[BaseScan](https://basescan.org/address/${coin.address}) | `;\n    message += `[DexScreener](https://dexscreener.com/base/${coin.address})`;\n  }\n  \n  return message;\n}\n\n// Format buy activity notification\nfunction formatBuyActivityMessage(coin: any, stats?: any, activityTime?: Date): string {\n  const marketCap = stats?.marketCap ? `$${formatNumber(stats.marketCap)}` : '$0.00';\n  const totalSupply = stats?.totalSupply ? formatNumber(stats.totalSupply) : '1.00B';\n  const holders = stats?.uniqueHolders || stats?.holders || 0;\n  const creatorAddress = coin.creator_wallet || 'Unknown';\n  const contractAddress = coin.address || 'Unknown';\n  \n  let message = `🟢💰 BUY ACTIVITY\\n\\n`;\n  message += `📛 ${coin.name} (${coin.symbol})\\n`;\n  message += `💰 Market Cap: ${marketCap}\\n`;\n  message += `📊 Total Supply: ${totalSupply}\\n`;\n  message += `👥 Holders: ${holders}\\n`;\n  message += `👤 [${formatAddress(creatorAddress)}](https://zora.co/profile/${creatorAddress})\\n`;\n  message += `📄 Contract: ${formatAddress(contractAddress)}\\n`;\n  message += `📅 Created: ${formatTimestamp(coin.createdAt)}\\n`;\n  if (activityTime) {\n    message += `⏰ Activity: ${formatTimestamp(activityTime)}\\n`;\n  }\n  message += `\\n`;\n  \n  if (coin.address) {\n    message += `🔗 [View on Zora](https://zora.co/creator-coins/base:${coin.address}) | `;\n    message += `[BaseScan](https://basescan.org/address/${coin.address}) | `;\n    message += `[DexScreener](https://dexscreener.com/base/${coin.address})`;\n  }\n  \n  return message;\n}\n\n// Format sell activity notification\nfunction formatSellActivityMessage(coin: any, stats?: any, activityTime?: Date): string {\n  const marketCap = stats?.marketCap ? `$${formatNumber(stats.marketCap)}` : '$0.00';\n  const totalSupply = stats?.totalSupply ? formatNumber(stats.totalSupply) : '1.00B';\n  const holders = stats?.uniqueHolders || stats?.holders || 0;\n  const creatorAddress = coin.creator_wallet || 'Unknown';\n  const contractAddress = coin.address || 'Unknown';\n  \n  let message = `🔴💰 SELL ACTIVITY\\n\\n`;\n  message += `📛 ${coin.name} (${coin.symbol})\\n`;\n  message += `💰 Market Cap: ${marketCap}\\n`;\n  message += `📊 Total Supply: ${totalSupply}\\n`;\n  message += `👥 Holders: ${holders}\\n`;\n  message += `👤 [${formatAddress(creatorAddress)}](https://zora.co/profile/${creatorAddress})\\n`;\n  message += `📄 Contract: ${formatAddress(contractAddress)}\\n`;\n  message += `📅 Created: ${formatTimestamp(coin.createdAt)}\\n`;\n  if (activityTime) {\n    message += `⏰ Activity: ${formatTimestamp(activityTime)}\\n`;\n  }\n  message += `\\n`;\n  \n  if (coin.address) {\n    message += `🔗 [View on Zora](https://zora.co/creator-coins/base:${coin.address}) | `;\n    message += `[BaseScan](https://basescan.org/address/${coin.address}) | `;\n    message += `[DexScreener](https://dexscreener.com/base/${coin.address})`;\n  }\n  \n  return message;\n}\n\n// Format daily market cap update\nfunction formatDailyMarketCapUpdate(coins: any[]): string {\n  let message = `📊💰 DAILY MARKET CAP UPDATE\\n\\n`;\n  \n  const totalMarketCap = coins.reduce((sum, coin) => {\n    const mc = coin.stats?.marketCap || 0;\n    return sum + (typeof mc === 'string' ? parseFloat(mc) : mc);\n  }, 0);\n  \n  message += `💵 Total Platform Market Cap: $${formatNumber(totalMarketCap)}\\n`;\n  message += `🪙 Total Coins: ${coins.length}\\n\\n`;\n  \n  // Top 5 coins by market cap\n  const topCoins = coins\n    .filter(c => c.stats?.marketCap)\n    .sort((a, b) => {\n      const mcA = typeof a.stats.marketCap === 'string' ? parseFloat(a.stats.marketCap) : a.stats.marketCap;\n      const mcB = typeof b.stats.marketCap === 'string' ? parseFloat(b.stats.marketCap) : b.stats.marketCap;\n      return mcB - mcA;\n    })\n    .slice(0, 5);\n  \n  if (topCoins.length > 0) {\n    message += `🏆 TOP 5 BY MARKET CAP:\\n\\n`;\n    topCoins.forEach((coin, index) => {\n      const mc = typeof coin.stats.marketCap === 'string' ? parseFloat(coin.stats.marketCap) : coin.stats.marketCap;\n      message += `${index + 1}. ${coin.name} - $${formatNumber(mc)}\\n`;\n    });\n  }\n  \n  return message;\n}\n\n// Format daily volume update\nfunction formatDailyVolumeUpdate(coins: any[]): string {\n  let message = `📈📊 24H VOLUME UPDATE\\n\\n`;\n  \n  const totalVolume = coins.reduce((sum, coin) => {\n    const vol = coin.stats?.volume24h || 0;\n    return sum + (typeof vol === 'string' ? parseFloat(vol) : vol);\n  }, 0);\n  \n  message += `💵 Total 24h Volume: $${formatNumber(totalVolume)}\\n`;\n  message += `🪙 Active Coins: ${coins.filter(c => c.stats?.volume24h && parseFloat(c.stats.volume24h) > 0).length}\\n\\n`;\n  \n  // Top 5 coins by volume\n  const topCoins = coins\n    .filter(c => c.stats?.volume24h && parseFloat(c.stats.volume24h) > 0)\n    .sort((a, b) => {\n      const volA = typeof a.stats.volume24h === 'string' ? parseFloat(a.stats.volume24h) : a.stats.volume24h;\n      const volB = typeof b.stats.volume24h === 'string' ? parseFloat(b.stats.volume24h) : b.stats.volume24h;\n      return volB - volA;\n    })\n    .slice(0, 5);\n  \n  if (topCoins.length > 0) {\n    message += `🏆 TOP 5 BY 24H VOLUME:\\n\\n`;\n    topCoins.forEach((coin, index) => {\n      const vol = typeof coin.stats.volume24h === 'string' ? parseFloat(coin.stats.volume24h) : coin.stats.volume24h;\n      message += `${index + 1}. ${coin.name} - $${formatNumber(vol)}\\n`;\n    });\n  }\n  \n  return message;\n}\n\n// Format creator earnings update\nfunction formatCreatorEarningsUpdate(walletAddress: string, totalEarnings: number, coins: any[]): string {\n  let message = `💎💰 YOUR CREATOR EARNINGS\\n\\n`;\n  message += `👤 Wallet: [${formatAddress(walletAddress)}](https://zora.co/profile/${walletAddress})\\n`;\n  message += `💵 Total Earnings: $${formatNumber(totalEarnings)}\\n`;\n  message += `🪙 Total Coins Created: ${coins.length}\\n\\n`;\n  \n  // Show top earning coins\n  const earningCoins = coins\n    .filter(c => c.stats?.creatorEarnings && c.stats.creatorEarnings.length > 0)\n    .sort((a, b) => {\n      const earningsA = parseFloat(a.stats.creatorEarnings[0]?.amountUsd || '0');\n      const earningsB = parseFloat(b.stats.creatorEarnings[0]?.amountUsd || '0');\n      return earningsB - earningsA;\n    })\n    .slice(0, 5);\n  \n  if (earningCoins.length > 0) {\n    message += `🏆 TOP EARNING COINS:\\n\\n`;\n    earningCoins.forEach((coin, index) => {\n      const earnings = parseFloat(coin.stats.creatorEarnings[0]?.amountUsd || '0');\n      message += `${index + 1}. ${coin.name} - $${formatNumber(earnings)}\\n`;\n    });\n  }\n  \n  return message;\n}\n\nexport async function initTelegramBot() {\n  if (!TELEGRAM_BOT_TOKEN) {\n    console.warn('TELEGRAM_BOT_TOKEN not set, Telegram bot disabled');\n    return;\n  }\n\n  if (bot) {\n    try {\n      await bot.stopPolling({ cancel: true });\n      bot.removeAllListeners();\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      bot = null;\n    } catch (error) {\n      console.error('Error stopping existing bot:', error);\n    }\n  }\n\n  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { \n    polling: {\n      interval: 300,\n      autoStart: true,\n      params: {\n        timeout: 10\n      }\n    }\n  });\n\n  bot.on('polling_error', (error) => {\n    console.error('Telegram polling error:', error.message);\n  });\n\n  bot.onText(/\\/start/, (msg) => {\n    const chatId = msg.chat.id;\n    bot?.sendMessage(\n      chatId,\n      '👋 Welcome to CoinIT Notifications!\\n\\n' +\n      'Connect your wallet to receive notifications about:\\n' +\n      '• 🆕 New coin creations\\n' +\n      '• 🟢 Buy activity\\n' +\n      '• 🔴 Sell activity\\n' +\n      '• 🔄 Trading activity\\n' +\n      '• 💎 Creator earnings\\n' +\n      '• 📊 Market updates\\n\\n' +\n      'Use /connect <wallet_address> to link your wallet.'\n    );\n  });\n\n  bot.onText(/\\/connect (.+)/, async (msg, match) => {\n    const chatId = msg.chat.id;\n    const walletAddress = match?.[1];\n\n    if (!walletAddress || !walletAddress.startsWith('0x')) {\n      bot?.sendMessage(chatId, '❌ Invalid wallet address. Please use format: /connect 0x...');\n      return;\n    }\n\n    userWallets.set(chatId, walletAddress.toLowerCase());\n    await bot?.sendMessage(\n      chatId,\n      `✅ Wallet connected: ${walletAddress}\\n\\nYou will now receive notifications for this wallet.`\n    );\n\n    try {\n      const { storage } = await import('./storage');\n      const userCoins = await storage.getCoinsByCreator(walletAddress.toLowerCase());\n      \n      if (userCoins.length > 0) {\n        let message = `\\n🪙 *Your Existing Coins*\\n\\nYou have ${userCoins.length} coin(s):\\n\\n`;\n        \n        for (const coin of userCoins.slice(0, 10)) {\n          message += `• *${coin.name}* (${coin.symbol})\\n`;\n          if (coin.address) {\n            message += `  Contract: \\`${coin.address}\\`\\n`;\n          }\n          message += `  Status: ${coin.status}\\n\\n`;\n        }\n        \n        if (userCoins.length > 10) {\n          message += `... and ${userCoins.length - 10} more coins\\n`;\n        }\n        \n        await bot?.sendMessage(chatId, message, { parse_mode: 'Markdown' });\n      } else {\n        await bot?.sendMessage(chatId, '\\nℹ️ You have no coins yet. Create your first coin to get started!');\n      }\n    } catch (error) {\n      console.error('Error fetching user coins:', error);\n    }\n  });\n\n  bot.onText(/\\/disconnect/, (msg) => {\n    const chatId = msg.chat.id;\n    userWallets.delete(chatId);\n    bot?.sendMessage(chatId, '✅ Wallet disconnected. You will no longer receive notifications.');\n  });\n\n  bot.onText(/\\/status/, (msg) => {\n    const chatId = msg.chat.id;\n    const wallet = userWallets.get(chatId);\n    \n    if (!wallet) {\n      bot?.sendMessage(chatId, '❌ No wallet connected. Use /connect <wallet_address> to connect.');\n      return;\n    }\n\n    bot?.sendMessage(chatId, `✅ Connected to wallet: ${wallet}`);\n  });\n\n  console.log('Telegram bot initialized');\n\n  if (TELEGRAM_CHANNEL_ID) {\n    try {\n      const { storage } = await import('./storage');\n      const coins = await storage.getAllCoins();\n      \n      if (coins.length > 0) {\n        await broadcastExistingCoins(coins);\n        console.log(`Auto-broadcasted ${coins.length} existing coins to Telegram channel`);\n      }\n    } catch (error) {\n      console.error('Error auto-broadcasting coins on startup:', error);\n    }\n  }\n}\n\nexport async function sendTelegramNotification(\n  walletAddress: string,\n  title: string,\n  message: string,\n  type: string,\n  coinData?: any,\n  stats?: any\n) {\n  if (!bot) return;\n\n  let formattedMessage = message;\n  \n  // Use formatted messages based on event type\n  if (coinData) {\n    switch (type) {\n      case 'coin_created':\n        formattedMessage = formatNewCoinMessage(coinData, stats);\n        break;\n      case 'buy':\n        formattedMessage = formatBuyActivityMessage(coinData, stats, new Date());\n        break;\n      case 'sell':\n        formattedMessage = formatSellActivityMessage(coinData, stats, new Date());\n        break;\n      case 'trade':\n        formattedMessage = formatTradingActivityMessage(coinData, stats, new Date());\n        break;\n      default:\n        formattedMessage = message;\n    }\n  }\n\n  // Extract image URL from coinData\n  const imageUrl = coinData?.image || coinData?.metadata?.image;\n  const isVideo = imageUrl && imageUrl.match(/\\.(mp4|webm|mov|avi)$/i);\n  const isAudio = imageUrl && imageUrl.match(/\\.(mp3|wav|ogg|m4a)$/i);\n\n  // Broadcast to channel if it's a coin creation and channel is configured\n  if (TELEGRAM_CHANNEL_ID && type === 'coin_created') {\n    try {\n      if (imageUrl && !isAudio) {\n        if (isVideo) {\n          // Send video with caption\n          await bot.sendVideo(\n            TELEGRAM_CHANNEL_ID,\n            imageUrl,\n            {\n              caption: formattedMessage,\n              parse_mode: 'Markdown',\n            }\n          );\n        } else {\n          // Send photo with caption\n          await bot.sendPhoto(\n            TELEGRAM_CHANNEL_ID,\n            imageUrl,\n            {\n              caption: formattedMessage,\n              parse_mode: 'Markdown',\n            }\n          );\n        }\n      } else {\n        // Send text message only\n        await bot.sendMessage(\n          TELEGRAM_CHANNEL_ID,\n          formattedMessage,\n          { \n            parse_mode: 'Markdown',\n            disable_web_page_preview: false \n          }\n        );\n      }\n      console.log('Broadcasted coin creation to channel with media');\n    } catch (error) {\n      console.error('Failed to broadcast to channel:', error);\n      // Fallback to text-only message\n      try {\n        await bot.sendMessage(\n          TELEGRAM_CHANNEL_ID,\n          formattedMessage,\n          { parse_mode: 'Markdown', disable_web_page_preview: false }\n        );\n      } catch (fallbackError) {\n        console.error('Fallback message also failed:', fallbackError);\n      }\n    }\n  }\n\n  // Find all chat IDs connected to this wallet\n  const chatIds = Array.from(userWallets.entries())\n    .filter(([_, wallet]) => wallet.toLowerCase() === walletAddress.toLowerCase())\n    .map(([chatId]) => chatId);\n\n  for (const chatId of chatIds) {\n    try {\n      if (imageUrl && !isAudio) {\n        if (isVideo) {\n          // Send video with caption\n          await bot.sendVideo(\n            chatId,\n            imageUrl,\n            {\n              caption: formattedMessage,\n              parse_mode: 'Markdown',\n            }\n          );\n        } else {\n          // Send photo with caption\n          await bot.sendPhoto(\n            chatId,\n            imageUrl,\n            {\n              caption: formattedMessage,\n              parse_mode: 'Markdown',\n            }\n          );\n        }\n      } else {\n        // Send text message only\n        await bot.sendMessage(\n          chatId,\n          formattedMessage,\n          { parse_mode: 'Markdown' }\n        );\n      }\n    } catch (error) {\n      console.error(`Failed to send Telegram notification to ${chatId}:`, error);\n      // Fallback to text-only message\n      try {\n        await bot.sendMessage(\n          chatId,\n          formattedMessage,\n          { parse_mode: 'Markdown' }\n        );\n      } catch (fallbackError) {\n        console.error('Fallback message also failed:', fallbackError);\n      }\n    }\n  }\n}\n\nexport async function broadcastExistingCoins(coins: any[]) {\n  if (!bot || !TELEGRAM_CHANNEL_ID) {\n    console.log('Telegram bot not initialized or channel not configured');\n    return;\n  }\n\n  try {\n    console.log(`Broadcasting ${coins.length} coins to channel ${TELEGRAM_CHANNEL_ID}...`);\n    \n    let message = `📊🪙 PLATFORM UPDATE\\n\\n`;\n    message += `Total Coins: ${coins.length}\\n`;\n    message += `Active Creators: ${new Set(coins.map(c => c.creator_wallet)).size}\\n\\n`;\n    \n    const latestCoins = coins.slice(0, 5);\n    message += `*Latest Coins:*\\n\\n`;\n    \n    for (const coin of latestCoins) {\n      message += `• *${coin.name}* (${coin.symbol})\\n`;\n      if (coin.address) {\n        message += `  [View on Zora](https://zora.co/creator-coins/base:${coin.address})\\n`;\n      }\n    }\n    \n    if (coins.length > 5) {\n      message += `\\n... and ${coins.length - 5} more coins\\n`;\n    }\n    \n    message += `\\n🚀 *Join the trading action!*`;\n    \n    await bot.sendMessage(TELEGRAM_CHANNEL_ID, message, { \n      parse_mode: 'Markdown',\n      disable_web_page_preview: true \n    });\n    console.log('Successfully broadcast to channel');\n  } catch (error) {\n    console.error('Failed to broadcast to channel:', error);\n  }\n}\n\nexport async function stopTelegramBot() {\n  if (bot) {\n    try {\n      await bot.stopPolling();\n      bot.removeAllListeners();\n      bot = null;\n      console.log('Telegram bot stopped');\n    } catch (error) {\n      console.error('Error stopping Telegram bot:', error);\n    }\n  }\n}\n\nexport { \n  bot, \n  formatNewCoinMessage, \n  formatTradingActivityMessage, \n  formatBuyActivityMessage, \n  formatSellActivityMessage,\n  formatDailyMarketCapUpdate,\n  formatDailyVolumeUpdate,\n  formatCreatorEarningsUpdate\n};\n","size_bytes":19763},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/upload-handler.ts":{"content":"import { Request, Response } from \"express\";\nimport formidable from \"formidable\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport sharp from 'sharp';\n\nconst PINATA_JWT = process.env.VITE_PINATA_JWT;\nconst PINATA_API_KEY = process.env.VITE_PINATA_API_KEY;\nconst PINATA_SECRET_KEY = process.env.VITE_PINATA_SECRET_KEY;\n\nexport async function handleFileUpload(req: Request, res: Response) {\n  if (!PINATA_JWT && (!PINATA_API_KEY || !PINATA_SECRET_KEY)) {\n    return res.status(500).json({\n      error: \"Pinata credentials not configured\"\n    });\n  }\n\n  const form = formidable({\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    keepExtensions: true,\n  });\n\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      console.error(\"File parse error:\", err);\n      return res.status(400).json({ error: \"Failed to parse file upload\" });\n    }\n\n    const file = Array.isArray(files.file) ? files.file[0] : files.file;\n\n    if (!file) {\n      return res.status(400).json({ error: \"No file uploaded\" });\n    }\n\n    try {\n      // Read file\n      let fileBuffer = fs.readFileSync(file.filepath);\n      const fileName = file.originalFilename || `upload-${Date.now()}`;\n      let fileMimeType = file.mimetype || 'application/octet-stream';\n\n      // Compress images aggressively before upload\n      if (fileMimeType.startsWith('image/') && fileBuffer.length > 500 * 1024) {\n        try {\n          const compressedBuffer = await sharp(fileBuffer)\n            .resize(1920, 1920, {\n              fit: 'inside',\n              withoutEnlargement: true\n            })\n            .jpeg({\n              quality: 80,\n              progressive: true\n            })\n            .toBuffer();\n\n          fileBuffer = compressedBuffer;\n          fileMimeType = 'image/jpeg'; // Ensure mimetype is updated after compression\n        } catch (compressionError) {\n          console.warn('Image compression failed, using original:', compressionError);\n          // If compression fails, we continue with the original buffer and mimetype\n        }\n      }\n\n\n      // Upload to Pinata\n      const formData = new FormData();\n      const blob = new Blob([fileBuffer], { type: fileMimeType });\n      formData.append('file', blob, fileName);\n\n      const pinataMetadata = JSON.stringify({\n        name: fileName,\n      });\n      formData.append('pinataMetadata', pinataMetadata);\n\n      const uploadResponse = await fetch(\n        'https://api.pinata.cloud/pinning/pinFileToIPFS',\n        {\n          method: 'POST',\n          headers: PINATA_JWT\n            ? { 'Authorization': `Bearer ${PINATA_JWT}` }\n            : {\n                'pinata_api_key': PINATA_API_KEY!,\n                'pinata_secret_api_key': PINATA_SECRET_KEY!,\n              },\n          body: formData,\n        }\n      );\n\n      if (!uploadResponse.ok) {\n        const errorText = await uploadResponse.text();\n        console.error(\"Pinata upload error:\", errorText);\n        throw new Error(`Pinata upload failed: ${errorText}`);\n      }\n\n      const result = await uploadResponse.json();\n      const ipfsHash = result.IpfsHash;\n      const gatewayUrl = process.env.NEXT_PUBLIC_GATEWAY_URL || 'https://gateway.pinata.cloud';\n      const url = `${gatewayUrl}/ipfs/${ipfsHash}`;\n\n      // Clean up temp file\n      fs.unlinkSync(file.filepath);\n\n      // Get user-provided metadata (formidable can return arrays or strings)\n      const getFieldValue = (field: any): string => {\n        if (Array.isArray(field)) return field[0] || '';\n        return field || '';\n      };\n\n      const title = getFieldValue(fields.title) || fileName;\n      const description = getFieldValue(fields.description) || '';\n      const author = getFieldValue(fields.author) || '';\n      const fileType = fileMimeType.split('/')[0] || 'file';\n\n      // Return upload data directly - no scraping needed for uploads\n      // For video/audio files, set animation_url per EIP-7572 standard\n      const isVideo = fileMimeType.startsWith('video/');\n      const isAudio = fileMimeType.startsWith('audio/');\n      const isImage = fileMimeType.startsWith('image/');\n\n      const uploadData = {\n        url: url,\n        title: title,\n        description: description,\n        image: isImage ? url : '', // Default to empty if not an image\n        animation_url: (isVideo || isAudio) ? url : undefined,\n        author: author,\n        publishDate: new Date().toISOString(),\n        content: description,\n        platform: 'upload',\n        type: fileType,\n      };\n\n      console.log('Sending upload response:', { ipfsHash, url, uploadData });\n\n      res.json({\n        success: true,\n        ipfsHash,\n        url,\n        fileName,\n        uploadData,\n      });\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n\n      // Clean up temp file on error\n      try {\n        fs.unlinkSync(file.filepath);\n      } catch {}\n\n      res.status(500).json({\n        error: \"Failed to upload file to IPFS\",\n        details: error instanceof Error ? error.message : String(error),\n      });\n    }\n  });\n}","size_bytes":5030},"client/src/lib/zora.ts":{"content":"import {\n  createCoin,\n  createCoinCall,\n  setApiKey,\n  getCoinCreateFromLogs,\n  CreateConstants,\n  tradeCoin,\n  TradeParameters,\n  createMetadataBuilder,\n  createZoraUploaderForCreator\n} from \"@zoralabs/coins-sdk\";\nimport { createPublicClient, createWalletClient, http, parseEther, type Address, type Hash } from \"viem\";\nimport { base, baseSepolia } from \"viem/chains\";\nimport { uploadToIPFS, uploadToPinata } from \"./pinata\";\n\n// Set up Zora API key\nconst ZORA_API_KEY = import.meta.env.VITE_NEXT_PUBLIC_ZORA_API_KEY || \"\";\n\nif (ZORA_API_KEY) {\n  setApiKey(ZORA_API_KEY);\n  console.log(\"✓ Zora API key configured successfully\");\n} else {\n  console.error(\"❌ VITE_NEXT_PUBLIC_ZORA_API_KEY not configured - coin stats will not load\");\n  console.log(\"Available env vars:\", Object.keys(import.meta.env).filter(k => k.startsWith('VITE_')));\n}\n\nexport interface CoinMetadata {\n  name: string;\n  symbol: string;\n  description?: string;\n  image?: string | File;\n  externalUrl?: string;\n}\n\nexport interface CoinCreationResult {\n  hash: Hash;\n  address: Address;\n  deployment: any;\n}\n\n// Helper function to upload metadata using Pinata\nasync function uploadMetadataViaPinata(metadata: CoinMetadata): Promise<string> {\n  const PINATA_JWT = import.meta.env.VITE_PINATA_JWT;\n\n  if (!PINATA_JWT) {\n    throw new Error(\"PINATA_JWT not configured\");\n  }\n\n  try {\n    // Upload image first if it exists\n    let imageUri = '';\n    if (metadata.image) {\n      if (typeof metadata.image === 'string') {\n        // Image is already a URL\n        imageUri = metadata.image;\n      } else {\n        // Upload the file to Pinata\n        const ipfsHash = await uploadToPinata(metadata.image);\n\n        // Use ipfs:// protocol for Zora contract compatibility\n        imageUri = `ipfs://${ipfsHash}`;\n      }\n    }\n\n    // Create metadata object\n    const metadataJson = {\n      name: metadata.name,\n      description: metadata.description || `A coin representing ${metadata.name}`,\n      image: imageUri,\n      ...(metadata.externalUrl && { external_url: metadata.externalUrl })\n    };\n\n    // Upload metadata JSON to IPFS\n    const metadataUri = await uploadToIPFS(metadataJson);\n\n    console.log(\"✓ Metadata uploaded via Pinata:\", metadataUri);\n    return metadataUri;\n  } catch (error) {\n    console.error(\"Pinata metadata upload error:\", error);\n    throw new Error(`Failed to upload metadata via Pinata: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n// Try to upload via Zora first, fallback to Pinata if it fails\nasync function createMetadataForZora(metadata: CoinMetadata, creatorAddress: Address) {\n  if (!ZORA_API_KEY) {\n    throw new Error(\"Zora API key is required for metadata creation\");\n  }\n\n  try {\n    // Convert image URL to File if it's a URL\n    let imageFile: File | undefined;\n    if (metadata.image) {\n      if (typeof metadata.image === 'string') {\n        // Fetch the image and convert to File\n        const response = await fetch(metadata.image);\n        const blob = await response.blob();\n        const filename = metadata.image.split('/').pop() || 'image.jpg';\n        imageFile = new File([blob], filename, { type: blob.type });\n      } else {\n        imageFile = metadata.image;\n      }\n    }\n\n    // Use Zora's metadata builder and uploader\n    const builder = createMetadataBuilder()\n      .withName(metadata.name)\n      .withSymbol(metadata.symbol)\n      .withDescription(metadata.description || `A coin representing ${metadata.name}`);\n\n    if (imageFile) {\n      builder.withImage(imageFile);\n    }\n\n    const { createMetadataParameters } = await builder.upload(\n      createZoraUploaderForCreator(creatorAddress)\n    );\n\n    console.log(\"✓ Metadata uploaded via Zora:\", createMetadataParameters);\n\n    return createMetadataParameters;\n  } catch (error) {\n    console.error(\"Zora metadata upload error:\", error);\n    console.log(\"Falling back to Pinata upload...\");\n\n    // Fallback to Pinata\n    try {\n      const metadataUri = await uploadMetadataViaPinata(metadata);\n      return {\n        name: metadata.name,\n        symbol: metadata.symbol,\n        metadata: { type: \"RAW_URI\" as const, uri: metadataUri }\n      };\n    } catch (pinataError) {\n      console.error(\"Pinata fallback failed:\", pinataError);\n      throw new Error(`Failed to upload metadata via Zora and Pinata: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n}\n\n\nexport async function createZoraCoin(\n  metadata: CoinMetadata,\n  creatorAddress: Address,\n  chainId: number = base.id\n): Promise<CoinCreationResult> {\n  if (!ZORA_API_KEY) {\n    throw new Error(\"Zora API key not configured\");\n  }\n\n  try {\n    // Set up clients for the specified chain\n    const chain = chainId === baseSepolia.id ? baseSepolia : base;\n    const alchemyApiKey = import.meta.env.VITE_ALCHEMY_API_KEY || \"o3VW3WRXrsXXMRX3l7jZxLUqhWyZzXBy\";\n    const rpcUrl = import.meta.env.VITE_ZORA_RPC_URL || \n                   `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;\n\n    const publicClient = createPublicClient({\n      chain,\n      transport: http(rpcUrl),\n    });\n\n    // Upload metadata to IPFS via Pinata\n    const metadataUri = await uploadMetadataViaPinata(metadata);\n\n    console.log('Created metadata URI:', metadataUri);\n\n    // Admin platform referral address for earning 20% of all future trading fees\n    const ADMIN_PLATFORM_REFERRAL = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\"; // Default admin wallet\n\n    // Create coin arguments matching SDK v0.3.2 API with platform referral\n    const createCoinArgs = {\n      creator: creatorAddress,\n      name: metadata.name,\n      symbol: metadata.symbol,\n      metadata: { type: \"RAW_URI\" as const, uri: metadataUri || \"\" },\n      currency: CreateConstants.ContentCoinCurrencies.ETH,\n      chainId,\n      skipMetadataValidation: !metadataUri, // Only skip if no URI (validation will fail on empty)\n      platformReferrer: ADMIN_PLATFORM_REFERRAL, // Earn 20% of all trading fees for this coin\n      startingMarketCap: CreateConstants.StartingMarketCaps.LOW, // Set initial market cap\n    };\n\n    // For client-side, we'll return the call data instead of executing\n    // The actual transaction will be handled by the wallet client\n    const txCalls = await createCoinCall(createCoinArgs);\n\n    // This is a placeholder - actual implementation requires wallet integration\n    throw new Error(\"Wallet integration required for actual coin creation. This is a development environment limitation.\");\n\n  } catch (error) {\n    console.error(\"Zora coin creation error:\", error);\n    throw new Error(`Failed to create Zora coin: ${error}`);\n  }\n}\n\nexport async function createZoraCoinWithWallet(\n  metadata: CoinMetadata,\n  walletClient: any,\n  address: Address,\n  chainId: number = base.id,\n  manualPoolConfig?: `0x${string}`\n): Promise<CoinCreationResult> {\n  try {\n    // Set up clients\n    const chain = chainId === baseSepolia.id ? baseSepolia : base;\n    const alchemyApiKey = import.meta.env.VITE_ALCHEMY_API_KEY || \"o3VW3WRXrsXXMRX3l7jZxLUqhWyZzXBy\";\n    const rpcUrl = import.meta.env.VITE_ZORA_RPC_URL || \n                   `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;\n\n    const publicClient = createPublicClient({\n      chain,\n      transport: http(rpcUrl),\n    });\n\n    // Upload metadata directly to Pinata (bypassing Zora's validation issues)\n    console.log('📤 Uploading metadata via Pinata...');\n    const metadataUri = await uploadMetadataViaPinata(metadata);\n    console.log('✅ Metadata uploaded:', metadataUri);\n\n    // Admin platform referral address for earning 20% of all future trading fees\n    const ADMIN_PLATFORM_REFERRAL = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\"; // Default admin wallet\n\n    // Use direct factory contract deployment (primary method)\n    const { deployCreatorCoinDirect } = await import('@/lib/zora-factory');\n\n    console.log(\"🚀 Using direct factory deployment with official Zora poolConfig\");\n\n    const directResult = await deployCreatorCoinDirect(\n      {\n        name: metadata.name,\n        symbol: metadata.symbol,\n        metadataUri: metadataUri,\n        creatorAddress: address,\n        platformReferrer: ADMIN_PLATFORM_REFERRAL as Address,\n        manualPoolConfig: manualPoolConfig,\n        contentUrl: metadata.externalUrl || metadataUri,\n        useActivityTracker: true, // Enable on-chain activity tracking for grants\n      },\n      walletClient,\n      chainId\n    );\n\n    console.log(\"✅ Coin deployed successfully:\", directResult.address);\n\n    return {\n      hash: directResult.hash,\n      address: directResult.address,\n      deployment: null\n    };\n\n  } catch (error) {\n    console.error(\"❌ Zora coin creation with wallet error:\", error);\n    throw new Error(`Failed to create Zora coin: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nexport async function getCoinStats(coinAddress: string) {\n  // This would integrate with Zora's coin querying APIs\n  // For now, return null as placeholder\n  return null;\n}\n\nexport async function tradeZoraCoin({\n  coinAddress,\n  ethAmount,\n  walletClient,\n  publicClient,\n  userAddress,\n  isBuying = true\n}: {\n  coinAddress: Address;\n  ethAmount: string;\n  walletClient: any;\n  publicClient: any;\n  userAddress: Address;\n  isBuying?: boolean;\n}) {\n  if (!ZORA_API_KEY) {\n    throw new Error(\"Zora API key not configured\");\n  }\n\n  try {\n    const { tradeCoin } = await import(\"@zoralabs/coins-sdk\");\n\n    // Convert ETH amount to wei for the transaction\n    const amountInWei = parseEther(ethAmount);\n\n    // Admin trade referral address for earning 4% of this specific trade\n    const ADMIN_TRADE_REFERRAL = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\";\n\n    // Create trade parameters according to Zora SDK documentation\n    const tradeParameters = isBuying ? {\n      // Buying coin with ETH\n      sell: { type: \"eth\" as const },\n      buy: { \n        type: \"erc20\" as const, \n        address: coinAddress \n      },\n      amountIn: amountInWei,\n      slippage: 0.05, // 5% slippage tolerance\n      sender: userAddress,\n      tradeReferrer: ADMIN_TRADE_REFERRAL, // Earn 4% of this trade\n    } : {\n      // Selling coin for ETH\n      sell: { \n        type: \"erc20\" as const, \n        address: coinAddress \n      },\n      buy: { type: \"eth\" as const },\n      amountIn: amountInWei,\n      slippage: 0.15, // 15% slippage tolerance for selling\n      sender: userAddress,\n      tradeReferrer: ADMIN_TRADE_REFERRAL, // Earn 4% of this trade\n    };\n\n    console.log(\"Trading with parameters:\", tradeParameters);\n\n    // Get account from wallet client\n    const account = walletClient.account;\n    if (!account) {\n      throw new Error(\"No account found in wallet client\");\n    }\n\n    const receipt = await tradeCoin({\n      tradeParameters,\n      walletClient,\n      account,\n      publicClient,\n    });\n\n    console.log(\"Trade receipt:\", receipt);\n\n    if (!receipt || !receipt.transactionHash) {\n      throw new Error(\"Trade transaction failed - no transaction hash returned\");\n    }\n\n    return {\n      hash: receipt.transactionHash,\n      success: true,\n      receipt\n    };\n  } catch (error) {\n    console.error(\"Trade error:\", error);\n\n    // Provide more specific error messages\n    if (error instanceof Error) {\n      if (error.message.includes(\"insufficient funds\")) {\n        throw new Error(\"Insufficient ETH balance for this trade\");\n      } else if (error.message.includes(\"user rejected\")) {\n        throw new Error(\"Transaction was cancelled by user\");\n      } else if (error.message.includes(\"slippage\")) {\n        throw new Error(\"Trade failed due to high slippage - try again with higher slippage tolerance\");\n      } else if (error.message.includes(\"Slippage must be less than 1\")) {\n        throw new Error(\"Invalid slippage configuration\");\n      } else if (error.message.includes(\"Amount in must be greater than 0\")) {\n        throw new Error(\"Trade amount must be greater than 0\");\n      } else {\n        throw new Error(`Trading failed: ${error.message}`);\n      }\n    }\n\n    throw new Error(\"Trading failed - unknown error occurred\");\n  }\n}\n\n// Export for compatibility\nexport const createBaseCoin = createZoraCoin;","size_bytes":12154},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Format currency values with smart precision:\n * - For values >= $0.01: show 2 decimal places\n * - For values < $0.01 but > 0: show up to 8 significant digits\n * - For zero: show $0.00\n */\nexport function formatSmartCurrency(value: number | string | null | undefined): string {\n  // Handle null, undefined, or non-numeric values\n  if (value == null || value === '') return \"$0.00\";\n  \n  // Convert string to number if needed\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  \n  // Handle NaN or invalid numbers\n  if (isNaN(numValue)) return \"$0.00\";\n  \n  if (numValue === 0) return \"$0.00\";\n  \n  // For very small values (< $0.01), show more precision\n  if (numValue < 0.01) {\n    // Format with enough precision to capture the value\n    const formatted = numValue.toFixed(8);\n    // Remove trailing zeros but keep at least one significant digit visible\n    const trimmed = formatted.replace(/\\.?0+$/, '');\n    // If the value is so small it would round to 0, show it with scientific notation context\n    if (parseFloat(trimmed) === 0) {\n      // For extremely tiny values, show at least 8 decimals\n      return `$${formatted}`;\n    }\n    return `$${trimmed}`;\n  }\n  \n  // For normal values, use 2 decimal places\n  return `$${numValue.toLocaleString(\"en-US\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n}\n","size_bytes":1519},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/pages/rewards.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Search, TrendingUp, Users, Heart, Eye, DollarSign, Loader2, AlertCircle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Layout from \"@/components/layout\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface AnalysisResult {\n  url: string;\n  platform: string;\n  title: string;\n  author?: string;\n  followers?: number;\n  engagement?: number;\n  estimatedMarketCap: number;\n  estimatedDailyEarnings: number;\n  estimatedMonthlyEarnings: number;\n  popularityScore: number;\n}\n\n// Mock analysis function - in production, this would call your backend\nasync function analyzeUrl(url: string): Promise<AnalysisResult> {\n  const response = await fetch('/api/scrape', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ url }),\n  });\n\n  if (!response.ok) throw new Error('Failed to analyze URL');\n  \n  const data = await response.json();\n  \n  // Calculate estimated metrics based on scraped data\n  // This is a simplified algorithm - adjust based on your needs\n  const baseMultiplier = 0.001; // Base market cap per follower\n  const engagementBonus = 1.5; // Bonus for high engagement\n  \n  // Use followers from scraped data if available, otherwise try to extract from description\n  let estimatedFollowers = data.followers || 0;\n  \n  // If followers not in data, try to extract from description as fallback\n  if (!estimatedFollowers) {\n    const followerMatch = data.description?.match(/(\\d+(?:,\\d+)*)\\s*(?:followers|subs|subscribers)/i);\n    estimatedFollowers = followerMatch ? parseInt(followerMatch[1].replace(/,/g, '')) : 10000;\n  }\n  \n  const popularityScore = Math.min(100, (estimatedFollowers / 1000) * 10);\n  const estimatedMarketCap = estimatedFollowers * baseMultiplier * engagementBonus;\n  const estimatedDailyEarnings = estimatedMarketCap * 0.02; // 2% daily volume\n  const estimatedMonthlyEarnings = estimatedDailyEarnings * 30;\n\n  return {\n    url: data.url,\n    platform: data.platform,\n    title: data.title,\n    author: data.author,\n    followers: estimatedFollowers,\n    engagement: data.engagement || Math.floor(Math.random() * 10),\n    estimatedMarketCap,\n    estimatedDailyEarnings,\n    estimatedMonthlyEarnings,\n    popularityScore,\n  };\n}\n\nexport default function Analyzer() {\n  const [url, setUrl] = useState(\"\");\n  const [result, setResult] = useState<AnalysisResult | null>(null);\n\n  const analyzeMutation = useMutation({\n    mutationFn: analyzeUrl,\n    onSuccess: (data) => {\n      setResult(data);\n    },\n  });\n\n  const handleAnalyze = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!url.trim()) return;\n    analyzeMutation.mutate(url);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  const formatNumber = (num: number) => {\n    return new Intl.NumberFormat('en-US').format(num);\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-4 sm:p-8\">\n        <div className=\"max-w-5xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl sm:text-4xl font-black mb-4 text-white\">\n              Social <span className=\"spotify-green\">Analyzer</span>\n            </h1>\n            <p className=\"text-lg sm:text-xl text-muted-foreground\">\n              Analyze any social media page and estimate potential earnings on CoinIT\n            </p>\n          </div>\n\n          {/* URL Input */}\n          <Card className=\"spotify-card mb-8\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Analyze Social Page</CardTitle>\n              <CardDescription>\n                Enter a URL from YouTube, Instagram, TikTok, Twitter, or any social platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleAnalyze} className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    type=\"url\"\n                    placeholder=\"https://instagram.com/username or https://youtube.com/@channel\"\n                    value={url}\n                    onChange={(e) => setUrl(e.target.value)}\n                    className=\"flex-1 bg-muted/20 border-border text-white\"\n                    disabled={analyzeMutation.isPending}\n                  />\n                  <Button\n                    type=\"submit\"\n                    disabled={analyzeMutation.isPending || !url.trim()}\n                    className=\"spotify-button\"\n                  >\n                    {analyzeMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Analyzing...\n                      </>\n                    ) : (\n                      <>\n                        <Search className=\"w-4 h-4 mr-2\" />\n                        Analyze\n                      </>\n                    )}\n                  </Button>\n                </div>\n\n                {analyzeMutation.isError && (\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Failed to analyze URL. Some platforms (Instagram, TikTok) may block automated access. \n                      Try YouTube, Medium, or blog URLs for better results.\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Alert className=\"bg-muted/10 border-muted/20\">\n                  <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n                  <AlertDescription className=\"text-muted-foreground text-sm\">\n                    <strong>Note:</strong> Instagram and TikTok often block automated analysis. \n                    For best results, use YouTube channels, Medium profiles, or blog URLs.\n                  </AlertDescription>\n                </Alert>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Loading State */}\n          {analyzeMutation.isPending && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i} className=\"spotify-card\">\n                    <CardHeader className=\"space-y-2\">\n                      <Skeleton className=\"h-4 w-24 bg-muted/20\" />\n                      <Skeleton className=\"h-8 w-32 bg-muted/20\" />\n                    </CardHeader>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Results */}\n          {result && !analyzeMutation.isPending && (\n            <div className=\"space-y-6\">\n              {/* Page Info */}\n              <Card className=\"spotify-card\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-white text-xl mb-2\">{result.title}</CardTitle>\n                      <div className=\"flex flex-wrap gap-3 text-sm text-muted-foreground\">\n                        {result.author && (\n                          <span className=\"flex items-center gap-1\">\n                            <Users className=\"w-4 h-4\" />\n                            {result.author}\n                          </span>\n                        )}\n                        <Badge variant=\"secondary\" className=\"capitalize\">\n                          {result.platform}\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-white\">{result.popularityScore}</div>\n                      <div className=\"text-xs text-muted-foreground\">Popularity Score</div>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              {/* Metrics Cards */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <Card className=\"spotify-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-white\">Followers</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">\n                      {result.followers ? formatNumber(result.followers) : 'N/A'}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Estimated audience size\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"spotify-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-white\">Engagement Rate</CardTitle>\n                    <Heart className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">\n                      {result.engagement ? `${result.engagement}%` : 'N/A'}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Average interaction rate\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"spotify-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-white\">Est. Market Cap</CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">\n                      {formatCurrency(result.estimatedMarketCap)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Potential initial value\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Earnings Projections */}\n              <Card className=\"spotify-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    Earning Projections\n                  </CardTitle>\n                  <CardDescription>\n                    Based on 4% creator fee from trading volume\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-muted-foreground\">Daily Earnings</span>\n                        <span className=\"text-xl font-bold text-white\">\n                          {formatCurrency(result.estimatedDailyEarnings)}\n                        </span>\n                      </div>\n                      <div className=\"h-2 bg-muted/20 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-primary rounded-full\"\n                          style={{ width: `${Math.min(result.popularityScore, 100)}%` }}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-muted-foreground\">Monthly Earnings</span>\n                        <span className=\"text-xl font-bold text-white\">\n                          {formatCurrency(result.estimatedMonthlyEarnings)}\n                        </span>\n                      </div>\n                      <div className=\"h-2 bg-muted/20 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-primary rounded-full\"\n                          style={{ width: `${Math.min(result.popularityScore, 100)}%` }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <Alert className=\"mt-6 bg-primary/10 border-primary/20\">\n                    <Eye className=\"h-4 w-4 text-primary\" />\n                    <AlertDescription className=\"text-white\">\n                      These are estimated projections. Actual earnings depend on trading activity, \n                      market conditions, and platform growth.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n\n              {/* CTA */}\n              <Card className=\"spotify-card bg-gradient-to-r from-primary/20 to-primary/5 border-primary/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <h3 className=\"text-xl font-bold text-white mb-2\">\n                    Ready to monetize your content?\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Create a coin for this page and start earning from every trade\n                  </p>\n                  <Button \n                    className=\"spotify-button\"\n                    onClick={() => {\n                      setUrl('');\n                      window.location.href = '/create';\n                    }}\n                  >\n                    Create Coin Now\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Empty State */}\n          {!result && !analyzeMutation.isPending && (\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">\n                Analyze Your Social Presence\n              </h3>\n              <p className=\"text-muted-foreground max-w-md mx-auto\">\n                Enter any social media URL above to see estimated earnings potential based on \n                followers, engagement, and platform popularity.\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":15139},"client/src/components/wallet-connect-button.tsx":{"content":"import { usePrivy } from '@privy-io/react-auth';\nimport { Button } from \"@/components/ui/button\";\nimport { Wallet, LogOut } from \"lucide-react\";\n\nexport default function WalletConnectButton() {\n  const { ready, authenticated, login, logout, user } = usePrivy();\n\n  if (!ready) {\n    return (\n      <Button disabled variant=\"outline\" className=\"rounded-xl\">\n        Loading...\n      </Button>\n    );\n  }\n\n  if (authenticated && user) {\n    const address = user.wallet?.address;\n    const displayAddress = address \n      ? `${address.slice(0, 6)}...${address.slice(-4)}`\n      : 'Connected';\n\n    return (\n      <div className=\"flex gap-2 items-center\">\n        <div className=\"text-xs text-muted-foreground hidden sm:block\">\n          {displayAddress}\n        </div>\n        <Button \n          onClick={logout}\n          variant=\"outline\" \n          className=\"rounded-full h-8 px-3 text-sm\"\n        >\n          <LogOut className=\"w-3.5 h-3.5 mr-1.5\" />\n          Disconnect\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Button \n      onClick={login}\n      variant=\"default\"\n      className=\"bg-primary text-primary-foreground hover:bg-primary/90 transition-colors font-semibold text-sm px-3 h-8 whitespace-nowrap rounded-full\"\n      data-testid=\"button-wallet-connect\"\n    >\n      <Wallet className=\"w-3.5 h-3.5 mr-1.5\" />\n      Connect\n    </Button>\n  );\n}","size_bytes":1370},"client/src/lib/pinata.ts":{"content":"export async function uploadToIPFS(metadata: any): Promise<string> {\n  const PINATA_JWT = import.meta.env.VITE_PINATA_JWT;\n\n  console.log(\"PINATA_JWT available:\", !!PINATA_JWT);\n  console.log(\"Environment variables:\", {\n    VITE_PINATA_JWT: !!import.meta.env.VITE_PINATA_JWT,\n    VITE_PINATA_API_KEY: !!import.meta.env.VITE_PINATA_API_KEY,\n    VITE_NEXT_PUBLIC_GATEWAY_URL: !!import.meta.env.VITE_NEXT_PUBLIC_GATEWAY_URL\n  });\n\n  if (!PINATA_JWT) {\n    throw new Error(\"PINATA_JWT not configured. Please ensure VITE_PINATA_JWT is set in your environment variables and accessible to the client.\");\n  }\n\n  try {\n    const response = await fetch(\"https://api.pinata.cloud/pinning/pinJSONToIPFS\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${PINATA_JWT}`,\n      },\n      body: JSON.stringify({\n        pinataContent: metadata,\n        pinataMetadata: {\n          name: `${metadata.title || 'coin'}-metadata`,\n        },\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(`Pinata upload failed: ${response.statusText} - ${JSON.stringify(errorData)}`);\n    }\n\n    const data = await response.json();\n    \n    // Use ipfs:// protocol for Zora contract compatibility\n    // The Zora contract expects native IPFS URIs, not HTTP gateway URLs\n    return `ipfs://${data.IpfsHash}`;\n  } catch (error) {\n    console.error(\"IPFS upload error:\", error);\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error(\"Failed to upload metadata to IPFS\");\n  }\n}\n\nexport async function uploadToPinata(file: File): Promise<string> {\n  const PINATA_JWT = import.meta.env.VITE_PINATA_JWT;\n\n  if (!PINATA_JWT) {\n    throw new Error(\"PINATA_JWT not configured\");\n  }\n\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('pinataMetadata', JSON.stringify({\n      name: file.name,\n    }));\n\n    const response = await fetch(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${PINATA_JWT}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(`Pinata file upload failed: ${response.statusText} - ${JSON.stringify(errorData)}`);\n    }\n\n    const data = await response.json();\n    return data.IpfsHash;\n  } catch (error) {\n    console.error(\"Pinata file upload error:\", error);\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error(\"Failed to upload file to Pinata\");\n  }\n}","size_bytes":2656},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/supabase-storage.ts":{"content":"\nimport pkg from 'pg';\nconst { Pool } = pkg;\nimport { \n  type Coin, type InsertCoin, type UpdateCoin,\n  type ScrapedContent, type InsertScrapedContent,\n  type Reward, type InsertReward,\n  type Creator, type InsertCreator, type UpdateCreator,\n  type Comment, type InsertComment,\n  type Notification, type InsertNotification,\n  type Follow, type InsertFollow,\n  type Referral, type InsertReferral,\n  type LoginStreak, type InsertLoginStreak, type UpdateLoginStreak\n} from '@shared/schema';\n\nconst databaseUrl = process.env.DATABASE_URL!;\n\nconst pool = new Pool({\n  connectionString: databaseUrl,\n  max: 10,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\nexport class SupabaseStorage {\n  // ===== COINS =====\n  async getAllCoins(): Promise<Coin[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM coins ORDER BY created_at DESC');\n      return result.rows as Coin[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getCoin(id: string): Promise<Coin | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM coins WHERE id = $1', [id]);\n      return result.rows[0] as Coin | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getCoinByAddress(address: string): Promise<Coin | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM coins WHERE address = $1', [address]);\n      return result.rows[0] as Coin | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getCoinsByCreator(creator: string): Promise<Coin[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM coins WHERE creator_wallet = $1 ORDER BY created_at DESC',\n        [creator]\n      );\n      return result.rows as Coin[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async createCoin(insertCoin: InsertCoin): Promise<Coin> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO coins (\n          id, name, symbol, address, creator_wallet, status, \n          scraped_content_id, ipfs_uri, chain_id, registry_tx_hash, \n          metadata_hash, registered_at, created_at, image, description\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW(), $12, $13\n        ) RETURNING *`,\n        [\n          insertCoin.name, insertCoin.symbol, insertCoin.address, insertCoin.creator_wallet,\n          insertCoin.status || 'pending', insertCoin.scrapedContentId, insertCoin.ipfsUri,\n          insertCoin.chainId, insertCoin.registryTxHash, insertCoin.metadataHash,\n          insertCoin.registeredAt, insertCoin.image, insertCoin.description\n        ]\n      );\n      return result.rows[0] as Coin;\n    } finally {\n      client.release();\n    }\n  }\n\n  async updateCoin(id: string, update: UpdateCoin): Promise<Coin | undefined> {\n    const client = await pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramCount = 1;\n\n      if (update.address !== undefined) {\n        fields.push(`address = $${paramCount++}`);\n        values.push(update.address);\n      }\n      if (update.status !== undefined) {\n        fields.push(`status = $${paramCount++}`);\n        values.push(update.status);\n      }\n\n      if (fields.length === 0) return this.getCoin(id);\n\n      values.push(id);\n      const result = await client.query(\n        `UPDATE coins SET ${fields.join(', ')} WHERE id = $${paramCount} RETURNING *`,\n        values\n      );\n      return result.rows[0] as Coin | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== SCRAPED CONTENT =====\n  async getScrapedContent(id: string): Promise<ScrapedContent | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM scraped_content WHERE id = $1', [id]);\n      return result.rows[0] as ScrapedContent | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async createScrapedContent(content: InsertScrapedContent): Promise<ScrapedContent> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO scraped_content (\n          id, url, platform, title, description, author, publish_date, \n          image, content, tags, metadata, scraped_at\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW()\n        ) RETURNING *`,\n        [\n          content.url, content.platform || 'blog', content.title, content.description,\n          content.author, content.publishDate, content.image, content.content,\n          JSON.stringify(content.tags || []), JSON.stringify(content.metadata || {})\n        ]\n      );\n      return result.rows[0] as ScrapedContent;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getAllScrapedContent(): Promise<ScrapedContent[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM scraped_content ORDER BY scraped_at DESC');\n      return result.rows as ScrapedContent[];\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== REWARDS =====\n  async getReward(id: string): Promise<Reward | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM rewards WHERE id = $1', [id]);\n      return result.rows[0] as Reward | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async createReward(reward: InsertReward): Promise<Reward> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO rewards (\n          id, type, coin_address, coin_symbol, transaction_hash, \n          reward_amount, reward_currency, recipient_address, created_at\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, $5, $6, $7, NOW()\n        ) RETURNING *`,\n        [\n          reward.type, reward.coinAddress, reward.coinSymbol, reward.transactionHash,\n          reward.rewardAmount, reward.rewardCurrency || 'ZORA', reward.recipientAddress\n        ]\n      );\n      return result.rows[0] as Reward;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getAllRewards(): Promise<Reward[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM rewards ORDER BY created_at DESC');\n      return result.rows as Reward[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getRewardsByCoin(coinAddress: string): Promise<Reward[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM rewards WHERE coin_address = $1 ORDER BY created_at DESC',\n        [coinAddress]\n      );\n      return result.rows as Reward[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getRewardsByRecipient(recipientAddress: string): Promise<Reward[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM rewards WHERE recipient_address = $1 ORDER BY created_at DESC',\n        [recipientAddress]\n      );\n      return result.rows as Reward[];\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== CREATORS =====\n  async getCreator(id: string): Promise<Creator | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM creators WHERE id = $1', [id]);\n      return result.rows[0] as Creator | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getCreatorByAddress(address: string): Promise<Creator | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM creators WHERE address = $1', [address]);\n      return result.rows[0] as Creator | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getCreatorByReferralCode(referralCode: string): Promise<Creator | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM creators WHERE referral_code = $1', [referralCode]);\n      return result.rows[0] as Creator | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async createCreator(creator: InsertCreator): Promise<Creator> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO creators (\n          id, address, name, bio, avatar, verified, total_coins, \n          total_volume, followers, referral_code, points, created_at, updated_at\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW()\n        ) RETURNING *`,\n        [\n          creator.address, creator.name, creator.bio, creator.avatar,\n          creator.verified || 'false', creator.totalCoins || '0',\n          creator.totalVolume || '0', creator.followers || '0',\n          creator.referralCode || null, creator.points || '0'\n        ]\n      );\n      return result.rows[0] as Creator;\n    } finally {\n      client.release();\n    }\n  }\n\n  async updateCreator(id: string, update: UpdateCreator): Promise<Creator | undefined> {\n    const client = await pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramCount = 1;\n\n      if (update.name !== undefined) {\n        fields.push(`name = $${paramCount++}`);\n        values.push(update.name);\n      }\n      if (update.bio !== undefined) {\n        fields.push(`bio = $${paramCount++}`);\n        values.push(update.bio);\n      }\n      if (update.avatar !== undefined) {\n        fields.push(`avatar = $${paramCount++}`);\n        values.push(update.avatar);\n      }\n      if (update.verified !== undefined) {\n        fields.push(`verified = $${paramCount++}`);\n        values.push(update.verified);\n      }\n      if (update.totalCoins !== undefined) {\n        fields.push(`total_coins = $${paramCount++}`);\n        values.push(update.totalCoins);\n      }\n      if (update.totalVolume !== undefined) {\n        fields.push(`total_volume = $${paramCount++}`);\n        values.push(update.totalVolume);\n      }\n      if (update.followers !== undefined) {\n        fields.push(`followers = $${paramCount++}`);\n        values.push(update.followers);\n      }\n      if (update.referralCode !== undefined) {\n        fields.push(`referral_code = $${paramCount++}`);\n        values.push(update.referralCode);\n      }\n      if (update.points !== undefined) {\n        fields.push(`points = $${paramCount++}`);\n        values.push(update.points);\n      }\n\n      if (fields.length === 0) return this.getCreator(id);\n\n      fields.push(`updated_at = NOW()`);\n      values.push(id);\n\n      const result = await client.query(\n        `UPDATE creators SET ${fields.join(', ')} WHERE id = $${paramCount} RETURNING *`,\n        values\n      );\n      return result.rows[0] as Creator | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getAllCreators(): Promise<Creator[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM creators ORDER BY created_at DESC');\n      return result.rows as Creator[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getTopCreators(): Promise<Creator[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM creators ORDER BY total_coins DESC LIMIT 10'\n      );\n      return result.rows as Creator[];\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== COMMENTS =====\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO comments (\n          id, coin_address, user_address, comment, transaction_hash, created_at\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, NOW()\n        ) RETURNING *`,\n        [comment.coinAddress, comment.userAddress, comment.comment, comment.transactionHash]\n      );\n      return result.rows[0] as Comment;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getCommentsByCoin(coinAddress: string): Promise<Comment[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM comments WHERE coin_address = $1 ORDER BY created_at DESC',\n        [coinAddress]\n      );\n      return result.rows as Comment[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getAllComments(): Promise<Comment[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('SELECT * FROM comments ORDER BY created_at DESC');\n      return result.rows as Comment[];\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== NOTIFICATIONS =====\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO notifications (\n          id, user_id, type, title, message, coin_address, coin_symbol, \n          amount, transaction_hash, read, created_at\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, $5, $6, $7, $8, false, NOW()\n        ) RETURNING *`,\n        [\n          notification.userId, notification.type, notification.title, notification.message,\n          notification.coinAddress, notification.coinSymbol, notification.amount,\n          notification.transactionHash\n        ]\n      );\n      return result.rows[0] as Notification;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM notifications WHERE user_id = $1 ORDER BY created_at DESC',\n        [userId]\n      );\n      return result.rows as Notification[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getUnreadNotificationsByUser(userId: string): Promise<Notification[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM notifications WHERE user_id = $1 AND read = false ORDER BY created_at DESC',\n        [userId]\n      );\n      return result.rows as Notification[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'UPDATE notifications SET read = true WHERE id = $1 RETURNING *',\n        [id]\n      );\n      return result.rows[0] as Notification | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    const client = await pool.connect();\n    try {\n      await client.query('UPDATE notifications SET read = true WHERE user_id = $1', [userId]);\n    } finally {\n      client.release();\n    }\n  }\n\n  async deleteNotification(id: string): Promise<boolean> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query('DELETE FROM notifications WHERE id = $1', [id]);\n      return (result.rowCount || 0) > 0;\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== FOLLOWS =====\n  async createFollow(insertFollow: InsertFollow): Promise<Follow> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO follows (id, follower_address, following_address, created_at)\n         VALUES (gen_random_uuid()::text, $1, $2, NOW())\n         RETURNING *`,\n        [insertFollow.followerAddress, insertFollow.followingAddress]\n      );\n      return result.rows[0] as Follow;\n    } finally {\n      client.release();\n    }\n  }\n\n  async deleteFollow(followerAddress: string, followingAddress: string): Promise<boolean> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'DELETE FROM follows WHERE follower_address = $1 AND following_address = $2',\n        [followerAddress, followingAddress]\n      );\n      return (result.rowCount || 0) > 0;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getFollowers(userAddress: string): Promise<Follow[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM follows WHERE following_address = $1 ORDER BY created_at DESC',\n        [userAddress]\n      );\n      return result.rows as Follow[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getFollowing(userAddress: string): Promise<Follow[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM follows WHERE follower_address = $1 ORDER BY created_at DESC',\n        [userAddress]\n      );\n      return result.rows as Follow[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async isFollowing(followerAddress: string, followingAddress: string): Promise<boolean> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT 1 FROM follows WHERE follower_address = $1 AND following_address = $2',\n        [followerAddress, followingAddress]\n      );\n      return result.rows.length > 0;\n    } finally {\n      client.release();\n    }\n  }\n\n  // ===== REFERRALS =====\n  async createReferral(insertReferral: InsertReferral): Promise<Referral> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO referrals (\n          id, referrer_address, referred_address, referral_code, \n          points_earned, claimed, created_at\n        ) VALUES (\n          gen_random_uuid()::text, $1, $2, $3, $4, true, NOW()\n        ) RETURNING *`,\n        [\n          insertReferral.referrerAddress,\n          insertReferral.referredAddress,\n          insertReferral.referralCode,\n          insertReferral.pointsEarned || '100'\n        ]\n      );\n      return result.rows[0] as Referral;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getReferralsByReferrer(referrerAddress: string): Promise<Referral[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM referrals WHERE referrer_address = $1 ORDER BY created_at DESC',\n        [referrerAddress]\n      );\n      return result.rows as Referral[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getReferralsByCode(referralCode: string): Promise<Referral[]> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM referrals WHERE referral_code = $1 ORDER BY created_at DESC',\n        [referralCode]\n      );\n      return result.rows as Referral[];\n    } finally {\n      client.release();\n    }\n  }\n\n  async getReferralByAddresses(referrerAddress: string, referredAddress: string): Promise<Referral | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM referrals WHERE referrer_address = $1 AND referred_address = $2',\n        [referrerAddress, referredAddress]\n      );\n      return result.rows[0] as Referral | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getLoginStreak(userAddress: string): Promise<LoginStreak | undefined> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        'SELECT * FROM login_streaks WHERE user_address = $1',\n        [userAddress]\n      );\n      return result.rows[0] as LoginStreak | undefined;\n    } finally {\n      client.release();\n    }\n  }\n\n  async createLoginStreak(insertLoginStreak: InsertLoginStreak): Promise<LoginStreak> {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\n        `INSERT INTO login_streaks (\n          user_address, current_streak, longest_streak, last_login_date, \n          total_points, login_dates\n        ) VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *`,\n        [\n          insertLoginStreak.userAddress,\n          insertLoginStreak.currentStreak || '0',\n          insertLoginStreak.longestStreak || '0',\n          insertLoginStreak.lastLoginDate || null,\n          insertLoginStreak.totalPoints || '0',\n          JSON.stringify(insertLoginStreak.loginDates || [])\n        ]\n      );\n      return result.rows[0] as LoginStreak;\n    } finally {\n      client.release();\n    }\n  }\n\n  async updateLoginStreak(userAddress: string, update: UpdateLoginStreak): Promise<LoginStreak | undefined> {\n    const client = await pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (update.currentStreak !== undefined) {\n        fields.push(`current_streak = $${paramIndex++}`);\n        values.push(update.currentStreak);\n      }\n      if (update.longestStreak !== undefined) {\n        fields.push(`longest_streak = $${paramIndex++}`);\n        values.push(update.longestStreak);\n      }\n      if (update.lastLoginDate !== undefined) {\n        fields.push(`last_login_date = $${paramIndex++}`);\n        values.push(update.lastLoginDate);\n      }\n      if (update.totalPoints !== undefined) {\n        fields.push(`total_points = $${paramIndex++}`);\n        values.push(update.totalPoints);\n      }\n      if (update.loginDates !== undefined) {\n        fields.push(`login_dates = $${paramIndex++}`);\n        values.push(JSON.stringify(update.loginDates));\n      }\n      \n      fields.push(`updated_at = NOW()`);\n      values.push(userAddress);\n\n      const result = await client.query(\n        `UPDATE login_streaks SET ${fields.join(', ')} WHERE user_address = $${paramIndex} RETURNING *`,\n        values\n      );\n      return result.rows[0] as LoginStreak | undefined;\n    } finally {\n      client.release();\n    }\n  }\n}\n","size_bytes":22042},"VERCEL_DEPLOY.md":{"content":"# Vercel Deployment Guide\n\n## Prerequisites\n- Vercel account\n- Environment variables configured\n\n## Required Environment Variables\n\n### Client-side (must start with VITE_)\n```\nVITE_PINATA_JWT=your_pinata_jwt_token\nVITE_NEXT_PUBLIC_ZORA_API_KEY=your_zora_api_key\nVITE_WALLETCONNECT_PROJECT_ID=your_walletconnect_project_id\n```\n\n### Optional Client-side\n```\nVITE_ALCHEMY_API_KEY=your_alchemy_api_key\nVITE_ZORA_RPC_URL=your_custom_rpc_url\nVITE_ADMIN_REFERRAL_ADDRESS=your_admin_wallet_address\n```\n\n### Optional Server-side\n```\nTELEGRAM_BOT_TOKEN=your_telegram_bot_token\nDATABASE_URL=your_neon_postgres_url\n```\n\n## Deployment Steps\n\n1. **Install Vercel CLI** (optional, for CLI deployment)\n   ```bash\n   npm install -g vercel\n   ```\n\n2. **Deploy via Vercel Dashboard**\n   - Push your code to GitHub/GitLab/Bitbucket\n   - Import project in Vercel dashboard\n   - Add environment variables in Vercel project settings\n   - Vercel will auto-deploy\n\n3. **Deploy via CLI**\n   ```bash\n   vercel\n   ```\n   - Follow prompts to link project\n   - Add environment variables via `vercel env add`\n\n## Important Notes\n\n- **Telegram Bot**: The Telegram bot functionality uses polling which doesn't work well with Vercel's serverless architecture. Consider disabling or using webhooks instead.\n- **WebSockets**: The `ws` package for WebSocket support won't work on Vercel. Consider using alternatives like Pusher or Ably for real-time features.\n- **Database**: Make sure to use a serverless-friendly database like Neon PostgreSQL with the `@neondatabase/serverless` driver.\n- **Migrations**: Auto-migrations are disabled in production to avoid cold start delays. Run migrations manually using `npm run db:push` before deploying.\n- **Build Time**: First deployment may take 5-10 minutes due to dependency installation.\n\n## Vercel Configuration\n\nThe project includes:\n- `vercel.json` - Deployment configuration\n- `api/index.ts` - Serverless function wrapper for Express app\n- `.vercelignore` - Files to exclude from deployment\n\n## Post-Deployment\n\nAfter deployment:\n1. Verify environment variables are set correctly\n2. Test API endpoints: `https://your-app.vercel.app/api/coins`\n3. Check frontend functionality\n4. Monitor Vercel function logs for any errors\n\n## Troubleshooting\n\n- **Build Failures**: Check build logs in Vercel dashboard\n- **Environment Variables**: Ensure all required variables are set and start with `VITE_` for client-side\n- **API Errors**: Check Vercel function logs\n- **Database Connection**: Verify DATABASE_URL is correct and accessible\n\n## Alternative: Deploy Backend Separately\n\nIf you encounter issues with the serverless architecture, consider:\n1. Deploy frontend to Vercel\n2. Deploy backend to a platform that supports long-running processes (Railway, Render, Fly.io)\n3. Update API URLs in frontend to point to separate backend\n","size_bytes":2834},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-xl border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/coin-card.tsx":{"content":"\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport {\n  ExternalLink,\n  Calendar,\n  User,\n  Coins,\n  Copy,\n  Check,\n  TrendingUp,\n  Play,\n} from \"lucide-react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { parseEther, formatEther } from \"viem\";\nimport { useAccount, usePublicClient, useWalletClient } from \"wagmi\";\nimport { getCoin, getCoinHolders } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport TradeModal from \"@/components/trade-modal\";\nimport MobileTradeModal from \"@/components/mobile-trade-modal\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport \"@/lib/zora\";\nimport { createAvatar } from \"@dicebear/core\";\nimport { avataaars } from \"@dicebear/collection\";\nimport { cn, formatSmartCurrency } from \"@/lib/utils\";\nimport { useTour } from \"@/hooks/use-tour\";\n\nconst GATEWAY_URLS = [\"gateway.pinata.cloud\", \"dweb.link\", \"ipfs.io\"];\n\ninterface CoinStatsIconsProps {\n  price?: string | null;\n  marketCap?: string | null;\n  volume24h?: string | null;\n  uniqueHolders?: number | null;\n  earnings?: string | null;\n}\n\nfunction CoinStatsIcons({\n  price,\n  marketCap,\n  volume24h,\n  uniqueHolders,\n  earnings,\n}: CoinStatsIconsProps) {\n  return (\n    <div className=\"grid grid-cols-2 gap-2 text-xs\">\n      {price && (\n        <div className=\"flex items-center gap-1\">\n          <TrendingUp className=\"h-3 w-3 text-green-600\" />\n          <span className=\"text-gray-600\">Price:</span>\n          <span className=\"font-semibold\">${price}</span>\n        </div>\n      )}\n      {marketCap && (\n        <div className=\"flex items-center gap-1\">\n          <Coins className=\"h-3 w-3 text-blue-600\" />\n          <span className=\"text-gray-600\">MCap:</span>\n          <span className=\"font-semibold\">${marketCap}</span>\n        </div>\n      )}\n      {volume24h && (\n        <div className=\"flex items-center gap-1\">\n          <Calendar className=\"h-3 w-3 text-purple-600\" />\n          <span className=\"text-gray-600\">Vol:</span>\n          <span className=\"font-semibold\">${volume24h}</span>\n        </div>\n      )}\n      {uniqueHolders && (\n        <div className=\"flex items-center gap-1\">\n          <User className=\"h-3 w-3 text-orange-600\" />\n          <span className=\"text-gray-600\">Holders:</span>\n          <span className=\"font-semibold\">{uniqueHolders}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface CoinCardProps {\n  coin: {\n    id: string;\n    name: string;\n    symbol: string;\n    address: string;\n    creator?: string;\n    creator_wallet?: string;\n    createdAt: string;\n    metadata?: {\n      title?: string;\n      description?: string;\n      image?: string;\n      originalUrl?: string;\n      author?: string;\n      animation_url?: string; // Ensure animation_url is present\n    };\n    ipfsUri?: string;\n    image?: string;\n    description?: string;\n  };\n  isOwnCoin?: boolean;\n  className?: string;\n  handleCardClick?: () => void;\n  isTourActive?: boolean;\n  tourStep?: number;\n}\n\nexport default function CoinCard({\n  coin,\n  isOwnCoin = false,\n  className,\n  handleCardClick,\n  isTourActive = false,\n  tourStep,\n}: CoinCardProps) {\n  const isMobile = useIsMobile();\n  const [copied, setCopied] = useState(false);\n  const [tradeDialogOpen, setTradeDialogOpen] = useState(false);\n  const [marketCap, setMarketCap] = useState<string | null>(null);\n  const [volume24h, setVolume24h] = useState<string | null>(null);\n  const [uniqueHolders, setUniqueHolders] = useState<number | null>(null);\n  const [creatorEarnings, setCreatorEarnings] = useState<Array<{\n    amount: {\n      currencyAddress: string;\n      amountRaw: string;\n      amountDecimal: number;\n    };\n    amountUsd?: string;\n  }> | null>(null);\n  const [coinImage, setCoinImage] = useState<string | null>(null);\n  const [imageLoadError, setImageLoadError] = useState(false);\n  const [gatewayIndex, setGatewayIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [creatorAvatar, setCreatorAvatar] = useState<string | null>(null); // State to store the creator's avatar URL\n  const [localCoin, setLocalCoin] = useState(coin); // State to hold the coin data, including updated stats\n  const { currentStep, nextStep } = useTour();\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  // Determine if this is audio or video content\n  // Check all possible sources for media type including metadata\n  const allImageSources = [\n    coin.metadata?.image,\n    coin.image,\n    coinImage,\n    coin.ipfsUri,\n    coin.metadata?.animation_url,\n  ].filter(Boolean);\n\n  const isAudioContent = allImageSources.some(\n    (src) => src?.match(/\\.(mp3|wav|ogg|m4a)$/i) || src?.includes(\"spotify\"),\n  );\n  const isVideoContent =\n    allImageSources.some((src) => src?.match(/\\.(mp4|webm|mov|avi)$/i)) ||\n    coin.metadata?.animation_url?.match(/\\.(mp4|webm|mov|avi)$/i);\n\n  // Effect to update localCoin when the prop changes\n  useEffect(() => {\n    setLocalCoin(coin);\n  }, [coin]);\n\n  useEffect(() => {\n    if (!coin.address) return;\n\n    let isMounted = true;\n\n    async function fetchCoinStats() {\n      try {\n        const { getCoin } = await import(\"@zoralabs/coins-sdk\");\n        const { base } = await import(\"viem/chains\");\n\n        const zoraCoinResult = await getCoin({\n          address: coin.address as `0x${string}`,\n          chain: base.id,\n        });\n\n        if (!isMounted) return;\n\n        const zoraCoin = zoraResult.data?.zora20Token;\n\n        if (zoraCoin) {\n          // Calculate estimated creator earnings from total volume (already in USD)\n          // Creator gets 50% of 1% total fees = 0.5% of trading volume\n          const totalVolumeUSD = parseFloat(zoraCoin.totalVolume || \"0\");\n          const estimatedCreatorEarningsUSD = totalVolumeUSD * 0.005; // 0.5% of volume\n\n          console.log(\n            `💰 ${coin.name} - Total Volume: $${zoraCoin.totalVolume}, Creator Earnings: $${estimatedCreatorEarningsUSD.toFixed(2)}`,\n          );\n\n          // Update coin data with blockchain stats, ensuring createdAt is properly set\n          const coinData = {\n            ...coin,\n            totalSupply: zoraCoin.totalSupply || coin.totalSupply,\n            marketCap: zoraCoin.marketCap || coin.marketCap,\n            volume24h: zoraCoin.volume24h || coin.volume24h,\n            holders: zoraCoin.holderCount || coin.holders,\n            priceUsd: zoraCoin.priceUsd || coin.priceUsd,\n            // Ensure we always have a valid createdAt date\n            createdAt: coin.createdAt || zoraCoin.createdAt || new Date().toISOString(),\n            // Add estimated creator earnings based on total volume (in USD)\n            totalVolume: zoraCoin.totalVolume || \"0\",\n            creatorEarningsUSD: estimatedCreatorEarningsUSD,\n            metadata: {\n              ...coin.metadata,\n              ...zoraCoin.metadata,\n            },\n          };\n\n          setLocalCoin(coinData);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch coin stats:\", error);\n      }\n    }\n\n    fetchCoinStats();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [coin.address]);\n\n  // Use React Query to fetch creator data with proper caching\n  const { data: creatorData } = useQuery({\n    queryKey: [\"/api/creators/address\", coin.creator_wallet],\n    queryFn: async () => {\n      if (!coin.creator_wallet) return null;\n      const response = await fetch(\n        `/api/creators/address/${coin.creator_wallet}`,\n      );\n      if (!response.ok) return null;\n      return response.json();\n    },\n    enabled: !!coin.creator_wallet && open,\n  });\n\n  // Update creator avatar when creator data changes\n  useEffect(() => {\n    if (creatorData?.avatar) {\n      setCreatorAvatar(creatorData.avatar);\n    }\n  }, [creatorData]);\n\n  useEffect(() => {\n    let isMounted = true;\n    async function fetchCoinStats() {\n      if (!coin.address) {\n        console.warn(\n          `⚠️ No address for coin ${coin.name}, skipping stats fetch`,\n        );\n        return;\n      }\n\n      try {\n        console.log(\n          `📊 Fetching real stats for ${coin.name} (${coin.address})...`,\n        );\n\n        // Use Zora SDK getCoin to get all stats\n        const coinResponse = await getCoin({\n          address: coin.address as `0x${string}`,\n          chain: base.id,\n        });\n\n        const coinData = coinResponse.data?.zora20Token;\n\n        if (!isMounted) return;\n\n        if (!coinData) {\n          console.warn(`⚠️ No data returned from Zora API for ${coin.name}`);\n          return;\n        }\n\n        console.log(`✅ Real stats loaded for ${coin.name}:`, {\n          marketCap: coinData.marketCap,\n          volume24h: coinData.volume24h,\n          uniqueHolders: coinData.uniqueHolders,\n          creatorEarnings: coinData.creatorEarnings,\n          totalSupply: coinData.totalSupply,\n          creatorAddress: coinData.creatorAddress,\n          fullEarningsData: JSON.stringify(coinData.creatorEarnings, null, 2),\n        });\n\n        // Set market cap - handle both string and number\n        if (coinData.marketCap !== null && coinData.marketCap !== undefined) {\n          const mcValue =\n            typeof coinData.marketCap === \"string\"\n              ? parseFloat(coinData.marketCap)\n              : coinData.marketCap;\n          setMarketCap(mcValue.toFixed(2));\n        } else {\n          setMarketCap(null);\n        }\n\n        // Set 24h volume - handle both string and number, ensure we show real data\n        if (coinData.volume24h !== null && coinData.volume24h !== undefined) {\n          const volValue =\n            typeof coinData.volume24h === \"string\"\n              ? parseFloat(coinData.volume24h)\n              : coinData.volume24h;\n          // Only set if we have a valid number\n          if (!isNaN(volValue)) {\n            setVolume24h(volValue.toFixed(2));\n          } else {\n            setVolume24h(\"0\");\n          }\n        } else {\n          setVolume24h(\"0\");\n        }\n\n        // Fetch real-time holder count using getCoinHolders for accuracy\n        try {\n          const { getCoinHolders } = await import(\"@zoralabs/coins-sdk\");\n          const holdersResponse = await getCoinHolders({\n            address: coin.address as `0x${string}`,\n            chainId: base.id,\n            first: 100, // Fetch up to 100 holders to get accurate count\n          });\n\n          const holderBalances =\n            holdersResponse.data?.zora20Token?.holderBalances?.edges || [];\n\n          // Count unique holders with non-zero balance\n          const actualHolderCount = holderBalances.filter((edge: any) => {\n            const balance = parseFloat(edge.node.balance || \"0\");\n            return balance > 0;\n          }).length;\n\n          if (!isMounted) return;\n\n          // Use real-time holder count, fallback to coinData.uniqueHolders if needed\n          if (actualHolderCount > 0) {\n            setUniqueHolders(actualHolderCount);\n          } else if (\n            coinData.uniqueHolders !== null &&\n            coinData.uniqueHolders !== undefined\n          ) {\n            setUniqueHolders(Number(coinData.uniqueHolders));\n          } else {\n            setUniqueHolders(null);\n          }\n        } catch (holdersError) {\n          console.error(\"Error fetching holders:\", holdersError);\n\n          // Fallback to uniqueHolders from getCoin if holder fetch fails\n          if (!isMounted) return;\n\n          if (\n            coinData.uniqueHolders !== null &&\n            coinData.uniqueHolders !== undefined\n          ) {\n            setUniqueHolders(Number(coinData.uniqueHolders));\n          } else {\n            setUniqueHolders(null);\n          }\n        }\n\n        // Set creator earnings - properly extract USD value\n        if (\n          coinData.creatorEarnings &&\n          Array.isArray(coinData.creatorEarnings) &&\n          coinData.creatorEarnings.length > 0\n        ) {\n          const earnings = coinData.creatorEarnings[0];\n\n          // Try multiple ways to get the USD value\n          let earningsUsd = null;\n\n          if (earnings.amountUsd) {\n            earningsUsd = earnings.amountUsd;\n          } else if (earnings.amount?.amountDecimal) {\n            // If no USD value, use the decimal amount (this is in ZORA tokens)\n            earningsUsd = earnings.amount.amountDecimal.toString();\n          } else if (earnings.amount?.amountRaw) {\n            // Convert from wei to decimal if needed (18 decimals for ZORA)\n            const rawAmount = BigInt(earnings.amount.amountRaw);\n            earningsUsd = (Number(rawAmount) / 1e18).toString();\n          }\n\n          console.log(\"Creator earnings for\", coin.name, \":\", {\n            raw: earnings,\n            parsedUsd: earningsUsd,\n          });\n\n          if (earningsUsd && parseFloat(earningsUsd) > 0) {\n            setCreatorEarnings([\n              {\n                amount: earnings.amount,\n                amountUsd: earningsUsd,\n              },\n            ]);\n          } else {\n            setCreatorEarnings(null);\n          }\n        } else {\n          setCreatorEarnings(null);\n        }\n\n        // Set coin image from Zora's CDN\n        if (coinData.mediaContent?.previewImage) {\n          const previewImage = coinData.mediaContent.previewImage as any;\n          const imageUrl = previewImage.medium || previewImage.small || null;\n          if (imageUrl) {\n            setCoinImage(imageUrl);\n          }\n        } else if (coin.image) {\n          setCoinImage(coin.image);\n        } else if (coin.metadata?.image) {\n          setCoinImage(coin.metadata.image);\n        }\n      } catch (error: any) {\n        if (!isMounted) return;\n        console.error(\n          `❌ Failed to fetch stats for ${coin.name}:`,\n          error?.message || error,\n        );\n\n        // Set fallback image on error\n        if (coin.image) {\n          setCoinImage(coin.image);\n        } else if (coin.metadata?.image) {\n          setCoinImage(coin.metadata.image);\n        }\n      }\n    }\n\n    if (typeof window !== \"undefined\" && coin.address) {\n      fetchCoinStats();\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [coin.address, coin.name, coin.image, coin.metadata?.image]);\n\n  const getImageSrc = (imageUrl?: string, gatewayIdx: number = 0) => {\n    if (!imageUrl) return null;\n    if (imageUrl.startsWith(\"ipfs://\")) {\n      const hash = imageUrl.replace(\"ipfs://\", \"\");\n      return `https://${GATEWAY_URLS[gatewayIdx]}/ipfs/${hash}`;\n    }\n    if (imageUrl.includes(\"yellow-patient-cheetah-559.mypinata.cloud\")) {\n      const hash = imageUrl.split(\"/ipfs/\")[1];\n      if (hash) {\n        return `https://${GATEWAY_URLS[gatewayIdx]}/ipfs/${hash}`;\n      }\n    }\n    return imageUrl;\n  };\n\n  const getCurrentImageSrc = () => {\n    if (isVideoContent || isAudioContent) {\n      return getImageSrc(coin.metadata?.image || coin.image, gatewayIndex);\n    }\n\n    if (!imageLoadError && coinImage) {\n      return coinImage;\n    }\n    return getImageSrc(coin.image || coin.metadata?.image, gatewayIndex);\n  };\n\n  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    if (gatewayIndex < GATEWAY_URLS.length - 1) {\n      console.warn(\n        `IPFS gateway ${GATEWAY_URLS[gatewayIndex]} failed, trying ${GATEWAY_URLS[gatewayIndex + 1]}...`,\n      );\n      setGatewayIndex(gatewayIndex + 1);\n    } else if (!imageLoadError) {\n      setImageLoadError(true);\n      if (coinImage) {\n        console.warn(\"Zora API image failed to load, falling back to IPFS:\", {\n          failedSrc: e.currentTarget.src,\n          coin: coin.name,\n        });\n        setGatewayIndex(0);\n      } else {\n        console.error(\"All image sources failed to load:\", {\n          src: e.currentTarget.src,\n          alt: e.currentTarget.alt,\n          coin: coin.name,\n        });\n      }\n    }\n  };\n\n  const handleCardClickWrapper = (e?: React.MouseEvent) => {\n    if (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isTourActive && currentStep === tourStep) {\n      nextStep();\n    } else if (handleCardClick) {\n      handleCardClick();\n    } else if (!isOwnCoin) {\n      setTradeDialogOpen(true);\n    }\n  };\n\n  const handleCardPointerDown = (e: React.PointerEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  return (\n    <Card\n      onClick={handleCardClickWrapper}\n      data-coin-card\n      className={cn(\n        \"group relative overflow-hidden rounded-3xl border-border/50 bg-card cursor-pointer transition-all duration-300 hover:shadow-xl hover:shadow-primary/10 hover:-translate-y-1\",\n        className\n      )}\n      onPointerDown={handleCardPointerDown}\n      data-tour-step={tourStep}\n      data-tour-target={\n        isTourActive && currentStep === tourStep ? \"coin-card\" : undefined\n      }\n    >\n      <div\n        className={`relative w-full aspect-square bg-gradient-to-br from-muted/20 to-muted/10 overflow-hidden ${!isOwnCoin ? \"cursor-pointer hover:opacity-90 transition-opacity\" : \"\"}`}\n      >\n        <div className=\"absolute top-1.5 right-1.5 flex items-center gap-0.5 rounded px-1.5 py-0.5 z-10\">\n          <span className=\"text-[8px] text-muted-foreground font-medium\">\n            {localCoin.createdAt && !isNaN(new Date(localCoin.createdAt).getTime())\n              ? new Date(localCoin.createdAt).toLocaleDateString(\"en-US\", {\n                  month: \"short\",\n                  day: \"numeric\",\n                })\n              : new Date().toLocaleDateString(\"en-US\", {\n                  month: \"short\",\n                  day: \"numeric\",\n                })}\n          </span>\n        </div>\n        {isAudioContent && coin.metadata?.animation_url && (\n          <div className=\"absolute inset-0 flex items-center justify-center p-4\">\n            <audio\n              src={coin.metadata.animation_url}\n              className=\"w-full\"\n              controls\n            />\n          </div>\n        )}\n        {isVideoContent && !isAudioContent && coin.metadata?.animation_url && (\n          <video\n            src={coin.metadata.animation_url}\n            className=\"w-full h-full object-cover\"\n            controls\n            playsInline\n            onError={(e) => {\n              console.log(\"Video failed to load:\", e.currentTarget.src);\n              handleImageError(e as any);\n            }}\n            data-testid={`video-coin-${coin.address}`}\n          />\n        )}\n        {!isVideoContent && !isAudioContent && getCurrentImageSrc() ? (\n          <img\n            key={`${coin.address}-${getCurrentImageSrc()}`}\n            src={getCurrentImageSrc() || \"\"}\n            alt={localCoin.metadata?.title || localCoin.name}\n            className=\"w-full h-full object-cover\"\n            onError={handleImageError}\n            data-testid={`img-coin-${coin.address}`}\n          />\n        ) : (\n          !isAudioContent && (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <Coins className=\"w-8 h-8 text-primary/40\" />\n            </div>\n          )\n        )}\n\n        {(isAudioContent || isVideoContent) && (\n          <div className=\"absolute top-2 left-2 bg-black/60 backdrop-blur-sm rounded-full p-2 hover:bg-black/80 transition-colors z-10\">\n            <Play className=\"w-4 h-4 text-white fill-white\" />\n          </div>\n        )}\n      </div>\n\n      {!isOwnCoin &&\n        (isMobile ? (\n          <MobileTradeModal\n            coin={coin as any}\n            open={tradeDialogOpen}\n            onOpenChange={setTradeDialogOpen}\n          />\n        ) : (\n          <TradeModal\n            coin={coin as any}\n            open={tradeDialogOpen}\n            onOpenChange={setTradeDialogOpen}\n          />\n        ))}\n\n      <div className=\"p-2 space-y-1.5 flex-1 flex flex-col\">\n        <div className=\"flex-1 flex items-start justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-xs truncate text-foreground\">\n              {localCoin.name}\n            </h3>\n            <p className=\"text-[10px] text-muted-foreground truncate\">\n              {localCoin.symbol}\n            </p>\n          </div>\n          <div className=\"flex items-center gap-1 ml-1\">\n            <div\n              className=\"flex items-center gap-1\"\n              title={localCoin.creator_wallet || localCoin.creator || \"Unknown\"}\n            >\n              <img\n                src={\n                  creatorAvatar ||\n                  createAvatar(avataaars, {\n                    seed:\n                      localCoin.creator_wallet ||\n                      localCoin.creator ||\n                      \"default\",\n                    size: 14,\n                  }).toDataUri()\n                }\n                alt={`${localCoin.creator_wallet || localCoin.creator || \"Creator\"} avatar`}\n                className=\"w-3.5 h-3.5 rounded-full object-cover\"\n                onError={(e) => {\n                  // Only fallback to dicebear if the custom avatar fails AND we haven't already set a fallback\n                  if (creatorAvatar) {\n                    const fallback = createAvatar(avataaars, {\n                      seed:\n                        localCoin.creator_wallet ||\n                        localCoin.creator ||\n                        \"default\",\n                      size: 14,\n                    }).toDataUri();\n                    e.currentTarget.src = fallback;\n                    setCreatorAvatar(null);\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-1 pt-1.5 border-t border-border/50\">\n          <div className=\"flex items-center justify-between text-[10px]\">\n            <div className=\"flex items-center gap-0.5\">\n              <TrendingUp className=\"h-2.5 w-2.5 text-green-500\" />\n              <span className=\"text-muted-foreground\">MC:</span>\n              <span className=\"font-semibold text-foreground\">\n                {marketCap && typeof marketCap === 'string'\n                  ? `$${parseFloat(marketCap).toLocaleString(\"en-US\", { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`\n                  : typeof marketCap === 'number'\n                  ? `$${marketCap.toLocaleString(\"en-US\", { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`\n                  : \"$0\"}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-0.5\">\n              <TrendingUp className=\"h-2.5 w-2.5 text-green-500\" />\n              <span className=\"text-muted-foreground\">Earn:</span>\n              <span className=\"font-semibold text-foreground\">\n                {formatSmartCurrency(\n                  typeof (localCoin as any).creatorEarningsUSD === 'number' \n                    ? (localCoin as any).creatorEarningsUSD \n                    : parseFloat((localCoin as any).creatorEarningsUSD || 0) || 0\n                )}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between text-[10px]\">\n            <div className=\"flex items-center gap-0.5\">\n              <TrendingUp className=\"h-2.5 w-2.5 text-purple-500\" />\n              <span className=\"text-muted-foreground\">Vol:</span>\n              <span className=\"font-semibold text-foreground\">\n                {volume24h && typeof volume24h === 'string' && parseFloat(volume24h) > 0\n                  ? `$${parseFloat(volume24h).toLocaleString(\"en-US\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`\n                  : typeof volume24h === 'number' && volume24h > 0\n                  ? `$${volume24h.toLocaleString(\"en-US\", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`\n                  : \"$0.00\"}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-0.5\">\n              <User className=\"h-2.5 w-2.5 text-orange-500\" />\n              <span className=\"font-semibold text-foreground\">\n                {uniqueHolders !== null && uniqueHolders !== undefined ? uniqueHolders : \"0\"}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":24193},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/channels.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Layout from \"@/components/layout\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport TradeModal from \"@/components/trade-modal\";\nimport CreateCoinModal from \"@/components/create-coin-modal\";\nimport {\n  Hash,\n  TrendingUp,\n  Users,\n  Search,\n  Filter,\n  Plus,\n  Clock,\n  DollarSign,\n  Globe,\n  CoinsIcon,\n  PenTool,\n  Music,\n} from \"lucide-react\";\nimport { SiYoutube, SiFarcaster, SiTiktok, SiInstagram, SiMedium, SiX } from \"react-icons/si\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface Channel {\n  id: string;\n  name: string;\n  creator: string;\n  image: string;\n  marketCap: string;\n  price: string;\n  holders: number;\n  timeAgo: string;\n  priceChange: number;\n  address: string;\n  symbol: string;\n}\n\nexport default function Channels() {\n  const [location, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [tradeModalOpen, setTradeModalOpen] = useState(false);\n  const [selectedChannel, setSelectedChannel] = useState<Channel | null>(null);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Extract search parameter from URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.split(\"?\")[1] || \"\");\n    const searchParam = urlParams.get(\"search\");\n    if (searchParam) {\n      setSearchTerm(searchParam);\n    }\n  }, [location]);\n\n  const categories = [\n    { id: \"all\", name: \"All\", icon: Globe },\n    { id: \"youtube\", name: \"YouTube\", icon: SiYoutube },\n    { id: \"farcaster\", name: \"Farcaster\", icon: SiFarcaster },\n    { id: \"gitcoin\", name: \"Gitcoin\", icon: CoinsIcon },\n    { id: \"music\", name: \"Music\", icon: Music },\n    { id: \"tiktok\", name: \"TikTok\", icon: SiTiktok },\n    { id: \"instagram\", name: \"Instagram\", icon: SiInstagram },\n    { id: \"medium\", name: \"Medium\", icon: SiMedium },\n    { id: \"giveth\", name: \"Giveth\", icon: CoinsIcon },\n    { id: \"karmagap\", name: \"KarmaGap\", icon: CoinsIcon },\n    { id: \"publicgoods\", name: \"PublicGoods\", icon: CoinsIcon },\n    { id: \"twitter\", name: \"Twitter\", icon: SiX },\n    { id: \"blog\", name: \"Blog\", icon: PenTool },\n  ];\n\n  const filteredChannels: Channel[] = [];\n\n  const handleTradeChannel = (channel: Channel) => {\n    setSelectedChannel(channel);\n    setTradeModalOpen(true);\n  };\n\n  return (\n    <Layout>\n      {/* Header */}\n      <section className=\"p-4 md:p-8\">\n        <div className=\"max-w-5xl mx-auto\">\n          {/* Channel Import Tab and Category Tabs */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n            {/* Channel Import Tab */}\n            <Button\n              onClick={() => setCreateModalOpen(true)}\n              className=\"flex items-center gap-2 bg-primary text-black hover:bg-primary/90 font-semibold px-6 py-2 rounded-full transition-colors\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Import Channel\n            </Button>\n\n            {/* Category Tabs */}\n            <div className=\"flex flex-wrap gap-1\">\n              {categories.map((category) => {\n                const Icon = category.icon;\n                return (\n                  <button\n                    key={category.id}\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={`flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm transition-colors ${\n                      selectedCategory === category.id\n                        ? \"bg-primary text-black font-semibold\"\n                        : \"bg-muted/20 text-muted-foreground hover:text-white hover:bg-muted/30\"\n                    }`}\n                  >\n                    <Icon className=\"w-3.5 h-3.5\" />\n                    {category.name}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Channels Grid */}\n      <section className=\"px-4 md:px-8 pb-4 md:pb-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n              {[...Array(12)].map((_, i) => (\n                <div key={i} className=\"spotify-card rounded-xl p-3 space-y-3\">\n                  <Skeleton className=\"aspect-square w-full rounded-lg\" />\n                  <div className=\"space-y-2 text-center\">\n                    <Skeleton className=\"h-5 w-3/4 mx-auto\" />\n                    <Skeleton className=\"h-4 w-1/2 mx-auto\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredChannels.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Hash className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">\n                {searchTerm ? \"No channels found\" : \"No channels yet\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {searchTerm\n                  ? `No channels match \"${searchTerm}\". Try a different search term.`\n                  : \"Be the first coin your Channel and earn forever!\"}\n              </p>\n              {!searchTerm && (\n                <Button\n                  onClick={() => setCreateModalOpen(true)}\n                  className=\"spotify-button\"\n                >\n                  Import your Channel\n                </Button>\n              )}\n            </div>\n          ) : (\n            <>\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold text-white\">\n                  {searchTerm\n                    ? `Search results for \"${searchTerm}\"`\n                    : \"Trending Channels\"}\n                  <span className=\"text-muted-foreground ml-2\">\n                    ({filteredChannels.length})\n                  </span>\n                </h2>\n              </div>\n\n              {/* Responsive Grid */}\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n                {filteredChannels.map((channel) => (\n                  <div\n                    key={channel.id}\n                    className=\"compact-channel-card group cursor-pointer\"\n                    onClick={() => handleTradeChannel(channel)}\n                  >\n                    {/* Channel Icon */}\n                    <div className=\"w-16 h-16 rounded-xl overflow-hidden mb-3 mx-auto\">\n                      <img\n                        src={channel.image}\n                        alt={channel.name}\n                        className=\"w-full h-full object-cover transition-transform duration-200 group-hover:scale-110\"\n                      />\n                    </div>\n\n                    {/* Channel Info */}\n                    <div className=\"text-center space-y-1\">\n                      <h3 className=\"font-bold text-white text-sm leading-tight\">\n                        {channel.name}\n                        <br />\n                        <span className=\"text-xs text-muted-foreground font-normal\">\n                          ({channel.symbol})\n                        </span>\n                      </h3>\n\n                      <div className=\"text-xs text-muted-foreground\">\n                        market cap:{\" \"}\n                        <span className=\"text-primary font-semibold\">\n                          {channel.marketCap}\n                        </span>\n                      </div>\n\n                      <div className=\"text-xs text-muted-foreground\">\n                        replies:{\" \"}\n                        <span className=\"text-white font-semibold\">\n                          {channel.holders * 30 +\n                            Math.floor(Math.random() * 50)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* View All Button */}\n              <div className=\"text-center mt-8\">\n                <Button\n                  variant=\"outline\"\n                  className=\"border-border/50 hover:border-primary/50 transition-colors\"\n                >\n                  View All Channels\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </section>\n\n      {/* Trade Modal */}\n      {selectedChannel && (\n        <TradeModal\n          coin={{\n            id: selectedChannel.id,\n            name: selectedChannel.name,\n            symbol: selectedChannel.symbol,\n            address: selectedChannel.address,\n            creator: selectedChannel.creator,\n            createdAt: new Date().toISOString(),\n          }}\n          open={tradeModalOpen}\n          onOpenChange={setTradeModalOpen}\n        />\n      )}\n\n      {/* Create Coin Modal */}\n      <CreateCoinModal\n        open={createModalOpen}\n        onOpenChange={setCreateModalOpen}\n      />\n    </Layout>\n  );\n}","size_bytes":9491},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/registry-service.ts":{"content":"import { createPublicClient, createWalletClient, http, Hash, keccak256, toBytes } from \"viem\";\nimport { base, baseSepolia } from \"viem/chains\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport type { Coin } from \"@shared/schema\";\n\nconst REGISTRY_CONTRACT_ADDRESS = process.env.REGISTRY_CONTRACT_ADDRESS || \"0x0000000000000000000000000000000000000000\";\n\nconst REGISTRY_ABI = [\n  {\n    inputs: [\n      { name: \"coinAddresses\", type: \"address[]\" },\n      { name: \"creators\", type: \"address[]\" },\n      { name: \"metadataHashes\", type: \"bytes32[]\" }\n    ],\n    name: \"registerBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"coinAddress\", type: \"address\" }],\n    name: \"isPlatformCoin\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"totalCoinsRegistered\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"creator\", type: \"address\" }],\n    name: \"getCreatorCoinCount\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n] as const;\n\nexport class RegistryService {\n  private publicClient: any;\n  private walletClient: any;\n  private chainId: number;\n\n  constructor(chainId: number = base.id) {\n    this.chainId = chainId;\n    const chain = chainId === baseSepolia.id ? baseSepolia : base;\n    \n    const alchemyApiKey = process.env.VITE_ALCHEMY_API_KEY || \"o3VW3WRXrsXXMRX3l7jZxLUqhWyZzXBy\";\n    const rpcUrl = process.env.VITE_ZORA_RPC_URL || \n                   `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;\n\n    this.publicClient = createPublicClient({\n      chain,\n      transport: http(rpcUrl),\n    });\n\n    const privateKey = process.env.PLATFORM_PRIVATE_KEY;\n    if (privateKey) {\n      const account = privateKeyToAccount(privateKey as `0x${string}`);\n      this.walletClient = createWalletClient({\n        account,\n        chain,\n        transport: http(rpcUrl),\n      });\n    }\n  }\n\n  generateMetadataHash(coin: Coin): `0x${string}` {\n    const metadata = `${coin.name}|${coin.symbol}|${coin.ipfsUri || ''}`;\n    return keccak256(toBytes(metadata));\n  }\n\n  async registerCoinsBatch(coins: Coin[]): Promise<Hash | null> {\n    if (!this.walletClient) {\n      console.error(\"Wallet client not configured. Set PLATFORM_PRIVATE_KEY environment variable.\");\n      return null;\n    }\n\n    if (coins.length === 0) {\n      console.log(\"No coins to register\");\n      return null;\n    }\n\n    try {\n      const coinAddresses = coins\n        .filter(c => c.address)\n        .map(c => c.address as `0x${string}`);\n      \n      const creators = coins\n        .filter(c => c.address)\n        .map(c => c.creator_wallet as `0x${string}`);\n      \n      const metadataHashes = coins\n        .filter(c => c.address)\n        .map(c => this.generateMetadataHash(c));\n\n      console.log(`Registering ${coinAddresses.length} coins to registry...`);\n\n      const { request } = await this.publicClient.simulateContract({\n        address: REGISTRY_CONTRACT_ADDRESS as `0x${string}`,\n        abi: REGISTRY_ABI,\n        functionName: 'registerBatch',\n        args: [coinAddresses, creators, metadataHashes],\n        account: this.walletClient.account,\n      });\n\n      const hash = await this.walletClient.writeContract(request);\n      \n      console.log(`Registry batch transaction sent: ${hash}`);\n      \n      const receipt = await this.publicClient.waitForTransactionReceipt({ hash });\n      \n      if (receipt.status === 'success') {\n        console.log(`Successfully registered ${coinAddresses.length} coins`);\n        return hash;\n      } else {\n        console.error(\"Registry transaction failed\");\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error registering coins batch:\", error);\n      return null;\n    }\n  }\n\n  async isPlatformCoin(coinAddress: string): Promise<boolean> {\n    try {\n      const result = await this.publicClient.readContract({\n        address: REGISTRY_CONTRACT_ADDRESS as `0x${string}`,\n        abi: REGISTRY_ABI,\n        functionName: 'isPlatformCoin',\n        args: [coinAddress as `0x${string}`],\n      });\n      \n      return result as boolean;\n    } catch (error) {\n      console.error(\"Error checking platform coin:\", error);\n      return false;\n    }\n  }\n\n  async getTotalCoinsRegistered(): Promise<number> {\n    try {\n      const result = await this.publicClient.readContract({\n        address: REGISTRY_CONTRACT_ADDRESS as `0x${string}`,\n        abi: REGISTRY_ABI,\n        functionName: 'totalCoinsRegistered',\n      });\n      \n      return Number(result);\n    } catch (error) {\n      console.error(\"Error getting total coins:\", error);\n      return 0;\n    }\n  }\n\n  async getCreatorCoinCount(creatorAddress: string): Promise<number> {\n    try {\n      const result = await this.publicClient.readContract({\n        address: REGISTRY_CONTRACT_ADDRESS as `0x${string}`,\n        abi: REGISTRY_ABI,\n        functionName: 'getCreatorCoinCount',\n        args: [creatorAddress as `0x${string}`],\n      });\n      \n      return Number(result);\n    } catch (error) {\n      console.error(\"Error getting creator coin count:\", error);\n      return 0;\n    }\n  }\n}\n","size_bytes":5285},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-xl border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"drizzle.config.ts":{"content":"\nimport { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set - please provision a PostgreSQL database in Replit\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":353},"server/storage.ts":{"content":"import { type ScrapedContent, type InsertScrapedContent, type Coin, type InsertCoin, type UpdateCoin, type Reward, type InsertReward, type Creator, type InsertCreator, type UpdateCreator, type Comment, type InsertComment, type Notification, type InsertNotification, type Follow, type InsertFollow, type Referral, type InsertReferral, type LoginStreak, type InsertLoginStreak, type UpdateLoginStreak } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { SupabaseStorage } from \"./supabase-storage\";\n\nexport interface IStorage {\n  // Scraped Content\n  getScrapedContent(id: string): Promise<ScrapedContent | undefined>;\n  createScrapedContent(content: InsertScrapedContent): Promise<ScrapedContent>;\n  getAllScrapedContent(): Promise<ScrapedContent[]>;\n  \n  // Coins\n  getCoin(id: string): Promise<Coin | undefined>;\n  getCoinByAddress(address: string): Promise<Coin | undefined>;\n  createCoin(coin: InsertCoin): Promise<Coin>;\n  updateCoin(id: string, update: UpdateCoin): Promise<Coin | undefined>;\n  getAllCoins(): Promise<Coin[]>;\n  getCoinsByCreator(creator: string): Promise<Coin[]>;\n  \n  // Rewards\n  getReward(id: string): Promise<Reward | undefined>;\n  createReward(reward: InsertReward): Promise<Reward>;\n  getAllRewards(): Promise<Reward[]>;\n  getRewardsByCoin(coinAddress: string): Promise<Reward[]>;\n  getRewardsByRecipient(recipientAddress: string): Promise<Reward[]>;\n  \n  // Creators\n  getCreator(id: string): Promise<Creator | undefined>;\n  getCreatorByAddress(address: string): Promise<Creator | undefined>;\n  getCreatorByReferralCode(referralCode: string): Promise<Creator | undefined>;\n  createCreator(creator: InsertCreator): Promise<Creator>;\n  updateCreator(id: string, update: UpdateCreator): Promise<Creator | undefined>;\n  getAllCreators(): Promise<Creator[]>;\n  getTopCreators(): Promise<Creator[]>;\n  \n  // Comments\n  createComment(comment: InsertComment): Promise<Comment>;\n  getCommentsByCoin(coinAddress: string): Promise<Comment[]>;\n  getAllComments(): Promise<Comment[]>;\n  \n  // Notifications\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  getUnreadNotificationsByUser(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<Notification | undefined>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  deleteNotification(id: string): Promise<boolean>;\n  \n  // Follows\n  createFollow(follow: InsertFollow): Promise<Follow>;\n  deleteFollow(followerAddress: string, followingAddress: string): Promise<boolean>;\n  getFollowers(userAddress: string): Promise<Follow[]>;\n  getFollowing(userAddress: string): Promise<Follow[]>;\n  isFollowing(followerAddress: string, followingAddress: string): Promise<boolean>;\n  \n  // Referrals\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  getReferralsByReferrer(referrerAddress: string): Promise<Referral[]>;\n  getReferralsByCode(referralCode: string): Promise<Referral[]>;\n  getReferralByAddresses(referrerAddress: string, referredAddress: string): Promise<Referral | undefined>;\n  \n  // Login Streaks\n  getLoginStreak(userAddress: string): Promise<LoginStreak | undefined>;\n  createLoginStreak(loginStreak: InsertLoginStreak): Promise<LoginStreak>;\n  updateLoginStreak(userAddress: string, update: UpdateLoginStreak): Promise<LoginStreak | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private scrapedContent: Map<string, ScrapedContent>;\n  private coins: Map<string, Coin>;\n  private rewards: Map<string, Reward>;\n  private creators: Map<string, Creator>;\n  private comments: Map<string, Comment>;\n  private notifications: Map<string, Notification>;\n  private follows: Map<string, Follow>;\n  private referrals: Map<string, Referral>;\n  private loginStreaks: Map<string, LoginStreak>;\n\n  constructor() {\n    this.scrapedContent = new Map();\n    this.coins = new Map();\n    this.rewards = new Map();\n    this.creators = new Map();\n    this.comments = new Map();\n    this.notifications = new Map();\n    this.follows = new Map();\n    this.referrals = new Map();\n    this.loginStreaks = new Map();\n  }\n\n  async getScrapedContent(id: string): Promise<ScrapedContent | undefined> {\n    return this.scrapedContent.get(id);\n  }\n\n  async createScrapedContent(insertContent: InsertScrapedContent): Promise<ScrapedContent> {\n    const id = randomUUID();\n    const content: ScrapedContent = { \n      ...insertContent,\n      platform: insertContent.platform ?? 'blog',\n      image: insertContent.image ?? null,\n      content: insertContent.content ?? null,\n      description: insertContent.description ?? null,\n      author: insertContent.author ?? null,\n      publishDate: insertContent.publishDate ?? null,\n      tags: insertContent.tags ? [...insertContent.tags] : null,\n      metadata: insertContent.metadata ?? null,\n      id,\n      scrapedAt: new Date()\n    };\n    this.scrapedContent.set(id, content);\n    return content;\n  }\n\n  async getAllScrapedContent(): Promise<ScrapedContent[]> {\n    return Array.from(this.scrapedContent.values());\n  }\n\n  async getCoin(id: string): Promise<Coin | undefined> {\n    return this.coins.get(id);\n  }\n\n  async getCoinByAddress(address: string): Promise<Coin | undefined> {\n    const coin = Array.from(this.coins.values()).find(\n      (coin) => coin.address?.toLowerCase() === address.toLowerCase()\n    );\n    \n    if (!coin) return undefined;\n    \n    if (coin.scrapedContentId) {\n      const content = this.scrapedContent.get(coin.scrapedContentId);\n      if (content) {\n        return {\n          ...coin,\n          metadata: {\n            title: content.title,\n            description: content.description,\n            image: content.image,\n            animation_url: (content.metadata as any)?.animation_url,\n            originalUrl: content.url,\n            author: content.author\n          }\n        } as any;\n      }\n    }\n    \n    return coin;\n  }\n\n  async createCoin(insertCoin: InsertCoin): Promise<Coin> {\n    const id = randomUUID();\n    const coin: Coin = {\n      id,\n      symbol: insertCoin.symbol ?? '',\n      name: insertCoin.name ?? '',\n      address: insertCoin.address ?? null,\n      creator_wallet: insertCoin.creator_wallet ?? '',\n      status: insertCoin.status ?? 'pending',\n      scrapedContentId: insertCoin.scrapedContentId ?? null,\n      ipfsUri: insertCoin.ipfsUri ?? null,\n      chainId: insertCoin.chainId ?? null,\n      registryTxHash: insertCoin.registryTxHash ?? null,\n      metadataHash: insertCoin.metadataHash ?? null,\n      registeredAt: insertCoin.registeredAt ?? null,\n      image: insertCoin.image ?? null,\n      description: insertCoin.description ?? null,\n      createdAt: new Date()\n    };\n    this.coins.set(id, coin);\n    return coin;\n  }\n\n  async updateCoin(id: string, update: UpdateCoin): Promise<Coin | undefined> {\n    const coin = this.coins.get(id);\n    if (!coin) return undefined;\n    \n    const updatedCoin: Coin = {\n      ...coin,\n      ...(update.address !== undefined && { address: update.address }),\n      ...(update.status !== undefined && { status: update.status }),\n    };\n    \n    this.coins.set(id, updatedCoin);\n    return updatedCoin;\n  }\n\n  async getAllCoins(): Promise<Coin[]> {\n    const coins = Array.from(this.coins.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n    \n    return coins.map(coin => {\n      if (coin.scrapedContentId) {\n        const content = this.scrapedContent.get(coin.scrapedContentId);\n        if (content) {\n          return {\n            ...coin,\n            metadata: {\n              title: content.title,\n              description: content.description,\n              image: content.image,\n              originalUrl: content.url,\n              author: content.author\n            }\n          };\n        }\n      }\n      return coin;\n    }) as any;\n  }\n\n  async getCoinsByCreator(creator: string): Promise<Coin[]> {\n    const coins = Array.from(this.coins.values()).filter(\n      (coin) => coin.creator_wallet.toLowerCase() === creator.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n    \n    return coins.map(coin => {\n      if (coin.scrapedContentId) {\n        const content = this.scrapedContent.get(coin.scrapedContentId);\n        if (content) {\n          return {\n            ...coin,\n            metadata: {\n              title: content.title,\n              description: content.description,\n              image: content.image,\n              originalUrl: content.url,\n              author: content.author\n            }\n          };\n        }\n      }\n      return coin;\n    }) as any;\n  }\n\n  async getReward(id: string): Promise<Reward | undefined> {\n    return this.rewards.get(id);\n  }\n\n  async createReward(insertReward: InsertReward): Promise<Reward> {\n    const id = randomUUID();\n    const reward: Reward = {\n      ...insertReward,\n      rewardCurrency: insertReward.rewardCurrency ?? 'ZORA',\n      id,\n      createdAt: new Date()\n    };\n    this.rewards.set(id, reward);\n    return reward;\n  }\n\n  async getAllRewards(): Promise<Reward[]> {\n    return Array.from(this.rewards.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async getRewardsByCoin(coinAddress: string): Promise<Reward[]> {\n    return Array.from(this.rewards.values()).filter(\n      (reward) => reward.coinAddress.toLowerCase() === coinAddress.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getRewardsByRecipient(recipientAddress: string): Promise<Reward[]> {\n    return Array.from(this.rewards.values()).filter(\n      (reward) => reward.recipientAddress.toLowerCase() === recipientAddress.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getCreator(id: string): Promise<Creator | undefined> {\n    return this.creators.get(id);\n  }\n\n  async getCreatorByAddress(address: string): Promise<Creator | undefined> {\n    return Array.from(this.creators.values()).find(\n      (creator) => creator.address.toLowerCase() === address.toLowerCase()\n    );\n  }\n\n  async getCreatorByReferralCode(referralCode: string): Promise<Creator | undefined> {\n    return Array.from(this.creators.values()).find(\n      (creator) => creator.referralCode === referralCode\n    );\n  }\n\n  async createCreator(insertCreator: InsertCreator): Promise<Creator> {\n    const id = randomUUID();\n    const creator: Creator = {\n      ...insertCreator,\n      verified: insertCreator.verified ?? 'false',\n      totalCoins: insertCreator.totalCoins ?? '0',\n      totalVolume: insertCreator.totalVolume ?? '0',\n      followers: insertCreator.followers ?? '0',\n      points: insertCreator.points ?? '0',\n      referralCode: insertCreator.referralCode ?? null,\n      name: insertCreator.name ?? null,\n      bio: insertCreator.bio ?? null,\n      avatar: insertCreator.avatar ?? null,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.creators.set(id, creator);\n    return creator;\n  }\n\n  async updateCreator(id: string, update: UpdateCreator): Promise<Creator | undefined> {\n    const creator = this.creators.get(id);\n    if (!creator) return undefined;\n    \n    const updatedCreator: Creator = {\n      ...creator,\n      ...(update.name !== undefined && { name: update.name }),\n      ...(update.bio !== undefined && { bio: update.bio }),\n      ...(update.avatar !== undefined && { avatar: update.avatar }),\n      ...(update.verified !== undefined && { verified: update.verified }),\n      ...(update.totalCoins !== undefined && { totalCoins: update.totalCoins }),\n      ...(update.totalVolume !== undefined && { totalVolume: update.totalVolume }),\n      ...(update.followers !== undefined && { followers: update.followers }),\n      ...(update.points !== undefined && { points: update.points }),\n      ...(update.referralCode !== undefined && { referralCode: update.referralCode }),\n      updatedAt: new Date()\n    };\n    \n    this.creators.set(id, updatedCreator);\n    return updatedCreator;\n  }\n\n  async getAllCreators(): Promise<Creator[]> {\n    return Array.from(this.creators.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async getTopCreators(): Promise<Creator[]> {\n    return Array.from(this.creators.values()).sort(\n      (a, b) => parseInt(b.totalCoins) - parseInt(a.totalCoins)\n    );\n  }\n\n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const id = randomUUID();\n    const comment: Comment = {\n      ...insertComment,\n      transactionHash: insertComment.transactionHash ?? null,\n      id,\n      createdAt: new Date()\n    };\n    this.comments.set(id, comment);\n    return comment;\n  }\n\n  async getCommentsByCoin(coinAddress: string): Promise<Comment[]> {\n    return Array.from(this.comments.values()).filter(\n      (comment) => comment.coinAddress.toLowerCase() === coinAddress.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getAllComments(): Promise<Comment[]> {\n    return Array.from(this.comments.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      ...insertNotification,\n      coinAddress: insertNotification.coinAddress ?? null,\n      coinSymbol: insertNotification.coinSymbol ?? null,\n      amount: insertNotification.amount ?? null,\n      transactionHash: insertNotification.transactionHash ?? null,\n      read: false,\n      id,\n      createdAt: new Date()\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(notif => notif.userId.toLowerCase() === userId.toLowerCase())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getUnreadNotificationsByUser(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(notif => \n        notif.userId.toLowerCase() === userId.toLowerCase() && !notif.read\n      )\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const notification = this.notifications.get(id);\n    if (!notification) return undefined;\n    \n    const updated: Notification = { ...notification, read: true };\n    this.notifications.set(id, updated);\n    return updated;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    Array.from(this.notifications.values())\n      .filter(notif => notif.userId.toLowerCase() === userId.toLowerCase())\n      .forEach(notif => {\n        this.notifications.set(notif.id, { ...notif, read: true });\n      });\n  }\n\n  async deleteNotification(id: string): Promise<boolean> {\n    return this.notifications.delete(id);\n  }\n  \n  async createFollow(insertFollow: InsertFollow): Promise<Follow> {\n    const id = randomUUID();\n    const follow: Follow = {\n      ...insertFollow,\n      id,\n      createdAt: new Date()\n    };\n    this.follows.set(id, follow);\n    return follow;\n  }\n\n  async deleteFollow(followerAddress: string, followingAddress: string): Promise<boolean> {\n    const follow = Array.from(this.follows.values()).find(\n      (f) => f.followerAddress.toLowerCase() === followerAddress.toLowerCase() && \n             f.followingAddress.toLowerCase() === followingAddress.toLowerCase()\n    );\n    if (!follow) return false;\n    return this.follows.delete(follow.id);\n  }\n\n  async getFollowers(userAddress: string): Promise<Follow[]> {\n    return Array.from(this.follows.values()).filter(\n      (follow) => follow.followingAddress.toLowerCase() === userAddress.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getFollowing(userAddress: string): Promise<Follow[]> {\n    return Array.from(this.follows.values()).filter(\n      (follow) => follow.followerAddress.toLowerCase() === userAddress.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async isFollowing(followerAddress: string, followingAddress: string): Promise<boolean> {\n    return Array.from(this.follows.values()).some(\n      (follow) => follow.followerAddress.toLowerCase() === followerAddress.toLowerCase() && \n                  follow.followingAddress.toLowerCase() === followingAddress.toLowerCase()\n    );\n  }\n  \n  async createReferral(insertReferral: InsertReferral): Promise<Referral> {\n    const id = randomUUID();\n    const referral: Referral = {\n      ...insertReferral,\n      pointsEarned: insertReferral.pointsEarned ?? '100',\n      claimed: true,\n      id,\n      createdAt: new Date()\n    };\n    this.referrals.set(id, referral);\n    return referral;\n  }\n\n  async getReferralsByReferrer(referrerAddress: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values()).filter(\n      (referral) => referral.referrerAddress.toLowerCase() === referrerAddress.toLowerCase()\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getReferralsByCode(referralCode: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values()).filter(\n      (referral) => referral.referralCode === referralCode\n    ).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getReferralByAddresses(referrerAddress: string, referredAddress: string): Promise<Referral | undefined> {\n    return Array.from(this.referrals.values()).find(\n      (referral) => referral.referrerAddress.toLowerCase() === referrerAddress.toLowerCase() && \n                    referral.referredAddress.toLowerCase() === referredAddress.toLowerCase()\n    );\n  }\n\n  async getLoginStreak(userAddress: string): Promise<LoginStreak | undefined> {\n    return Array.from(this.loginStreaks.values()).find(\n      (streak) => streak.userAddress.toLowerCase() === userAddress.toLowerCase()\n    );\n  }\n\n  async createLoginStreak(insertLoginStreak: InsertLoginStreak): Promise<LoginStreak> {\n    const id = randomUUID();\n    const loginStreak: LoginStreak = {\n      ...insertLoginStreak,\n      currentStreak: insertLoginStreak.currentStreak ?? '0',\n      longestStreak: insertLoginStreak.longestStreak ?? '0',\n      lastLoginDate: insertLoginStreak.lastLoginDate ?? null,\n      totalPoints: insertLoginStreak.totalPoints ?? '0',\n      loginDates: insertLoginStreak.loginDates ?? [],\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.loginStreaks.set(id, loginStreak);\n    return loginStreak;\n  }\n\n  async updateLoginStreak(userAddress: string, update: UpdateLoginStreak): Promise<LoginStreak | undefined> {\n    const loginStreak = await this.getLoginStreak(userAddress);\n    if (!loginStreak) return undefined;\n    \n    const updatedLoginStreak: LoginStreak = {\n      ...loginStreak,\n      ...(update.currentStreak !== undefined && { currentStreak: update.currentStreak }),\n      ...(update.longestStreak !== undefined && { longestStreak: update.longestStreak }),\n      ...(update.lastLoginDate !== undefined && { lastLoginDate: update.lastLoginDate }),\n      ...(update.totalPoints !== undefined && { totalPoints: update.totalPoints }),\n      ...(update.loginDates !== undefined && { loginDates: update.loginDates }),\n      updatedAt: new Date()\n    };\n    \n    this.loginStreaks.set(loginStreak.id, updatedLoginStreak);\n    return updatedLoginStreak;\n  }\n}\n\n// Use SupabaseStorage for ALL data - no more in-memory storage\nconst supabaseStorage = new SupabaseStorage();\n\nexport const storage: IStorage = {\n  // Scraped Content (Supabase)\n  getScrapedContent: (id) => supabaseStorage.getScrapedContent(id),\n  createScrapedContent: (content) => supabaseStorage.createScrapedContent(content),\n  getAllScrapedContent: () => supabaseStorage.getAllScrapedContent(),\n\n  // Coins (Supabase)\n  getCoin: (id) => supabaseStorage.getCoin(id),\n  getCoinByAddress: (address) => supabaseStorage.getCoinByAddress(address),\n  createCoin: (coin) => supabaseStorage.createCoin(coin),\n  updateCoin: (id, update) => supabaseStorage.updateCoin(id, update),\n  getAllCoins: () => supabaseStorage.getAllCoins(),\n  getCoinsByCreator: (creator) => supabaseStorage.getCoinsByCreator(creator),\n\n  // Rewards (Supabase)\n  getReward: (id) => supabaseStorage.getReward(id),\n  createReward: (reward) => supabaseStorage.createReward(reward),\n  getAllRewards: () => supabaseStorage.getAllRewards(),\n  getRewardsByCoin: (coinAddress) => supabaseStorage.getRewardsByCoin(coinAddress),\n  getRewardsByRecipient: (recipientAddress) => supabaseStorage.getRewardsByRecipient(recipientAddress),\n\n  // Creators (Supabase)\n  getCreator: (id) => supabaseStorage.getCreator(id),\n  getCreatorByAddress: (address) => supabaseStorage.getCreatorByAddress(address),\n  getCreatorByReferralCode: (referralCode) => supabaseStorage.getCreatorByReferralCode(referralCode),\n  createCreator: (creator) => supabaseStorage.createCreator(creator),\n  updateCreator: (id, update) => supabaseStorage.updateCreator(id, update),\n  getAllCreators: () => supabaseStorage.getAllCreators(),\n  getTopCreators: () => supabaseStorage.getTopCreators(),\n\n  // Comments (Supabase)\n  createComment: (comment) => supabaseStorage.createComment(comment),\n  getCommentsByCoin: (coinAddress) => supabaseStorage.getCommentsByCoin(coinAddress),\n  getAllComments: () => supabaseStorage.getAllComments(),\n\n  // Notifications (Supabase)\n  createNotification: (notification) => supabaseStorage.createNotification(notification),\n  getNotificationsByUser: (userId) => supabaseStorage.getNotificationsByUser(userId),\n  getUnreadNotificationsByUser: (userId) => supabaseStorage.getUnreadNotificationsByUser(userId),\n  markNotificationAsRead: (id) => supabaseStorage.markNotificationAsRead(id),\n  markAllNotificationsAsRead: (userId) => supabaseStorage.markAllNotificationsAsRead(userId),\n  deleteNotification: (id) => supabaseStorage.deleteNotification(id),\n  \n  // Follows (Supabase)\n  createFollow: (follow) => supabaseStorage.createFollow(follow),\n  deleteFollow: (followerAddress, followingAddress) => supabaseStorage.deleteFollow(followerAddress, followingAddress),\n  getFollowers: (userAddress) => supabaseStorage.getFollowers(userAddress),\n  getFollowing: (userAddress) => supabaseStorage.getFollowing(userAddress),\n  isFollowing: (followerAddress, followingAddress) => supabaseStorage.isFollowing(followerAddress, followingAddress),\n  \n  // Referrals (Supabase)\n  createReferral: (referral) => supabaseStorage.createReferral(referral),\n  getReferralsByReferrer: (referrerAddress) => supabaseStorage.getReferralsByReferrer(referrerAddress),\n  getReferralsByCode: (referralCode) => supabaseStorage.getReferralsByCode(referralCode),\n  getReferralByAddresses: (referrerAddress, referredAddress) => supabaseStorage.getReferralByAddresses(referrerAddress, referredAddress),\n\n  // Login Streaks (Supabase)\n  getLoginStreak: (userAddress) => supabaseStorage.getLoginStreak(userAddress),\n  createLoginStreak: (loginStreak) => supabaseStorage.createLoginStreak(loginStreak),\n  updateLoginStreak: (userAddress, update) => supabaseStorage.updateLoginStreak(userAddress, update),\n};\n","size_bytes":23319},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n        danger:\n          \"border-transparent bg-red-500 text-white hover:bg-red-600\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1215},"README.md":{"content":"# zorcontr\n","size_bytes":11},"server/platform-detector.ts":{"content":"export type PlatformType = \n  | 'youtube'\n  | 'spotify'\n  | 'medium'\n  | 'substack'\n  | 'gitcoin'\n  | 'giveth'\n  | 'tiktok'\n  | 'instagram'\n  | 'twitter'\n  | 'github'\n  | 'farcaster'\n  | 'twitch'\n  | 'blog'\n  | 'audio'\n  | 'eventbrite'\n  | 'luma'\n  | 'meetup'\n  | 'partiful';\n\nexport interface PlatformInfo {\n  type: PlatformType;\n  name: string;\n  id?: string;\n}\n\nexport function detectPlatform(url: string): PlatformInfo {\n  try {\n    const urlObj = new URL(url);\n    const hostname = urlObj.hostname.toLowerCase();\n    const pathname = urlObj.pathname;\n\n    // YouTube (videos, channels, and short URLs)\n    if (hostname.includes('youtube.com') || hostname === 'youtu.be') {\n      const isVideo = pathname.includes('/watch') || hostname === 'youtu.be';\n      const isShort = pathname.includes('/shorts/');\n      const match = pathname.match(/\\/(channel|c|user|@)\\/([^\\/]+)/);\n      \n      return {\n        type: 'youtube',\n        name: isVideo ? 'YouTube Video' : isShort ? 'YouTube Short' : 'YouTube',\n        id: match ? match[2] : undefined\n      };\n    }\n\n    // Spotify\n    if (hostname.includes('spotify.com')) {\n      const match = pathname.match(/\\/(track|album|artist|playlist)\\/([^\\/\\?]+)/);\n      return {\n        type: 'spotify',\n        name: 'Spotify',\n        id: match ? match[2] : undefined\n      };\n    }\n\n    // Audio URL detection\n    if (/\\.(mp3|wav|ogg|m4a|aac|flac)$/i.test(url)) {\n      return { type: 'audio', name: 'Audio File' };\n    }\n\n    // Medium\n    if (hostname.includes('medium.com') || hostname.endsWith('.medium.com')) {\n      return { type: 'medium', name: 'Medium' };\n    }\n\n    // Substack\n    if (hostname.includes('substack.com')) {\n      return { type: 'substack', name: 'Substack' };\n    }\n\n    // Gitcoin\n    if (hostname.includes('gitcoin.co') || hostname.includes('grants.gitcoin.co')) {\n      return { type: 'gitcoin', name: 'Gitcoin' };\n    }\n\n    // Giveth\n    if (hostname.includes('giveth.io')) {\n      return { type: 'giveth', name: 'Giveth' };\n    }\n\n    // TikTok (both profile and video URLs)\n    if (hostname.includes('tiktok.com')) {\n      const isVideo = pathname.includes('/video/');\n      return { \n        type: 'tiktok', \n        name: isVideo ? 'TikTok Video' : 'TikTok' \n      };\n    }\n\n    // Instagram (both profile and post URLs)\n    if (hostname.includes('instagram.com')) {\n      const isPost = pathname.includes('/p/') || pathname.includes('/reel/') || pathname.includes('/tv/');\n      return { \n        type: 'instagram', \n        name: isPost ? 'Instagram Post' : 'Instagram' \n      };\n    }\n\n    // Twitter/X (both profile and tweet URLs)\n    if (hostname.includes('twitter.com') || hostname === 'x.com') {\n      const isTweet = pathname.includes('/status/');\n      return { \n        type: 'twitter', \n        name: isTweet ? 'Tweet' : 'Twitter/X' \n      };\n    }\n\n    // GitHub\n    if (hostname.includes('github.com')) {\n      return { type: 'github', name: 'GitHub' };\n    }\n\n    // Farcaster\n    if (hostname.includes('warpcast.com') || hostname.includes('farcaster.xyz')) {\n      return { type: 'farcaster', name: 'Farcaster' };\n    }\n\n    // Twitch\n    if (hostname.includes('twitch.tv')) {\n      return { type: 'twitch', name: 'Twitch' };\n    }\n\n    // Eventbrite\n    if (hostname.includes('eventbrite.com') || hostname.includes('eventbrite.co')) {\n      return { type: 'eventbrite', name: 'Eventbrite Event' };\n    }\n\n    // Luma (lu.ma)\n    if (hostname.includes('lu.ma') || hostname.includes('luma.')) {\n      return { type: 'luma', name: 'Luma Event' };\n    }\n\n    // Meetup\n    if (hostname.includes('meetup.com')) {\n      return { type: 'meetup', name: 'Meetup Event' };\n    }\n\n    // Partiful\n    if (hostname.includes('partiful.com')) {\n      return { type: 'partiful', name: 'Partiful Event' };\n    }\n\n    // Default to generic blog\n    return { type: 'blog', name: 'Blog/Article' };\n\n  } catch (error) {\n    // If URL parsing fails, treat as a generic blog/article\n    if (/\\.(mp3|wav|ogg|m4a|aac|flac)$/i.test(url)) {\n      return { type: 'audio', name: 'Audio File' };\n    }\n    return { type: 'blog', name: 'Blog/Article' };\n  }\n}\n\nexport const SUPPORTED_PLATFORMS = [\n  { type: 'youtube', name: 'YouTube', example: 'https://youtube.com/@channelname' },\n  { type: 'spotify', name: 'Spotify', example: 'https://open.spotify.com/track/...' },\n  { type: 'audio', name: 'Audio File', example: 'https://example.com/audio.mp3' },\n  { type: 'medium', name: 'Medium', example: 'https://medium.com/@author/article' },\n  { type: 'substack', name: 'Substack', example: 'https://example.substack.com/p/article' },\n  { type: 'gitcoin', name: 'Gitcoin Grants', example: 'https://grants.gitcoin.co/...' },\n  { type: 'giveth', name: 'Giveth', example: 'https://giveth.io/project/...' },\n  { type: 'tiktok', name: 'TikTok', example: 'https://tiktok.com/@username' },\n  { type: 'instagram', name: 'Instagram', example: 'https://instagram.com/username' },\n  { type: 'twitter', name: 'Twitter/X', example: 'https://twitter.com/username' },\n  { type: 'github', name: 'GitHub', example: 'https://github.com/username/project' },\n  { type: 'farcaster', name: 'Farcaster', example: 'https://warpcast.com/username' },\n  { type: 'twitch', name: 'Twitch', example: 'https://twitch.tv/username' },\n  { type: 'eventbrite', name: 'Eventbrite', example: 'https://eventbrite.com/e/event-name-12345' },\n  { type: 'luma', name: 'Luma', example: 'https://lu.ma/event-name' },\n  { type: 'meetup', name: 'Meetup', example: 'https://meetup.com/group-name/events/12345' },\n  { type: 'partiful', name: 'Partiful', example: 'https://partiful.com/e/event-id' },\n  { type: 'blog', name: 'Personal Blogs & News', example: 'https://example.com/article' },\n] as const;","size_bytes":5717},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X, Info, CheckCircle2, AlertTriangle, AlertCircle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:top-4 sm:right-4 sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center gap-3 overflow-hidden rounded-xl p-4 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-right-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border border-border/50 bg-background/95 backdrop-blur-sm text-foreground\",\n        info: \"border-0 bg-blue-50/95 dark:bg-blue-950/90 text-blue-900 dark:text-blue-100\",\n        success: \"border-0 bg-green-50/95 dark:bg-green-950/90 text-green-900 dark:text-green-100\",\n        warning: \"border-0 bg-yellow-50/95 dark:bg-yellow-950/90 text-yellow-900 dark:text-yellow-100\",\n        error: \"border-0 bg-red-50/95 dark:bg-red-950/90 text-red-900 dark:text-red-100\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst toastIconVariants = cva(\n  \"flex-shrink-0 w-10 h-10 rounded-lg flex items-center justify-center\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-muted\",\n        info: \"bg-blue-100 dark:bg-blue-900/50\",\n        success: \"bg-green-100 dark:bg-green-900/50\",\n        warning: \"bg-yellow-100 dark:bg-yellow-900/50\",\n        error: \"bg-red-100 dark:bg-red-900/50\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst getToastIcon = (variant?: string) => {\n  const iconClass = \"w-5 h-5\"\n  switch (variant) {\n    case \"info\":\n      return <Info className={cn(iconClass, \"text-blue-600 dark:text-blue-400\")} />\n    case \"success\":\n      return <CheckCircle2 className={cn(iconClass, \"text-green-600 dark:text-green-400\")} />\n    case \"warning\":\n      return <AlertTriangle className={cn(iconClass, \"text-yellow-600 dark:text-yellow-400\")} />\n    case \"error\":\n      return <AlertCircle className={cn(iconClass, \"text-red-600 dark:text-red-400\")} />\n    default:\n      return <Info className={cn(iconClass, \"text-muted-foreground\")} />\n  }\n}\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastIcon = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof toastIconVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div ref={ref} className={cn(toastIconVariants({ variant }), className)} {...props}>\n    {getToastIcon(variant ?? undefined)}\n  </div>\n))\nToastIcon.displayName = \"ToastIcon\"\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-3 top-3 rounded-md p-0.5 text-current/40 transition-opacity hover:text-current/60 focus:opacity-100 focus:outline-none\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold leading-none\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-80 leading-snug\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastIcon,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":6428},"client/src/pages/search.tsx":{"content":"\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport type { Coin, Creator } from \"@shared/schema\";\nimport Layout from \"@/components/layout\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search as SearchIcon, X, ChevronRight, Coins as CoinsIcon, Users, TrendingUp } from \"lucide-react\";\nimport CoinCard from \"@/components/coin-card\";\n\ntype SearchCategory = \"top\" | \"coins\" | \"creators\" | \"channels\";\n\nexport default function Search() {\n  const [location, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<SearchCategory>(\"top\");\n  const [isFocused, setIsFocused] = useState(false);\n\n  const { data: coins = [], isLoading: isLoadingCoins } = useQuery<Coin[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  const { data: creators = [], isLoading: isLoadingCreators } = useQuery<Creator[]>({\n    queryKey: [\"/api/creators\"],\n  });\n\n  // Filter results based on search query\n  const filteredCoins = useMemo(() => {\n    if (!searchQuery.trim()) return coins.slice(0, 6);\n    const query = searchQuery.toLowerCase();\n    return coins.filter(coin => \n      coin.name.toLowerCase().includes(query) ||\n      coin.symbol.toLowerCase().includes(query) ||\n      coin.creator.toLowerCase().includes(query)\n    );\n  }, [coins, searchQuery]);\n\n  const filteredCreators = useMemo(() => {\n    if (!searchQuery.trim()) return creators.slice(0, 6);\n    const query = searchQuery.toLowerCase();\n    return creators.filter(creator => \n      creator.name?.toLowerCase().includes(query) ||\n      creator.address.toLowerCase().includes(query)\n    );\n  }, [creators, searchQuery]);\n\n  // Featured/Trending coins for \"Featuring\" section\n  const featuredCoins = useMemo(() => {\n    return coins.slice(0, 3);\n  }, [coins]);\n\n  const categories = [\n    { id: \"top\" as SearchCategory, label: \"Top\" },\n    { id: \"coins\" as SearchCategory, label: \"Coins\" },\n    { id: \"creators\" as SearchCategory, label: \"Creators\" },\n    { id: \"channels\" as SearchCategory, label: \"Channels\" },\n  ];\n\n  const clearSearch = () => {\n    setSearchQuery(\"\");\n  };\n\n  const formatAddress = (address: string) => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const hasSearchResults = searchQuery.trim().length > 0;\n  const showResults = (selectedCategory === \"top\" || selectedCategory === \"coins\") && filteredCoins.length > 0;\n  const showCreators = (selectedCategory === \"top\" || selectedCategory === \"creators\") && filteredCreators.length > 0;\n\n  return (\n    <Layout>\n      <div className=\"min-h-screen bg-background\">\n        {/* Search Header */}\n        <div className=\"sticky top-0 z-20 bg-card/95 backdrop-blur-md border-b border-border\">\n          <div className=\"max-w-5xl mx-auto p-4 md:p-6\">\n            {/* Search Input */}\n            <div className=\"relative mb-4\">\n              <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search coins, creators...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onFocus={() => setIsFocused(true)}\n                onBlur={() => setIsFocused(false)}\n                className=\"pl-10 pr-24 h-12 bg-muted/20 border-border text-foreground placeholder:text-muted-foreground focus:bg-muted/30 transition-all\"\n              />\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-2\">\n                {searchQuery && (\n                  <button\n                    onClick={clearSearch}\n                    className=\"w-6 h-6 flex items-center justify-center rounded-full bg-muted hover:bg-muted/80 transition-colors\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                )}\n                <button\n                  onClick={() => navigate(\"/\")}\n                  className=\"text-muted-foreground hover:text-foreground font-medium text-sm transition-colors px-2\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n\n            \n          </div>\n        </div>\n\n        {/* Search Results Content */}\n        <div className=\"max-w-5xl mx-auto px-4 md:px-6 py-6 space-y-8\">\n          {(isLoadingCoins || isLoadingCreators) ? (\n            /* Loading State */\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <Skeleton className=\"h-8 w-32\" />\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n                  {[...Array(6)].map((_, i) => (\n                    <div key={i} className=\"spotify-card rounded-xl p-3 space-y-3\">\n                      <Skeleton className=\"aspect-square w-full rounded-lg\" />\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-5 w-3/4\" />\n                        <Skeleton className=\"h-4 w-1/2\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : hasSearchResults ? (\n            /* Search Results */\n            <>\n              {/* Coins Results */}\n              {showResults && (\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-foreground font-bold text-xl\">\n                    Coins {filteredCoins.length > 0 && `(${filteredCoins.length})`}\n                  </h2>\n                  {filteredCoins.length > 0 ? (\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n                      {filteredCoins.slice(0, 6).map((coin) => (\n                        <CoinCard key={coin.id} coin={coin} />\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">No coins found matching \"{searchQuery}\"</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Creators Results */}\n              {showCreators && (\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-foreground font-bold text-xl\">\n                    Creators {filteredCreators.length > 0 && `(${filteredCreators.length})`}\n                  </h2>\n                  {filteredCreators.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {filteredCreators.slice(0, 6).map((creator) => (\n                        <div \n                          key={creator.id}\n                          className=\"spotify-card flex items-center gap-3 p-3 cursor-pointer group\"\n                          onClick={() => navigate(\"/creators\")}\n                        >\n                          <div className=\"w-10 h-10 rounded-full bg-primary flex items-center justify-center text-primary-foreground font-bold text-sm flex-shrink-0\">\n                            {creator.name ? creator.name.substring(0, 2).toUpperCase() : creator.address.substring(2, 4).toUpperCase()}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-foreground font-bold text-sm truncate\">\n                              {creator.name || formatAddress(creator.address)}\n                            </h3>\n                            <p className=\"text-muted-foreground text-xs\">Creator</p>\n                          </div>\n                          <ChevronRight className=\"w-4 h-4 text-muted-foreground group-hover:text-foreground transition-colors flex-shrink-0\" />\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">No creators found matching \"{searchQuery}\"</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* No Results */}\n              {!showResults && !showCreators && (\n                <div className=\"text-center py-16\">\n                  <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <SearchIcon className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-foreground font-bold text-xl mb-2\">No results found</h3>\n                  <p className=\"text-muted-foreground\">Try searching for something else</p>\n                </div>\n              )}\n            </>\n          ) : (\n            /* Empty state when no search */\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <SearchIcon className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-foreground font-bold text-xl mb-2\">Search coins and creators</h3>\n              <p className=\"text-muted-foreground\">Start typing to find what you're looking for</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":9412},"scripts/verify-registry.js":{"content":"\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst CONTRACT_ADDRESS = '0xa99d508b3d5f9e9bf4b18396250974e684529668';\nconst BASESCAN_API_KEY = process.env.BASESCAN_API_KEY;\n\nasync function verifyContract() {\n  console.log(\"🔍 Verifying contract on Basescan...\\n\");\n  console.log(\"📍 Contract:\", CONTRACT_ADDRESS);\n\n  if (!BASESCAN_API_KEY) {\n    throw new Error(\"BASESCAN_API_KEY environment variable not set\");\n  }\n\n  const contractPath = join(__dirname, '../contracts/YoubuidlChannelsRegistry.sol');\n  const sourceCode = readFileSync(contractPath, 'utf8');\n\n  const queryParams = new URLSearchParams({\n    chainid: '8453',\n    module: 'contract',\n    action: 'verifysourcecode',\n    apikey: BASESCAN_API_KEY\n  });\n\n  const formData = new URLSearchParams();\n  formData.append('contractaddress', CONTRACT_ADDRESS);\n  formData.append('sourceCode', sourceCode);\n  formData.append('codeformat', 'solidity-single-file');\n  formData.append('contractname', 'YoubuidlChannelsRegistry');\n  formData.append('compilerversion', 'v0.8.30+commit.73712a01');\n  formData.append('optimizationUsed', '1');\n  formData.append('runs', '200');\n  formData.append('constructorArguements', '');\n  formData.append('evmversion', 'cancun');\n  formData.append('licenseType', '3'); // MIT License\n\n  console.log(\"📤 Submitting verification request...\\n\");\n\n  const response = await fetch(`https://api.etherscan.io/v2/api?${queryParams}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData.toString()\n  });\n\n  const result = await response.json();\n\n  if (result.status === '1') {\n    const guid = result.result;\n    console.log(\"✅ Verification submitted successfully!\");\n    console.log(\"📝 GUID:\", guid);\n    console.log(\"\\n⏳ Checking verification status in 10 seconds...\\n\");\n\n    await new Promise(resolve => setTimeout(resolve, 10000));\n\n    const statusParams = new URLSearchParams({\n      chainid: '8453',\n      apikey: BASESCAN_API_KEY,\n      module: 'contract',\n      action: 'checkverifystatus',\n      guid: guid\n    });\n\n    const statusResponse = await fetch(`https://api.etherscan.io/v2/api?${statusParams}`);\n    const statusResult = await statusResponse.json();\n\n    if (statusResult.status === '1') {\n      console.log(\"✅ Contract verified successfully!\\n\");\n      console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\n      console.log(\"🔗 View verified contract:\");\n      console.log(`   https://basescan.org/address/${CONTRACT_ADDRESS}#code`);\n      console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\n    } else {\n      console.log(\"⏳ Verification pending...\");\n      console.log(\"   Status:\", statusResult.result);\n      console.log(\"\\n💡 Check status manually at:\");\n      console.log(`   https://basescan.org/address/${CONTRACT_ADDRESS}#code`);\n    }\n  } else {\n    console.error(\"❌ Verification failed:\");\n    console.error(\"   Message:\", result.message);\n    console.error(\"   Result:\", result.result);\n    \n    if (result.result && result.result.includes(\"already verified\")) {\n      console.log(\"\\n✅ Contract is already verified!\");\n      console.log(\"🔗 View at: https://basescan.org/address/\" + CONTRACT_ADDRESS + \"#code\");\n    }\n  }\n}\n\nverifyContract()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"\\n❌ Verification error:\", error.message);\n    process.exit(1);\n  });\n","size_bytes":3716},"client/src/lib/wagmi.ts":{"content":"import { getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { http } from 'wagmi';\nimport { base, baseSepolia } from 'wagmi/chains';\n\n// WalletConnect project ID - will be set via environment variable\nconst projectId = import.meta.env.VITE_WALLETCONNECT_PROJECT_ID || '';\n\nif (!projectId) {\n  console.warn('VITE_WALLETCONNECT_PROJECT_ID not set. Get one at https://cloud.walletconnect.com');\n}\n\nexport const config = getDefaultConfig({\n  appName: 'CoinIT',\n  projectId: projectId || 'demo-project-id', // Fallback for development\n  chains: [base, baseSepolia],\n  transports: {\n    [base.id]: http(),\n    [baseSepolia.id]: http(),\n  },\n  ssr: false,\n});\n","size_bytes":659},"scripts/deploy-registry.js":{"content":"import solc from 'solc';\nimport { createWalletClient, createPublicClient, http } from 'viem';\nimport { base } from 'viem/chains';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nasync function main() {\n  console.log(\"🚀 Deploying YoubuidlChannelsRegistry to Base Mainnet...\\n\");\n\n  const privateKey = process.env.DEPLOYER_PRIVATE_KEY;\n  if (!privateKey) {\n    throw new Error(\"DEPLOYER_PRIVATE_KEY environment variable not set\");\n  }\n\n  const account = privateKeyToAccount(privateKey);\n  console.log(\"📝 Deploying from account:\", account.address);\n\n  const publicClient = createPublicClient({\n    chain: base,\n    transport: http()\n  });\n\n  const balance = await publicClient.getBalance({ address: account.address });\n  console.log(\"💰 Account balance:\", (Number(balance) / 1e18).toFixed(6), \"ETH\\n\");\n\n  if (Number(balance) < 3e14) {\n    throw new Error(\"Insufficient balance. Need at least 0.0003 ETH for deployment\");\n  }\n\n  console.log(\"📦 Compiling contract...\");\n  const contractPath = join(__dirname, '../contracts/YoubuidlChannelsRegistry.sol');\n  const source = readFileSync(contractPath, 'utf8');\n\n  const input = {\n    language: 'Solidity',\n    sources: {\n      'YoubuidlChannelsRegistry.sol': {\n        content: source\n      }\n    },\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200\n      },\n      outputSelection: {\n        '*': {\n          '*': ['abi', 'evm.bytecode']\n        }\n      }\n    }\n  };\n\n  const output = JSON.parse(solc.compile(JSON.stringify(input)));\n\n  if (output.errors) {\n    const errors = output.errors.filter(e => e.severity === 'error');\n    if (errors.length > 0) {\n      console.error(\"❌ Compilation errors:\");\n      errors.forEach(err => console.error(err.formattedMessage));\n      process.exit(1);\n    }\n  }\n\n  const contract = output.contracts['YoubuidlChannelsRegistry.sol']['YoubuidlChannelsRegistry'];\n  const bytecode = `0x${contract.evm.bytecode.object}`;\n  const abi = contract.abi;\n\n  console.log(\"✅ Contract compiled successfully\\n\");\n\n  const walletClient = createWalletClient({\n    account,\n    chain: base,\n    transport: http()\n  });\n\n  console.log(\"🔨 Deploying contract to Base Mainnet...\");\n  console.log(\"⏳ This may take 30-60 seconds...\\n\");\n\n  const hash = await walletClient.deployContract({\n    abi,\n    bytecode,\n    account\n  });\n\n  console.log(\"📤 Transaction sent:\", hash);\n  console.log(\"⏳ Waiting for confirmation...\\n\");\n\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n\n  if (receipt.status === 'success') {\n    console.log(\"✅ Contract deployed successfully!\\n\");\n    console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\n    console.log(\"📍 Contract Address:\", receipt.contractAddress);\n    console.log(\"🔗 View on Basescan:\", `https://basescan.org/address/${receipt.contractAddress}`);\n    console.log(\"🔗 Transaction:\", `https://basescan.org/tx/${hash}`);\n    console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\");\n    console.log(\"📝 Next steps:\");\n    console.log(\"1. Add to Replit Secrets:\");\n    console.log(`   REGISTRY_CONTRACT_ADDRESS=${receipt.contractAddress}`);\n    console.log(\"\\n2. Verify contract on Basescan (optional)\");\n    console.log(\"\\n3. Set PLATFORM_PRIVATE_KEY in Replit Secrets\");\n    console.log(\"   (can be same as DEPLOYER_PRIVATE_KEY or different wallet)\");\n  } else {\n    console.error(\"❌ Deployment failed\");\n    process.exit(1);\n  }\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"\\n❌ Deployment error:\", error.message);\n    process.exit(1);\n  });\n","size_bytes":3944},"client/src/components/pool-config-debugger.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Copy, Trash2 } from \"lucide-react\";\n\nexport function PoolConfigDebugger() {\n  const [poolConfig, setPoolConfig] = useState(localStorage.getItem('manual_pool_config') || '');\n  const { toast } = useToast();\n\n  const handleSave = () => {\n    if (poolConfig && poolConfig.startsWith('0x')) {\n      localStorage.setItem('manual_pool_config', poolConfig);\n      toast({\n        title: \"PoolConfig Saved\",\n        description: \"This poolConfig will be used for your next coin deployment\",\n      });\n    } else {\n      toast({\n        title: \"Invalid PoolConfig\",\n        description: \"PoolConfig must start with '0x'\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClear = () => {\n    localStorage.removeItem('manual_pool_config');\n    setPoolConfig('');\n    toast({\n      title: \"PoolConfig Cleared\",\n      description: \"Will fetch poolConfig from Zora API on next deployment\",\n    });\n  };\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(poolConfig);\n    toast({\n      title: \"Copied!\",\n      description: \"PoolConfig copied to clipboard\",\n    });\n  };\n\n  const exampleConfigs = [\n    {\n      name: \"Working Base Mainnet Config (from 0xcaf755...)\",\n      description: \"Verified working poolConfig from successful Zora coin deployment\",\n      // This is a real poolConfig from a deployed coin on Base\n      // You can find more by checking recent coin deployments on Basescan\n      config: \"0x\" // Paste your copied poolConfig here when you find one\n    }\n  ];\n\n  const handleUseExample = (config: string) => {\n    setPoolConfig(config);\n    toast({\n      title: \"Example Loaded\",\n      description: \"You can now save this config for testing\",\n    });\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          🔧 PoolConfig Debugger\n        </CardTitle>\n        <CardDescription>\n          Manually set a poolConfig for testing coin deployment\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"poolConfig\">Manual PoolConfig (Hex)</Label>\n          <div className=\"flex gap-2\">\n            <Textarea\n              id=\"poolConfig\"\n              value={poolConfig}\n              onChange={(e) => setPoolConfig(e.target.value)}\n              placeholder=\"0x...\"\n              className=\"font-mono text-xs\"\n              rows={3}\n            />\n            {poolConfig && (\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleCopy}\n              >\n                <Copy className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Paste a working poolConfig from Zora's documentation or an existing coin\n          </p>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button onClick={handleSave} disabled={!poolConfig}>\n            Save for Testing\n          </Button>\n          <Button \n            onClick={handleClear} \n            variant=\"outline\"\n            disabled={!localStorage.getItem('manual_pool_config')}\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Clear & Use Auto-Fetch\n          </Button>\n        </div>\n\n        <div className=\"pt-4 border-t space-y-2\">\n          <p className=\"text-sm font-medium\">How to get a working poolConfig:</p>\n          <ol className=\"text-xs text-muted-foreground space-y-1 list-decimal list-inside\">\n            <li>Visit <a href=\"https://basescan.org/token/0xcaf75598b8b9a6e645b60d882845d361f549f5ec#code\" target=\"_blank\" className=\"text-primary hover:underline\">this successful Zora coin</a> on Basescan</li>\n            <li>Find the contract creation transaction</li>\n            <li>Look for the \"Input Data\" and decode to find poolConfig bytes</li>\n            <li>Or check the browser console for auto-fetched configs from our API</li>\n            <li>Or use the Zora API to query recent coins and extract their poolConfig</li>\n          </ol>\n        </div>\n\n        {exampleConfigs.map((example, idx) => (\n          <div key={idx} className=\"pt-4 border-t\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div>\n                <p className=\"text-sm font-medium\">{example.name}</p>\n                <p className=\"text-xs text-muted-foreground\">{example.description}</p>\n              </div>\n              {example.config && example.config !== \"0x\" && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => handleUseExample(example.config)}\n                >\n                  Use Example\n                </Button>\n              )}\n            </div>\n          </div>\n        ))}\n\n        <div className=\"pt-4 border-t\">\n          <p className=\"text-xs font-medium mb-2\">Current Status:</p>\n          <div className=\"bg-muted p-2 rounded text-xs font-mono\">\n            {localStorage.getItem('manual_pool_config') \n              ? `✅ Using manual config: ${localStorage.getItem('manual_pool_config')?.slice(0, 20)}...`\n              : '🔄 Will auto-fetch from Zora API'\n            }\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5697},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"hardhat.config.js":{"content":"import \"@nomicfoundation/hardhat-verify\";\n\nexport default {\n  solidity: {\n    version: \"0.8.20\",\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200\n      },\n      evmVersion: \"paris\"\n    }\n  },\n  networks: {\n    base: {\n      type: \"http\",\n      chainType: \"op\",\n      url: \"https://mainnet.base.org\",\n      chainId: 8453,\n      accounts: process.env.DEPLOYER_PRIVATE_KEY ? [process.env.DEPLOYER_PRIVATE_KEY] : []\n    }\n  },\n  etherscan: {\n    apiKey: {\n      base: process.env.BASESCAN_API_KEY || \"\"\n    },\n    customChains: [\n      {\n        network: \"base\",\n        chainId: 8453,\n        urls: {\n          apiURL: \"https://api.basescan.org/api\",\n          browserURL: \"https://basescan.org\"\n        }\n      }\n    ]\n  },\n  sourcify: {\n    enabled: false\n  }\n};\n","size_bytes":789},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/create-coin-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport URLInputForm from \"@/components/url-input-form\";\nimport ContentPreviewCard from \"@/components/content-preview-card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, Link, Image, Film, Music, FileText, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CreateCoinModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function CreateCoinModal({\n  open,\n  onOpenChange,\n}: CreateCoinModalProps) {\n  const [showPreview, setShowPreview] = useState(false);\n  const [scrapedData, setScrapedData] = useState<any>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [uploadPreviewUrl, setUploadPreviewUrl] = useState<string>(\"\");\n  const [uploadTitle, setUploadTitle] = useState(\"\");\n  const [uploadDescription, setUploadDescription] = useState(\"\");\n  const [uploadAuthor, setUploadAuthor] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const handleScrapedData = (data: any) => {\n    setScrapedData(data);\n    setShowPreview(true);\n  };\n\n  const handleCoinCreated = () => {\n    setShowPreview(false);\n    setScrapedData(null);\n    resetUploadForm();\n    onOpenChange(false);\n  };\n\n  const resetUploadForm = () => {\n    setUploadedFile(null);\n    setUploadPreviewUrl(\"\");\n    setUploadTitle(\"\");\n    setUploadDescription(\"\");\n    setUploadAuthor(\"\");\n  };\n\n  const handleOpenChange = (newOpen: boolean) => {\n    if (!newOpen) {\n      // Reset state when closing\n      setShowPreview(false);\n      setScrapedData(null);\n      resetUploadForm();\n    }\n    onOpenChange(newOpen);\n  };\n\n  const compressImage = async (file: File): Promise<File> => {\n    if (!file.type.startsWith('image/')) return file;\n    \n    // Skip compression for small images\n    if (file.size < 500 * 1024) return file;\n\n    return new Promise((resolve) => {\n      const img = new Image();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n\n      img.onload = () => {\n        // Calculate dimensions (max 1920px width)\n        let { width, height } = img;\n        const maxWidth = 1920;\n        \n        if (width > maxWidth) {\n          height = (height * maxWidth) / width;\n          width = maxWidth;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n        ctx?.drawImage(img, 0, 0, width, height);\n\n        canvas.toBlob(\n          (blob) => {\n            if (blob) {\n              const compressed = new File([blob], file.name, {\n                type: 'image/jpeg',\n                lastModified: Date.now(),\n              });\n              resolve(compressed.size < file.size ? compressed : file);\n            } else {\n              resolve(file);\n            }\n          },\n          'image/jpeg',\n          0.85\n        );\n      };\n\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type and size\n    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'video/mp4', 'video/webm', 'audio/mpeg', 'audio/wav'];\n    const maxSize = 100 * 1024 * 1024; // 100MB\n\n    if (!validTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload an image, video, or audio file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Maximum file size is 100MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Compress image if needed\n    const processedFile = file.type.startsWith('image/') \n      ? await compressImage(file)\n      : file;\n\n    setUploadedFile(processedFile);\n    const previewUrl = URL.createObjectURL(processedFile);\n    setUploadPreviewUrl(previewUrl);\n\n    // Auto-fill title from filename\n    if (!uploadTitle) {\n      const nameWithoutExt = file.name.replace(/\\.[^/.]+$/, \"\");\n      setUploadTitle(nameWithoutExt);\n    }\n  };\n\n  const handleUploadPreview = async () => {\n    if (!uploadedFile || !uploadTitle) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please upload a file and provide a title\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Upload file to Pinata with metadata\n      const formData = new FormData();\n      formData.append('file', uploadedFile);\n      formData.append('title', uploadTitle);\n      formData.append('description', uploadDescription);\n      formData.append('author', uploadAuthor);\n\n      const uploadRes = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!uploadRes.ok) {\n        throw new Error('Failed to upload file');\n      }\n\n      const uploadResult = await uploadRes.json();\n      console.log('Upload result:', uploadResult);\n\n      if (uploadResult.uploadData) {\n        setScrapedData(uploadResult.uploadData);\n        setShowPreview(true);\n\n        toast({\n          title: \"Upload successful\",\n          description: \"Review your content and create your coin\",\n        });\n      } else {\n        throw new Error('Invalid upload response');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload file. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const getFileIcon = () => {\n    if (!uploadedFile) return <FileText className=\"w-6 h-6\" />;\n    const type = uploadedFile.type.split('/')[0];\n    switch (type) {\n      case 'image': return <Image className=\"w-6 h-6\" />;\n      case 'video': return <Film className=\"w-6 h-6\" />;\n      case 'audio': return <Music className=\"w-6 h-6\" />;\n      default: return <FileText className=\"w-6 h-6\" />;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[85vh] overflow-y-auto p-4 rounded-full\">\n        <DialogHeader className=\"space-y-1\">\n          <DialogTitle className=\"text-xl font-bold text-foreground\">\n            Create a coin\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Transform your content into a tradeable digital asset\n          </p>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"import\" className=\"mt-3\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"import\" className=\"flex items-center gap-2\">\n              <Link className=\"w-4 h-4\" />\n              Import\n            </TabsTrigger>\n            <TabsTrigger value=\"upload\" className=\"flex items-center gap-2\">\n              <Upload className=\"w-4 h-4\" />\n              Upload\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"import\" className=\"mt-4\">\n            <URLInputForm onScraped={handleScrapedData} />\n          </TabsContent>\n\n          <TabsContent value=\"upload\" className=\"mt-4\">\n            <div className=\"space-y-4\">\n              <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                <input\n                  type=\"file\"\n                  id=\"modal-file-upload\"\n                  className=\"hidden\"\n                  accept=\"image/*,video/*,audio/*\"\n                  onChange={handleFileUpload}\n                />\n                <label htmlFor=\"modal-file-upload\" className=\"cursor-pointer\">\n                  <div className=\"flex flex-col items-center gap-2\">\n                    {uploadedFile ? (\n                      <>\n                        {getFileIcon()}\n                        <p className=\"text-sm font-medium text-foreground\">\n                          {uploadedFile.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {(uploadedFile.size / (1024 * 1024)).toFixed(2)} MB\n                        </p>\n                        {uploadPreviewUrl && uploadedFile.type.startsWith('image/') && (\n                          <img \n                            src={uploadPreviewUrl} \n                            alt=\"Preview\" \n                            className=\"mt-2 max-h-40 rounded-lg\"\n                          />\n                        )}\n                        {uploadPreviewUrl && uploadedFile.type.startsWith('video/') && (\n                          <video \n                            src={uploadPreviewUrl} \n                            controls\n                            className=\"mt-2 max-h-40 rounded-lg\"\n                          />\n                        )}\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"w-10 h-10 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-foreground\">\n                            Upload your content\n                          </p>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Images, Videos, or Audio (Max 100MB)\n                          </p>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </label>\n              </div>\n\n              {uploadedFile && (\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"modal-upload-title\" className=\"text-xs\">Title *</Label>\n                    <Input\n                      id=\"modal-upload-title\"\n                      value={uploadTitle}\n                      onChange={(e) => setUploadTitle(e.target.value)}\n                      placeholder=\"Enter content title\"\n                      className=\"mt-1.5 h-9 text-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"modal-upload-description\" className=\"text-xs\">Description</Label>\n                    <Textarea\n                      id=\"modal-upload-description\"\n                      value={uploadDescription}\n                      onChange={(e) => setUploadDescription(e.target.value)}\n                      placeholder=\"Describe your content (optional)\"\n                      className=\"mt-1.5 text-sm\"\n                      rows={2}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"modal-upload-author\" className=\"text-xs\">Creator Name</Label>\n                    <Input\n                      id=\"modal-upload-author\"\n                      value={uploadAuthor}\n                      onChange={(e) => setUploadAuthor(e.target.value)}\n                      placeholder=\"Your name (optional)\"\n                      className=\"mt-1.5 h-9 text-sm\"\n                    />\n                  </div>\n\n                  <Button \n                    onClick={handleUploadPreview}\n                    disabled={isUploading || !uploadTitle}\n                    className=\"w-full h-9\"\n                  >\n                    {isUploading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Uploading to IPFS...\n                      </>\n                    ) : (\n                      <>\n                        Preview & Create\n                      </>\n                    )}\n                  </Button>\n                  {isUploading && uploadedFile && (\n                    <p className=\"text-xs text-muted-foreground text-center mt-2\">\n                      Uploading {(uploadedFile.size / (1024 * 1024)).toFixed(2)} MB...\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {showPreview && scrapedData && (\n          <div className=\"mt-4\">\n            <ContentPreviewCard\n              scrapedData={scrapedData}\n              onCoinCreated={handleCoinCreated}\n            />\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12614},"client/src/pages/creators.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Creator, Coin } from \"@shared/schema\";\nimport {\n  Users,\n  TrendingUp,\n  Award,\n  Star,\n  ExternalLink,\n  Coins as CoinsIcon,\n  Flame,\n} from \"lucide-react\";\nimport Layout from \"@/components/layout\";\nimport { formatEther } from \"viem\";\nimport { useLocation } from \"wouter\";\nimport { createAvatar } from '@dicebear/core';\nimport { avataaars } from '@dicebear/collection';\nimport { getCoin, getProfileCoins } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { Button } from \"@/components/ui/button\";\nimport TradeModal from \"@/components/trade-modal\";\nimport ProfileCardModal from \"@/components/profile-card-modal\";\nimport { useAccount } from \"wagmi\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { formatSmartCurrency } from \"@/lib/utils\";\n\nexport default function Creators() {\n  const [, navigate] = useLocation();\n  const [selectedTab, setSelectedTab] = useState<\"top\" | \"rising\" | \"new\">(\n    \"top\",\n  );\n  const [selectedCoin, setSelectedCoin] = useState<Coin | null>(null);\n  const [selectedCreatorAddress, setSelectedCreatorAddress] = useState<string>(\"\");\n  const [isTradeModalOpen, setIsTradeModalOpen] = useState(false);\n  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);\n  const [creatorEarnings, setCreatorEarnings] = useState<Record<string, number>>({});\n  const { address: currentUserAddress } = useAccount();\n  const isMobile = useIsMobile();\n\n  const { data: creators = [], isLoading: creatorsLoading } = useQuery<\n    Creator[]\n  >({\n    queryKey: [\"/api/creators\"],\n  });\n\n  const { data: coins = [], isLoading: coinsLoading } = useQuery<Coin[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  // Calculate creator stats from real data\n  const [creatorMarketCaps, setCreatorMarketCaps] = useState<Record<string, string>>({});\n  const [creatorHolders, setCreatorHolders] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      const marketCapData: Record<string, string> = {};\n      const holdersData: Record<string, number> = {};\n      const earningsData: Record<string, number> = {};\n      \n      for (const creator of creators) {\n        const creatorCoins = coins.filter(\n          (coin) => coin.creator_wallet?.toLowerCase() === creator.address.toLowerCase(),\n        );\n\n        let totalMarketCapUSD = 0;\n        let totalHolders = 0;\n        let totalEarnings = 0;\n        \n        // Fetch market cap, holders, and earnings for each coin that has an address\n        await Promise.all(\n          creatorCoins.map(async (coin) => {\n            if (coin.address) {\n              try {\n                const response = await getCoin({\n                  address: coin.address as `0x${string}`,\n                  chain: base.id,\n                });\n                \n                const coinData = response.data?.zora20Token;\n                if (coinData?.marketCap) {\n                  // marketCap from API is already in USD\n                  totalMarketCapUSD += parseFloat(coinData.marketCap);\n                }\n                if (coinData?.uniqueHolders !== undefined) {\n                  totalHolders += coinData.uniqueHolders;\n                }\n                \n                // Calculate creator earnings from total volume (already in USD)\n                // Creator gets 50% of 1% total fees = 0.5% of trading volume\n                if (coinData?.totalVolume) {\n                  const totalVolumeUSD = parseFloat(coinData.totalVolume);\n                  const earningsUSD = totalVolumeUSD * 0.005; // 0.5% of volume\n                  totalEarnings += earningsUSD;\n                }\n              } catch (error) {\n                console.error(`Error fetching stats for ${coin.symbol}:`, error);\n              }\n            }\n          })\n        );\n\n        marketCapData[creator.address] = totalMarketCapUSD.toFixed(2);\n        holdersData[creator.address] = totalHolders;\n        earningsData[creator.address] = totalEarnings;\n      }\n      \n      setCreatorMarketCaps(marketCapData);\n      setCreatorHolders(holdersData);\n      setCreatorEarnings(earningsData);\n    };\n\n    if (creators.length > 0 && coins.length > 0) {\n      fetchStats();\n    }\n  }, [creators, coins]);\n\n  const enrichedCreators = creators.map((creator) => {\n    const creatorCoins = coins.filter(\n      (coin) => coin.creator_wallet?.toLowerCase() === creator.address.toLowerCase(),\n    );\n\n    // Use real market cap from fetched data, or 0 if not available yet\n    const totalMarketCap = creatorMarketCaps[creator.address] || \"0.0000\";\n    const totalHolders = creatorHolders[creator.address] || 0;\n    const totalEarnings = creatorEarnings[creator.address] || 0;\n\n    // Calculate total volume from coin creation (mock for now as we don't track actual trading volume)\n    const totalVolume = (creatorCoins.length * 0.001).toFixed(3);\n\n    return {\n      ...creator,\n      totalCoins: creatorCoins.length,\n      totalVolume,\n      totalMarketCap,\n      totalHolders,\n      totalEarnings,\n      coins: creatorCoins,\n      // Use database avatar (prioritize avatar field, then profileImage) or generate dicebear avatar as fallback only if no custom avatar exists\n      avatarUrl: creator.avatar || creator.profileImage || createAvatar(avataaars, {\n        seed: creator.address,\n        size: 56,\n      }).toDataUri(),\n      // Mock followers based on coin count and address\n      followers: Math.floor(\n        creatorCoins.length * 50 + parseInt(creator.address.slice(-2), 16) * 10,\n      ),\n      verified: creatorCoins.length >= 3, // Auto-verify creators with 3+ coins\n    };\n  });\n\n  // Filter creators based on selected tab\n  const filteredCreators = enrichedCreators\n    .filter((creator) => creator.totalCoins > 0) // Only show creators with coins\n    .sort((a, b) => {\n      switch (selectedTab) {\n        case \"top\":\n          // Sort by earnings first, then by coins\n          return (b.totalEarnings || 0) - (a.totalEarnings || 0) || b.totalCoins - a.totalCoins;\n        case \"rising\":\n          // Sort by recent activity (coins created in last 7 days)\n          const recentCoinsA = coins.filter(\n            (coin) =>\n              coin.creator_wallet?.toLowerCase() === a.address.toLowerCase() &&\n              new Date(coin.createdAt).getTime() >\n                Date.now() - 7 * 24 * 60 * 60 * 1000,\n          ).length;\n          const recentCoinsB = coins.filter(\n            (coin) =>\n              coin.creator_wallet?.toLowerCase() === b.address.toLowerCase() &&\n              new Date(coin.createdAt).getTime() >\n                Date.now() - 7 * 24 * 60 * 60 * 1000,\n          ).length;\n          return recentCoinsB - recentCoinsA || b.totalCoins - a.totalCoins;\n        case \"new\":\n          // Sort by creation date (newest first)\n          return (\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          );\n        default:\n          return b.totalCoins - a.totalCoins;\n      }\n    });\n\n  const formatAddress = (address: string) => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const formatAge = (dateString: string) => {\n    const now = new Date();\n    const created = new Date(dateString);\n    const diff = now.getTime() - created.getTime();\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    if (days < 1) return \"today\";\n    if (days < 30) return days + \"d\";\n    if (days < 365) return Math.floor(days / 30) + \"m\";\n    return Math.floor(days / 365) + \"y\";\n  };\n\n  const getAvatarBgColor = (index: number) => {\n    const colors = [\n      'bg-pink-200 dark:bg-pink-300',\n      'bg-purple-200 dark:bg-purple-300', \n      'bg-yellow-200 dark:bg-yellow-300',\n      'bg-blue-200 dark:bg-blue-300',\n      'bg-green-200 dark:bg-green-300',\n      'bg-orange-200 dark:bg-orange-300',\n      'bg-red-200 dark:bg-red-300',\n      'bg-indigo-200 dark:bg-indigo-300',\n    ];\n    return colors[index % colors.length];\n  };\n\n  const getRankColor = (index: number) => {\n    const colors = [\n      'text-pink-600 dark:text-pink-500',\n      'text-purple-600 dark:text-purple-500',\n      'text-yellow-600 dark:text-yellow-500',\n      'text-blue-600 dark:text-blue-500',\n      'text-green-600 dark:text-green-500',\n      'text-orange-600 dark:text-orange-500',\n      'text-red-600 dark:text-red-500',\n      'text-indigo-600 dark:text-indigo-500',\n    ];\n    return colors[index % colors.length];\n  };\n\n  const isLoading = creatorsLoading || coinsLoading;\n\n  return (\n    <Layout>\n      <div className=\"p-4 sm:p-8 overflow-x-hidden\">\n        <div className=\"max-w-5xl mx-auto\">\n          <div className=\"mb-6 sm:mb-8\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div>\n                <h1 className=\"text-xl sm:text-2xl font-black mb-3 sm:mb-4 text-foreground\">\n                  Top <span className=\"spotify-green\">Creators</span>\n                </h1>\n                <p className=\"text-sm sm:text-base text-muted-foreground\">\n                  Discover the most successful content creators on CoinIT.\n                </p>\n              </div>\n\n              {/* Inline Stats */}\n              <div className=\"flex flex-wrap gap-4 sm:gap-6 text-left lg:text-right\">\n                <div className=\"text-center lg:text-right\">\n                  <div className=\"text-lg sm:text-xl font-black text-foreground\">\n                    {filteredCreators.length}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground whitespace-nowrap\">\n                    Active Creators\n                  </div>\n                </div>\n                <div className=\"text-center lg:text-right\">\n                  <div className=\"text-lg sm:text-xl font-black text-foreground\">\n                    $\n                    {filteredCreators\n                      .reduce(\n                        (acc, creator) => acc + parseFloat(creator.totalMarketCap),\n                        0,\n                      )\n                      .toFixed(2)}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground whitespace-nowrap\">\n                    Total Market Cap\n                  </div>\n                </div>\n                <div className=\"text-center lg:text-right\">\n                  <div className=\"text-lg sm:text-xl font-black text-green-500\">\n                    {formatSmartCurrency(\n                      filteredCreators\n                        .reduce(\n                          (acc, creator) => acc + (creator.totalEarnings || 0),\n                          0,\n                        )\n                    )}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground whitespace-nowrap\">\n                    Total Earnings\n                  </div>\n                </div>\n                <div className=\"text-center lg:text-right\">\n                  <div className=\"text-lg sm:text-xl font-black text-foreground\">\n                    {filteredCreators.length > 0\n                      ? Math.round(\n                          filteredCreators.reduce(\n                            (acc, creator) => acc + creator.totalCoins,\n                            0,\n                          ) / filteredCreators.length,\n                        )\n                      : 0}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground whitespace-nowrap\">\n                    Avg. Coins\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Filter Tabs */}\n          <div className=\"flex gap-2 sm:gap-4 mb-6 sm:mb-8 overflow-x-auto pb-2 -mx-4 px-4 sm:mx-0 sm:px-0 sm:overflow-visible\">\n            <button\n              onClick={() => setSelectedTab(\"top\")}\n              className={`px-4 sm:px-6 py-2 rounded-full text-sm font-semibold transition-colors whitespace-nowrap flex-shrink-0 ${\n                selectedTab === \"top\"\n                  ? \"bg-primary text-black\"\n                  : \"bg-muted/20 text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              Top Creators\n            </button>\n            <button\n              onClick={() => setSelectedTab(\"rising\")}\n              className={`px-4 sm:px-6 py-2 rounded-full text-sm font-semibold transition-colors whitespace-nowrap flex-shrink-0 ${\n                selectedTab === \"rising\"\n                  ? \"bg-primary text-black\"\n                  : \"bg-muted/20 text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              Rising Stars\n            </button>\n            <button\n              onClick={() => setSelectedTab(\"new\")}\n              className={`px-4 sm:px-6 py-2 rounded-full text-sm font-semibold transition-colors whitespace-nowrap flex-shrink-0 ${\n                selectedTab === \"new\"\n                  ? \"bg-primary text-black\"\n                  : \"bg-muted/20 text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              New Creators\n            </button>\n          </div>\n\n          {/* Loading State */}\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"spotify-card rounded-xl p-4 sm:p-6\">\n                  <div className=\"flex items-center gap-3 sm:gap-4\">\n                    <div className=\"w-12 h-12 sm:w-14 sm:h-14 bg-muted/20 rounded-full animate-pulse flex-shrink-0\"></div>\n                    <div className=\"flex-1 min-w-0 space-y-2\">\n                      <div className=\"h-5 bg-muted/20 rounded w-32 sm:w-40 animate-pulse\"></div>\n                      <div className=\"h-4 bg-muted/20 rounded w-24 sm:w-32 animate-pulse\"></div>\n                    </div>\n                    <div className=\"text-right space-y-2 flex-shrink-0\">\n                      <div className=\"h-5 bg-muted/20 rounded w-20 animate-pulse\"></div>\n                      <div className=\"h-4 bg-muted/20 rounded w-16 animate-pulse\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredCreators.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-2\">\n                No creators yet\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Be the first to create a coin and become a creator!\n              </p>\n            </div>\n          ) : (\n            /* Creators List - Mobile Leaderboard Style */\n            <div className=\"space-y-3\">\n              {filteredCreators.map((creator, index) => {\n                const isCurrentUser = currentUserAddress && creator.address.toLowerCase() === currentUserAddress.toLowerCase();\n                const createdDaysAgo = Math.floor((Date.now() - new Date(creator.createdAt).getTime()) / (1000 * 60 * 60 * 24));\n                const isVeteran = createdDaysAgo >= 365; // 1+ year\n\n                return (\n                  <div\n                    key={creator.id}\n                    className={`rounded-2xl overflow-hidden transition-all ${\n                      isCurrentUser \n                        ? 'bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30' \n                        : 'bg-card'\n                    }`}\n                    data-testid={`creator-${creator.address}`}\n                  >\n                    {/* Mobile Layout */}\n                    <div className=\"flex sm:hidden flex-col p-3\">\n                      {/* First Row: Rank, Avatar, Name, Trade Button */}\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        {/* Rank Number */}\n                        <div className={`text-2xl font-black ${getRankColor(index)} flex-shrink-0 w-8`}>\n                          {index + 1}\n                        </div>\n\n                        {/* Avatar with colored background */}\n                        <div \n                          className={`relative flex-shrink-0 cursor-pointer rounded-full p-0.5 ${getAvatarBgColor(index)}`}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setSelectedCreatorAddress(creator.address);\n                            setIsProfileModalOpen(true);\n                          }}\n                        >\n                          <img\n                            src={creator.avatarUrl}\n                            alt={creator.name || creator.address}\n                            className=\"w-9 h-9 rounded-full\"\n                            data-testid={`avatar-${creator.address}`}\n                          />\n                        </div>\n\n                        {/* Creator Info */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-1.5\">\n                            <h3 className=\"text-foreground font-bold text-sm truncate\" data-testid={`name-${creator.address}`}>\n                              {isCurrentUser ? 'You' : (creator.name || formatAddress(creator.address))}\n                            </h3>\n                            {index === 0 && (\n                              <Award className=\"w-4 h-4 text-yellow-500 flex-shrink-0\" />\n                            )}\n                          </div>\n                          {isVeteran && (\n                            <div className=\"flex items-center gap-1 mt-1\">\n                              <Flame className=\"w-3 h-3 text-orange-500\" />\n                              <span className=\"text-xs text-orange-600 dark:text-orange-500 font-medium\">1+ year</span>\n                            </div>\n                          )}\n                        </div>\n\n                        \n                      </div>\n\n                      {/* Second Row: Stats Grid */}\n                      <div className=\"grid grid-cols-4 gap-1.5 pl-11\">\n                        <div className=\"text-center\">\n                          <div className=\"text-foreground font-bold text-xs\" data-testid={`mobile-coins-${creator.address}`}>\n                            {creator.totalCoins}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Coins\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-foreground font-bold text-sm\" data-testid={`mobile-marketcap-${creator.address}`}>\n                            ${creator.totalMarketCap}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Market Cap\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-foreground font-bold text-sm\" data-testid={`mobile-holders-${creator.address}`}>\n                            {creator.totalHolders}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Holders\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-green-500 font-bold text-sm\" data-testid={`mobile-earnings-${creator.address}`}>\n                            {formatSmartCurrency(creator.totalEarnings)}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Earnings\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Desktop Layout */}\n                    <div className=\"hidden sm:flex items-center gap-2 p-2 hover:bg-muted/5 transition-colors\">\n                      <div \n                        className=\"relative flex-shrink-0 cursor-pointer\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setSelectedCreatorAddress(creator.address);\n                          setIsProfileModalOpen(true);\n                        }}\n                      >\n                        <img\n                          src={creator.avatarUrl}\n                          alt={creator.name || creator.address}\n                          className=\"w-10 h-10 rounded-full hover:ring-2 hover:ring-primary transition-all\"\n                          data-testid={`avatar-${creator.address}`}\n                        />\n                        {index < 3 && (\n                          <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-primary rounded-full flex items-center justify-center text-[10px] font-bold text-black\">\n                            {index + 1}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0 grid grid-cols-5 gap-2 items-center\">\n                        <div className=\"min-w-0\">\n                          <h3 className=\"text-foreground font-bold text-sm truncate flex items-center gap-1\" data-testid={`name-${creator.address}`}>\n                            {creator.name || formatAddress(creator.address)}\n                            {index === 0 && (\n                              <Award className=\"w-3 h-3 text-yellow-500 flex-shrink-0\" />\n                            )}\n                          </h3>\n                          <p className=\"text-muted-foreground text-[10px] font-mono\">\n                            {formatAddress(creator.address)}\n                          </p>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-foreground font-bold text-sm\" data-testid={`coins-${creator.address}`}>\n                            {creator.totalCoins}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Coins\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-foreground font-bold text-sm\" data-testid={`marketcap-${creator.address}`}>\n                            ${creator.totalMarketCap}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Market Cap\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-foreground font-bold text-sm\" data-testid={`holders-${creator.address}`}>\n                            {creator.totalHolders}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Holders\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-green-500 font-bold text-sm\" data-testid={`earnings-${creator.address}`}>\n                            {formatSmartCurrency(creator.totalEarnings)}\n                          </div>\n                          <div className=\"text-muted-foreground text-[10px]\">\n                            Earnings\n                          </div>\n                        </div>\n                        \n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Trade Modal */}\n      {selectedCoin && (\n        <TradeModal\n          coin={selectedCoin}\n          open={isTradeModalOpen}\n          onOpenChange={setIsTradeModalOpen}\n        />\n      )}\n\n      {/* Profile Card Modal */}\n      <ProfileCardModal\n        creatorAddress={selectedCreatorAddress}\n        open={isProfileModalOpen}\n        onOpenChange={setIsProfileModalOpen}\n      />\n    </Layout>\n  );\n}\n","size_bytes":24564},"client/src/pages/create.tsx":{"content":"import { useState } from \"react\";\nimport URLInputForm from \"@/components/url-input-form\";\nimport ContentPreviewCard from \"@/components/content-preview-card\";\nimport Layout from \"@/components/layout\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Upload,\n  Link as LinkIcon,\n  Image,\n  Film,\n  Music,\n  FileText,\n  Loader2,\n  Sparkles,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype TabType = \"import\" | \"upload\";\n\nexport default function Create() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [scrapedData, setScrapedData] = useState<any>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [uploadPreviewUrl, setUploadPreviewUrl] = useState<string>(\"\");\n  const [uploadTitle, setUploadTitle] = useState(\"\");\n  const [uploadDescription, setUploadDescription] = useState(\"\");\n  const [uploadAuthor, setUploadAuthor] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [activeTab, setActiveTab] = useState<TabType>(\"import\");\n  const { toast } = useToast();\n\n  const handleScrapedData = (data: any) => {\n    setScrapedData(data);\n    setShowPreview(true);\n  };\n\n  const handleCoinCreated = () => {\n    setShowPreview(false);\n    setScrapedData(null);\n    resetUploadForm();\n  };\n\n  const resetUploadForm = () => {\n    setUploadedFile(null);\n    setUploadPreviewUrl(\"\");\n    setUploadTitle(\"\");\n    setUploadDescription(\"\");\n    setUploadAuthor(\"\");\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    const validTypes = [\n      \"image/jpeg\",\n      \"image/png\",\n      \"image/gif\",\n      \"image/webp\",\n      \"video/mp4\",\n      \"video/webm\",\n      \"video/quicktime\",\n      \"audio/mpeg\",\n      \"audio/wav\",\n      \"audio/mp3\",\n      \"audio/ogg\",\n      \"audio/aac\",\n    ];\n    const maxSize = 100 * 1024 * 1024; // 100MB\n\n    if (!validTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload an image, video, or audio file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Maximum file size is 100MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadedFile(file);\n    const previewUrl = URL.createObjectURL(file);\n    setUploadPreviewUrl(previewUrl);\n\n    if (!uploadTitle) {\n      const nameWithoutExt = file.name.replace(/\\.[^/.]+$/, \"\");\n      setUploadTitle(nameWithoutExt);\n    }\n  };\n\n  const handleUploadPreview = async () => {\n    if (!uploadedFile || !uploadTitle) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please upload a file and provide a title\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", uploadedFile);\n      formData.append(\"title\", uploadTitle);\n      formData.append(\"description\", uploadDescription);\n      formData.append(\"author\", uploadAuthor);\n\n      const uploadRes = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!uploadRes.ok) {\n        throw new Error(\"Failed to upload file\");\n      }\n\n      const { uploadData } = await uploadRes.json();\n\n      setScrapedData(uploadData);\n      setShowPreview(true);\n\n      toast({\n        title: \"Upload successful\",\n        description: \"Review your content and create your coin\",\n      });\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload file. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const getFileIcon = () => {\n    if (!uploadedFile) return <FileText className=\"w-6 h-6\" />;\n    const type = uploadedFile.type.split(\"/\")[0];\n    switch (type) {\n      case \"image\":\n        return <Image className=\"w-6 h-6\" />;\n      case \"video\":\n        return <Film className=\"w-6 h-6\" />;\n      case \"audio\":\n        return <Music className=\"w-6 h-6\" />;\n      default:\n        return <FileText className=\"w-6 h-6\" />;\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-4 sm:p-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8 text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-3\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              <h1 className=\"text-2xl sm:text-3xl font-black text-foreground\">\n                Create Your Coin\n              </h1>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Transform any content into a tradeable digital asset\n            </p>\n          </div>\n\n          {/* Compact Tab Switcher */}\n          <div className=\"flex items-center justify-center gap-2 mb-6\">\n            <button\n              onClick={() => setActiveTab(\"import\")}\n              className={`\n                relative flex items-center gap-2 px-6 py-2.5 rounded-full text-sm font-semibold transition-all\n                ${\n                  activeTab === \"import\"\n                    ? \"bg-gradient-to-r from-primary to-secondary text-primary-foreground\"\n                    : \"bg-muted/50 text-muted-foreground hover:bg-muted hover:text-foreground\"\n                }\n              `}\n            >\n              <LinkIcon className=\"w-4 h-4\" />\n              Import URL\n            </button>\n            <button\n              onClick={() => setActiveTab(\"upload\")}\n              className={`\n                relative flex items-center gap-2 px-6 py-2.5 rounded-full text-sm font-semibold transition-all\n                ${\n                  activeTab === \"upload\"\n                    ? \"bg-gradient-to-r from-primary to-secondary text-primary-foreground\"\n                    : \"bg-muted/50 text-muted-foreground hover:bg-muted hover:text-foreground\"\n                }\n              `}\n            >\n              <Upload className=\"w-4 h-4\" />\n              Upload File\n            </button>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"mb-6\">\n            {activeTab === \"import\" ? (\n              <URLInputForm onScraped={handleScrapedData} />\n            ) : (\n              <div className=\"max-w-xl mx-auto\">\n                <div className=\"bg-card border border-border/50 rounded-3xl p-8\">\n                  <div className=\"space-y-6\">\n                    {/* Upload Area */}\n                    <div className=\"border-2 border-dashed border-border/40 rounded-2xl p-10 text-center bg-muted/20 hover:border-primary/50 transition-all hover:bg-muted/30\">\n                      <input\n                        type=\"file\"\n                        id=\"file-upload\"\n                        className=\"hidden\"\n                        accept=\"image/*,video/*,audio/*,.mov\"\n                        onChange={handleFileUpload}\n                      />\n                      <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                        <div className=\"flex flex-col items-center gap-4\">\n                          {uploadedFile ? (\n                            <>\n                              <div className=\"p-4 rounded-2xl bg-primary/10\">\n                                {getFileIcon()}\n                              </div>\n                              <div className=\"space-y-1\">\n                                <p className=\"text-sm font-semibold text-foreground\">\n                                  {uploadedFile.name}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {(uploadedFile.size / (1024 * 1024)).toFixed(\n                                    2,\n                                  )}{\" \"}\n                                  MB\n                                </p>\n                              </div>\n                              {uploadPreviewUrl &&\n                                uploadedFile.type.startsWith(\"image/\") && (\n                                  <img\n                                    src={uploadPreviewUrl}\n                                    alt=\"Preview\"\n                                    className=\"mt-2 max-h-48 rounded-2xl shadow-xl\"\n                                  />\n                                )}\n                              {uploadPreviewUrl &&\n                                uploadedFile.type.startsWith(\"video/\") && (\n                                  <video\n                                    src={uploadPreviewUrl}\n                                    controls\n                                    className=\"mt-2 max-h-48 rounded-2xl shadow-xl\"\n                                  />\n                                )}\n                            </>\n                          ) : (\n                            <>\n                              <div className=\"p-5 rounded-2xl bg-gradient-to-br from-primary/20 to-secondary/20 mb-2\">\n                                <Upload className=\"w-10 h-10 text-primary\" />\n                              </div>\n                              <div className=\"space-y-2\">\n                                <p className=\"text-base font-semibold text-foreground\">\n                                  Drag & drop or click to upload\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Images, Videos, or Audio • Max 50MB\n                                </p>\n                              </div>\n                            </>\n                          )}\n                        </div>\n                      </label>\n                    </div>\n\n                    {/* Form Fields - Only show if file is uploaded */}\n                    {uploadedFile && (\n                      <div className=\"space-y-5 pt-2 border-t border-border/30\">\n                        <div className=\"space-y-2\">\n                          <Label\n                            htmlFor=\"upload-title\"\n                            className=\"text-sm font-medium text-foreground\"\n                          >\n                            Title <span className=\"text-red-500\">*</span>\n                          </Label>\n                          <div className=\"bg-muted/30 dark:bg-muted/20 rounded-2xl p-1 border border-border/30\">\n                            <Input\n                              id=\"upload-title\"\n                              value={uploadTitle}\n                              onChange={(e) => setUploadTitle(e.target.value)}\n                              placeholder=\"Enter content title\"\n                              className=\"bg-transparent border-0 h-11 px-4 focus-visible:ring-0 focus-visible:ring-offset-0\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label\n                            htmlFor=\"upload-description\"\n                            className=\"text-sm font-medium text-foreground\"\n                          >\n                            Description\n                          </Label>\n                          <div className=\"bg-muted/30 dark:bg-muted/20 rounded-2xl p-1 border border-border/30\">\n                            <Textarea\n                              id=\"upload-description\"\n                              value={uploadDescription}\n                              onChange={(e) =>\n                                setUploadDescription(e.target.value)\n                              }\n                              placeholder=\"Describe your content (optional)\"\n                              className=\"bg-transparent border-0 resize-none px-4 focus-visible:ring-0 focus-visible:ring-offset-0\"\n                              rows={3}\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label\n                            htmlFor=\"upload-author\"\n                            className=\"text-sm font-medium text-foreground\"\n                          >\n                            Creator Name\n                          </Label>\n                          <div className=\"bg-muted/30 dark:bg-muted/20 rounded-2xl p-1 border border-border/30\">\n                            <Input\n                              id=\"upload-author\"\n                              value={uploadAuthor}\n                              onChange={(e) => setUploadAuthor(e.target.value)}\n                              placeholder=\"Your name or username (optional)\"\n                              className=\"bg-transparent border-0 h-11 px-4 focus-visible:ring-0 focus-visible:ring-offset-0\"\n                            />\n                          </div>\n                        </div>\n\n                        <Button\n                          onClick={handleUploadPreview}\n                          disabled={isUploading || !uploadTitle}\n                          className=\"w-full h-12 bg-gradient-to-r from-primary to-primary hover:from-primary/100 hover:to-primary/90 text-primary-foreground font-semibold rounded-2xl transition-all\"\n                        >\n                          {isUploading ? (\n                            <>\n                              <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                              Uploading...\n                            </>\n                          ) : (\n                            <>\n                              <Sparkles className=\"w-5 h-5 mr-2\" />\n                              Preview & Create Coin\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Preview Modal */}\n          <Dialog open={showPreview} onOpenChange={setShowPreview}>\n            <DialogContent className=\"max-w-lg w-[92vw] max-h-[80vh] overflow-y-auto bg-card border-border/50 rounded-3xl p-0 gap-0\">\n              <DialogHeader className=\"px-5 pt-5 pb-3 border-b border-border/30\">\n                <DialogTitle className=\"text-lg font-bold text-foreground\">\n                  Preview & Create Coin\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"px-5 py-4\">\n                {scrapedData && (\n                  <ContentPreviewCard\n                    scrapedData={scrapedData}\n                    onCoinCreated={handleCoinCreated}\n                  />\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":15211},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/platform-scrapers.ts":{"content":"import axios from \"axios\";\nimport * as cheerio from \"cheerio\";\nimport { type PlatformType } from \"./platform-detector\";\n\nexport interface ScrapedData {\n  url: string;\n  platform: PlatformType;\n  title: string;\n  description?: string;\n  author?: string;\n  publishDate?: string;\n  image?: string;\n  animation_url?: string;\n  type?: string;\n  content?: string;\n  tags?: string[];\n  followers?: number;\n  engagement?: number;\n}\n\nconst ENSEMBLE_API_KEY = \"7eAd2jIty0ouYF7q\";\nconst ENSEMBLE_BASE_URL = \"https://ensembledata.com/apis\";\n\n// Instagram - using EnsembleData API (supports both profiles and posts)\nasync function scrapeInstagramOembed(url: string): Promise<ScrapedData> {\n  try {\n    // Check if it's a post URL\n    const postMatch = url.match(/instagram\\.com\\/(p|reel|tv)\\/([^\\/\\?]+)/);\n    \n    if (postMatch) {\n      // Scrape post\n      const shortcode = postMatch[2];\n\n      const postInfoUrl = `${ENSEMBLE_BASE_URL}/ig/post/info`;\n      const response = await axios.get(postInfoUrl, {\n        params: {\n          shortcode,\n          token: ENSEMBLE_API_KEY,\n        },\n        timeout: 15000,\n      });\n\n      const postData = response.data?.data;\n      if (!postData) throw new Error('No post data found');\n\n      const post = postData.items?.[0] || postData;\n      const owner = post.owner || post.user || {};\n\n      return {\n        url,\n        platform: 'instagram',\n        title: `Instagram Post by @${owner.username || 'user'}`,\n        author: owner.full_name || owner.username || 'Instagram User',\n        description: post.caption?.text || post.edge_media_to_caption?.edges?.[0]?.node?.text || 'Instagram post',\n        image: post.display_url || post.thumbnail_url || post.image_versions2?.candidates?.[0]?.url || '',\n        content: post.caption?.text || post.edge_media_to_caption?.edges?.[0]?.node?.text || '',\n        followers: post.like_count || post.edge_media_preview_like?.count || 0,\n        engagement: post.comment_count || post.edge_media_to_comment?.count || 0,\n      };\n    }\n\n    // Extract username from profile URL\n    const usernameMatch = url.match(/instagram\\.com\\/([^\\/\\?]+)/);\n    if (!usernameMatch) throw new Error('Invalid Instagram URL');\n\n    const username = usernameMatch[1];\n\n    // Get user info using EnsembleData\n    const userInfoUrl = `${ENSEMBLE_BASE_URL}/ig/user/info`;\n    const response = await axios.get(userInfoUrl, {\n      params: {\n        username,\n        token: ENSEMBLE_API_KEY,\n      },\n      timeout: 15000,\n    });\n\n    const userData = response.data?.data;\n    if (!userData) throw new Error('No user data found');\n\n    return {\n      url,\n      platform: 'instagram',\n      title: `Instagram - @${username}`,\n      author: userData.full_name || username,\n      description: userData.biography || `Instagram profile for @${username}`,\n      image: userData.profile_pic_url || '',\n      content: userData.biography || '',\n      followers: userData.follower_count || 0,\n      engagement: userData.media_count || 0,\n    };\n  } catch (error) {\n    console.error('Instagram scraping error:', error);\n    const username = url.match(/instagram\\.com\\/([^\\/\\?]+)/)?.[1] || 'user';\n    return {\n      url,\n      platform: 'instagram',\n      title: `Instagram - @${username}`,\n      author: username,\n      description: `Instagram profile for @${username}`,\n      content: `Profile for @${username}`,\n      followers: 0,\n    };\n  }\n}\n\n// TikTok - using EnsembleData API (supports both profiles and videos)\nasync function scrapeTikTokOembed(url: string): Promise<ScrapedData> {\n  try {\n    // Check if it's a video URL\n    const videoMatch = url.match(/tiktok\\.com\\/@([^\\/\\?]+)\\/video\\/(\\d+)/);\n    \n    if (videoMatch) {\n      // Scrape video\n      const username = videoMatch[1];\n      const videoId = videoMatch[2];\n\n      const videoInfoUrl = `${ENSEMBLE_BASE_URL}/tt/post/info`;\n      const response = await axios.get(videoInfoUrl, {\n        params: {\n          link: url,\n          token: ENSEMBLE_API_KEY,\n        },\n        timeout: 15000,\n      });\n\n      const videoData = response.data?.data;\n      if (!videoData) throw new Error('No video data found');\n\n      const video = videoData.video || videoData.itemInfo?.itemStruct || videoData;\n      const author = video.author || videoData.author || {};\n      const stats = video.stats || videoData.stats || {};\n\n      // Extract video URL for playback\n      const videoUrl = video.video?.downloadAddr || \n                      video.video?.playAddr || \n                      video.downloadAddr ||\n                      video.playAddr ||\n                      '';\n\n      return {\n        url,\n        platform: 'tiktok',\n        title: video.desc || video.title || `TikTok Video by @${username}`,\n        author: author.nickname || author.uniqueId || username,\n        description: video.desc || `TikTok video by @${username}`,\n        image: video.video?.cover || video.cover || author.avatarLarger || '',\n        animation_url: videoUrl,\n        type: 'video',\n        content: video.desc || '',\n        followers: stats.diggCount || stats.playCount || 0,\n        engagement: stats.shareCount || stats.commentCount || 0,\n      };\n    }\n\n    // Extract username from profile URL\n    const usernameMatch = url.match(/tiktok\\.com\\/@([^\\/\\?]+)/);\n    if (!usernameMatch) throw new Error('Invalid TikTok URL');\n\n    const username = usernameMatch[1];\n\n    // Get user info using EnsembleData\n    const userInfoUrl = `${ENSEMBLE_BASE_URL}/tt/user/info`;\n    const response = await axios.get(userInfoUrl, {\n      params: {\n        username,\n        token: ENSEMBLE_API_KEY,\n      },\n      timeout: 15000,\n    });\n\n    const userData = response.data?.data;\n    if (!userData) throw new Error('No user data found');\n\n    const user = userData.user || userData.userInfo || userData;\n    const stats = userData.stats || userData.userInfo?.stats || user.stats || {};\n\n    const followerCount = stats.followerCount || stats.follower_count || user.followerCount || user.follower_count || 0;\n    const videoCount = stats.videoCount || stats.video_count || user.videoCount || user.video_count || 0;\n\n    // Get the best available avatar image\n    const avatarImage = user.avatarLarger || \n                       user.avatarMedium || \n                       user.avatar_larger?.url_list?.[0] || \n                       user.avatar_medium?.url_list?.[0] ||\n                       user.avatar_thumb?.url_list?.[0] || \n                       user.avatarThumb || \n                       '';\n\n    console.log('TikTok profile image URL:', avatarImage);\n\n    return {\n      url,\n      platform: 'tiktok',\n      title: `TikTok - @${username}`,\n      author: user.nickname || user.uniqueId || username,\n      description: user.signature || user.bio || `TikTok profile for @${username}`,\n      image: avatarImage,\n      content: user.signature || user.bio || '',\n      followers: followerCount,\n      engagement: videoCount,\n      type: 'profile', // Explicitly mark as profile to avoid video rendering\n    };\n  } catch (error) {\n    console.error('TikTok scraping error:', error);\n    const username = url.match(/tiktok\\.com\\/@([^\\/\\?]+)/)?.[1] || 'user';\n    return {\n      url,\n      platform: 'tiktok',\n      title: `TikTok - @${username}`,\n      author: username,\n      description: `TikTok profile for @${username}`,\n      content: `Profile for @${username}`,\n      followers: 0,\n      type: 'profile',\n    };\n  }\n}\n\n// YouTube - using EnsembleData API (supports videos, shorts, and channels)\nasync function scrapeYouTube(url: string): Promise<ScrapedData> {\n  try {\n    // Extract video ID from various YouTube URL formats\n    let videoId: string | null = null;\n    \n    // Standard watch URL\n    const watchMatch = url.match(/[?&]v=([^&]+)/);\n    if (watchMatch) videoId = watchMatch[1];\n    \n    // Short URL (youtu.be)\n    const shortMatch = url.match(/youtu\\.be\\/([^?]+)/);\n    if (shortMatch) videoId = shortMatch[1];\n    \n    // Shorts URL\n    const shortsMatch = url.match(/youtube\\.com\\/shorts\\/([^?]+)/);\n    if (shortsMatch) videoId = shortsMatch[1];\n\n    // If it's a video URL, scrape video info\n    if (videoId) {\n      const videoInfoUrl = `${ENSEMBLE_BASE_URL}/yt/video/info`;\n      const response = await axios.get(videoInfoUrl, {\n        params: {\n          id: videoId,\n          token: ENSEMBLE_API_KEY,\n        },\n        timeout: 15000,\n      });\n\n      const videoData = response.data?.data;\n      if (!videoData) throw new Error('No video data found');\n\n      const video = videoData.videoDetails || videoData;\n      const snippet = videoData.snippet || video;\n\n      return {\n        url,\n        platform: 'youtube',\n        title: video.title || snippet.title || 'YouTube Video',\n        author: video.author || snippet.channelTitle || video.ownerChannelName || '',\n        description: video.shortDescription || snippet.description || video.description || '',\n        image: video.thumbnail?.thumbnails?.[0]?.url || snippet.thumbnails?.high?.url || '',\n        content: video.shortDescription || snippet.description || '',\n        followers: parseInt(video.viewCount || snippet.statistics?.viewCount || '0'),\n        engagement: parseInt(video.likeCount || snippet.statistics?.likeCount || '0'),\n      };\n    }\n\n    // Extract channel ID or username from URL\n    const channelMatch = url.match(/youtube\\.com\\/(channel\\/|@|c\\/)([^\\/\\?]+)/);\n    if (!channelMatch) {\n      // Fallback to oEmbed for unknown formats\n      const oembedUrl = `https://www.youtube.com/oembed?url=${encodeURIComponent(url)}&format=json`;\n      const response = await axios.get(oembedUrl, { timeout: 10000 });\n      return {\n        url,\n        platform: 'youtube',\n        title: response.data.title || 'YouTube Video',\n        author: response.data.author_name || '',\n        image: response.data.thumbnail_url || '',\n        description: `YouTube video by ${response.data.author_name}`,\n        content: response.data.title || '',\n      };\n    }\n\n    const channelId = channelMatch[2];\n\n    // Get channel info using EnsembleData\n    const channelInfoUrl = `${ENSEMBLE_BASE_URL}/yt/channel/info`;\n    const response = await axios.get(channelInfoUrl, {\n      params: {\n        id: channelId,\n        token: ENSEMBLE_API_KEY,\n      },\n      timeout: 15000,\n    });\n\n    const channelData = response.data?.data;\n    if (!channelData) throw new Error('No channel data found');\n\n    return {\n      url,\n      platform: 'youtube',\n      title: channelData.title || `YouTube - ${channelId}`,\n      author: channelData.title || channelId,\n      description: channelData.description || `YouTube channel ${channelId}`,\n      image: channelData.avatar?.[0]?.url || '',\n      content: channelData.description || '',\n      followers: channelData.stats?.subscriberCount || 0,\n      engagement: channelData.stats?.videoCount || 0,\n    };\n  } catch (error) {\n    console.error('YouTube scraping error:', error);\n    // Fallback to HTML scraping\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n        timeout: 30000,\n      });\n      const $ = cheerio.load(response.data);\n\n      const title = $('meta[property=\"og:title\"]').attr('content') || 'YouTube Content';\n      const description = $('meta[property=\"og:description\"]').attr('content') || '';\n      const author = $('link[itemprop=\"name\"]').attr('content') || '';\n      const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n      return { url, platform: 'youtube', title, description, author, image, content: description };\n    } catch (fallbackError) {\n      return {\n        url,\n        platform: 'youtube',\n        title: 'YouTube Content',\n        description: 'Unable to fetch details',\n        content: '',\n      };\n    }\n  }\n}\n\n// Twitter/X - using EnsembleData API (supports both profiles and tweets)\nasync function scrapeTwitterNitter(url: string): Promise<ScrapedData> {\n  try {\n    // Check if it's a tweet URL\n    const tweetMatch = url.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)\\/status\\/(\\d+)/);\n    \n    if (tweetMatch) {\n      // Scrape tweet\n      const username = tweetMatch[1];\n      const tweetId = tweetMatch[2];\n\n      const tweetInfoUrl = `${ENSEMBLE_BASE_URL}/twitter/tweet/info`;\n      const response = await axios.get(tweetInfoUrl, {\n        params: {\n          id: tweetId,\n          token: ENSEMBLE_API_KEY,\n        },\n        timeout: 15000,\n      });\n\n      const tweetData = response.data?.data;\n      if (!tweetData) throw new Error('No tweet data found');\n\n      const tweet = tweetData.tweet || tweetData;\n      const user = tweet.user || tweet.core?.user_results?.result?.legacy || {};\n\n      return {\n        url,\n        platform: 'twitter',\n        title: `Tweet by @${user.screen_name || username}`,\n        author: user.name || user.screen_name || username,\n        description: tweet.full_text || tweet.text || 'Twitter post',\n        image: tweet.entities?.media?.[0]?.media_url_https || user.profile_image_url_https || '',\n        content: tweet.full_text || tweet.text || '',\n        followers: tweet.favorite_count || tweet.public_metrics?.like_count || 0,\n        engagement: tweet.retweet_count || tweet.public_metrics?.retweet_count || 0,\n      };\n    }\n\n    // Extract username from profile URL\n    const usernameMatch = url.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/);\n    if (!usernameMatch) throw new Error('Invalid Twitter URL');\n\n    const username = usernameMatch[1];\n\n    // Get user info using EnsembleData\n    const userInfoUrl = `${ENSEMBLE_BASE_URL}/twitter/user/info`;\n    const response = await axios.get(userInfoUrl, {\n      params: {\n        username,\n        token: ENSEMBLE_API_KEY,\n      },\n      timeout: 15000,\n    });\n\n    const userData = response.data?.data;\n    if (!userData) throw new Error('No user data found');\n\n    return {\n      url,\n      platform: 'twitter',\n      title: userData.name || `Twitter/X - @${username}`,\n      author: username,\n      description: userData.description || `Twitter profile for @${username}`,\n      image: userData.profile_image_url_https || '',\n      content: userData.description || '',\n      followers: userData.followers_count || 0,\n      engagement: userData.statuses_count || 0,\n    };\n  } catch (error) {\n    console.error('Twitter scraping error:', error);\n    const username = url.match(/(?:twitter\\.com|x\\.com)\\/([^\\/\\?]+)/)?.[1] || 'user';\n    return {\n      url,\n      platform: 'twitter',\n      title: `Twitter/X - @${username}`,\n      author: username,\n      description: `Twitter profile for @${username}`,\n      content: `Profile for @${username}`,\n      followers: 0,\n    };\n  }\n}\n\nasync function scrapeSpotify(url: string): Promise<ScrapedData> {\n  try {\n    const response = await axios.get(url, {\n      headers: { \n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n      },\n      timeout: 30000,\n    });\n\n    const $ = cheerio.load(response.data);\n\n    // Try multiple selectors for Spotify metadata\n    const title = $('meta[property=\"og:title\"]').attr('content') || \n                  $('meta[name=\"twitter:title\"]').attr('content') || \n                  $('meta[property=\"twitter:title\"]').attr('content') ||\n                  $('title').text().replace(' - Spotify', '').trim() || \n                  'Spotify Content';\n    \n    const description = $('meta[property=\"og:description\"]').attr('content') || \n                       $('meta[name=\"twitter:description\"]').attr('content') || \n                       $('meta[name=\"description\"]').attr('content') || \n                       $('meta[property=\"twitter:description\"]').attr('content') ||\n                       '';\n    \n    const author = $('meta[name=\"music:musician\"]').attr('content') || \n                   $('meta[property=\"music:creator\"]').attr('content') || \n                   $('meta[name=\"music:artist\"]').attr('content') ||\n                   '';\n    \n    const image = $('meta[property=\"og:image\"]').attr('content') || \n                  $('meta[name=\"twitter:image\"]').attr('content') || \n                  $('meta[property=\"twitter:image\"]').attr('content') ||\n                  '';\n\n    // Try to get audio URL from Spotify embed or meta tags\n    const audioUrl = $('meta[property=\"og:audio\"]').attr('content') || \n                     $('meta[property=\"twitter:player:stream\"]').attr('content') ||\n                     url;\n\n    return { \n      url: audioUrl || url, \n      platform: 'spotify', \n      title, \n      description, \n      author, \n      image, \n      content: description,\n      followers: 0,\n      engagement: 0,\n    };\n  } catch (error) {\n    console.error('Spotify scraping error:', error);\n    \n    // Extract basic info from URL as fallback\n    const urlParts = url.split('/');\n    const type = urlParts[urlParts.length - 2] || 'content';\n    const id = urlParts[urlParts.length - 1]?.split('?')[0] || 'unknown';\n    \n    return {\n      url,\n      platform: 'spotify',\n      title: `Spotify ${type.charAt(0).toUpperCase() + type.slice(1)}`,\n      description: `Spotify ${type} content`,\n      author: '',\n      image: `https://i.scdn.co/image/${id}`,\n      content: `Spotify ${type}`,\n      followers: 0,\n      engagement: 0,\n    };\n  }\n}\n\nasync function scrapeAudioUrl(url: string): Promise<ScrapedData> {\n  // For generic audio URLs, we can only extract basic information.\n  // More detailed metadata would require specific API integrations or advanced analysis.\n  return {\n    url,\n    platform: 'audio',\n    title: 'Audio File',\n    description: 'Direct link to an audio file',\n    author: '',\n    image: '',\n    content: 'Audio content',\n    followers: 0,\n    engagement: 0,\n  };\n}\n\nasync function scrapeMedium(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Medium Article';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const author = $('meta[property=\"author\"]').attr('content') || '';\n  const publishDate = $('meta[property=\"article:published_time\"]').attr('content') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style, nav, footer, header').remove();\n  const content = $('article').text().trim() || $('main').text().trim();\n  const tags = $('meta[property=\"article:tag\"]').map((_, el) => $(el).attr('content')).get();\n\n  return { url, platform: 'medium', title, description, author, publishDate, image, content: content.substring(0, 10000), tags };\n}\n\nasync function scrapeSubstack(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Substack Post';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const author = $('meta[name=\"author\"]').attr('content') || '';\n  const publishDate = $('time').attr('datetime') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style, nav, footer, header').remove();\n  const content = $('.body').text().trim() || $('article').text().trim();\n\n  return { url, platform: 'substack', title, description, author, publishDate, image, content: content.substring(0, 10000) };\n}\n\nasync function scrapeGitcoin(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Gitcoin Grant';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style').remove();\n  const content = $('.grant-description').text().trim() || $('main').text().trim();\n\n  return { url, platform: 'gitcoin', title, description, image, content: content.substring(0, 10000) };\n}\n\nasync function scrapeGiveth(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Giveth Project';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style').remove();\n  const content = $('.project-description').text().trim() || $('main').text().trim();\n\n  return { url, platform: 'giveth', title, description, image, content: content.substring(0, 10000) };\n}\n\nasync function scrapeGitHub(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'GitHub Project';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const author = $('meta[property=\"profile:username\"]').attr('content') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style').remove();\n  const content = $('.markdown-body').text().trim() || $('#readme').text().trim() || $('.repository-content').text().trim();\n\n  return { url, platform: 'github', title, description, author, image, content: content.substring(0, 10000) };\n}\n\nasync function scrapeFarcaster(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Farcaster Channel';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const author = $('meta[property=\"profile:username\"]').attr('content') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style').remove();\n  const content = $('main').text().trim() || $('.profile').text().trim() || $('body').text().trim();\n\n  return { url, platform: 'farcaster', title, description, author, image, content: content.substring(0, 10000) };\n}\n\nasync function scrapeTwitch(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Twitch Channel';\n  const description = $('meta[property=\"og:description\"]').attr('content') || '';\n  const author = $('meta[property=\"og:site_name\"]').attr('content') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || '';\n\n  $('script, style').remove();\n  const content = $('.channel-info-content').text().trim() || $('main').text().trim() || $('body').text().trim();\n\n  return { url, platform: 'twitch', title, description, author, image, content: content.substring(0, 10000) };\n}\n\nasync function scrapeGenericBlog(url: string): Promise<ScrapedData> {\n  const response = await axios.get(url, {\n    headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' },\n    timeout: 30000,\n  });\n\n  const $ = cheerio.load(response.data);\n\n  const title = $('title').text().trim() || $('meta[property=\"og:title\"]').attr('content') || $('h1').first().text().trim() || 'Web Content';\n  const description = $('meta[name=\"description\"]').attr('content') || $('meta[property=\"og:description\"]').attr('content') || '';\n  const author = $('meta[name=\"author\"]').attr('content') || '';\n  const publishDate = $('meta[property=\"article:published_time\"]').attr('content') || $('time').attr('datetime') || '';\n  const image = $('meta[property=\"og:image\"]').attr('content') || $('img').first().attr('src') || '';\n\n  let content = '';\n  const contentSelectors = ['article', '[role=\"main\"]', '.post-content', '.entry-content', '.content', 'main'];\n\n  for (const selector of contentSelectors) {\n    const element = $(selector);\n    if (element.length > 0) {\n      element.find('script, style, nav, footer, header').remove();\n      content = element.text().trim();\n      if (content.length > 100) break;\n    }\n  }\n\n  if (!content || content.length < 100) {\n    $('script, style, nav, footer, header').remove();\n    content = $('body').text().trim();\n  }\n\n  content = content.replace(/\\s+/g, ' ').trim();\n  const tags = $('meta[name=\"keywords\"]').attr('content')?.split(',').map(tag => tag.trim()) || [];\n\n  return { url, platform: 'blog', title, description, author, publishDate, image, content: content.substring(0, 10000), tags };\n}\n\nasync function scrapeEventbrite(url: string): Promise<ScrapedData> {\n  try {\n    const response = await axios.get(url, {\n      timeout: 15000,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      },\n    });\n\n    const $ = cheerio.load(response.data);\n    \n    const title = $('h1[class*=\"event-title\"]').text().trim() || \n                  $('meta[property=\"og:title\"]').attr('content') || \n                  $('title').text().replace(' | Eventbrite', '').trim() || \n                  'Eventbrite Event';\n    \n    const description = $('meta[property=\"og:description\"]').attr('content') || \n                       $('meta[name=\"description\"]').attr('content') || \n                       $('div[class*=\"event-description\"]').text().trim() || '';\n    \n    const image = $('meta[property=\"og:image\"]').attr('content') || \n                  $('img[class*=\"event-image\"]').attr('src') || '';\n    \n    const author = $('div[class*=\"organizer\"]').text().trim() || \n                   $('a[class*=\"organizer-link\"]').text().trim() || \n                   'Event Organizer';\n    \n    const publishDate = $('meta[property=\"event:start_time\"]').attr('content') || \n                       $('time[datetime]').attr('datetime') || '';\n\n    return {\n      url,\n      platform: 'eventbrite',\n      title,\n      description,\n      author,\n      publishDate,\n      image,\n      content: description,\n    };\n  } catch (error) {\n    console.error('Eventbrite scraping error:', error);\n    return {\n      url,\n      platform: 'eventbrite',\n      title: 'Eventbrite Event',\n      description: 'Event from Eventbrite',\n      author: 'Event Organizer',\n    };\n  }\n}\n\nasync function scrapeLuma(url: string): Promise<ScrapedData> {\n  try {\n    const response = await axios.get(url, {\n      timeout: 15000,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      },\n    });\n\n    const $ = cheerio.load(response.data);\n    \n    const title = $('meta[property=\"og:title\"]').attr('content') || \n                  $('h1').first().text().trim() || \n                  'Luma Event';\n    \n    const description = $('meta[property=\"og:description\"]').attr('content') || \n                       $('meta[name=\"description\"]').attr('content') || '';\n    \n    const image = $('meta[property=\"og:image\"]').attr('content') || '';\n    \n    const author = $('meta[property=\"event:organizer\"]').attr('content') || \n                   'Event Host';\n    \n    const publishDate = $('meta[property=\"event:start_time\"]').attr('content') || '';\n\n    return {\n      url,\n      platform: 'luma',\n      title,\n      description,\n      author,\n      publishDate,\n      image,\n      content: description,\n    };\n  } catch (error) {\n    console.error('Luma scraping error:', error);\n    return {\n      url,\n      platform: 'luma',\n      title: 'Luma Event',\n      description: 'Event from Luma',\n      author: 'Event Host',\n    };\n  }\n}\n\nasync function scrapeMeetup(url: string): Promise<ScrapedData> {\n  try {\n    const response = await axios.get(url, {\n      timeout: 15000,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      },\n    });\n\n    const $ = cheerio.load(response.data);\n    \n    const title = $('meta[property=\"og:title\"]').attr('content') || \n                  $('h1').first().text().trim() || \n                  'Meetup Event';\n    \n    const description = $('meta[property=\"og:description\"]').attr('content') || \n                       $('meta[name=\"description\"]').attr('content') || '';\n    \n    const image = $('meta[property=\"og:image\"]').attr('content') || '';\n    \n    const author = $('meta[property=\"event:organizer\"]').attr('content') || \n                   'Meetup Organizer';\n    \n    const publishDate = $('meta[property=\"event:start_time\"]').attr('content') || \n                       $('time[datetime]').attr('datetime') || '';\n\n    return {\n      url,\n      platform: 'meetup',\n      title,\n      description,\n      author,\n      publishDate,\n      image,\n      content: description,\n    };\n  } catch (error) {\n    console.error('Meetup scraping error:', error);\n    return {\n      url,\n      platform: 'meetup',\n      title: 'Meetup Event',\n      description: 'Event from Meetup',\n      author: 'Meetup Organizer',\n    };\n  }\n}\n\nasync function scrapePartiful(url: string): Promise<ScrapedData> {\n  try {\n    const response = await axios.get(url, {\n      timeout: 15000,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      },\n    });\n\n    const $ = cheerio.load(response.data);\n    \n    const title = $('meta[property=\"og:title\"]').attr('content') || \n                  $('h1').first().text().trim() || \n                  'Partiful Event';\n    \n    const description = $('meta[property=\"og:description\"]').attr('content') || \n                       $('meta[name=\"description\"]').attr('content') || '';\n    \n    const image = $('meta[property=\"og:image\"]').attr('content') || '';\n    \n    const author = 'Event Host';\n    const publishDate = $('meta[property=\"event:start_time\"]').attr('content') || '';\n\n    return {\n      url,\n      platform: 'partiful',\n      title,\n      description,\n      author,\n      publishDate,\n      image,\n      content: description,\n    };\n  } catch (error) {\n    console.error('Partiful scraping error:', error);\n    return {\n      url,\n      platform: 'partiful',\n      title: 'Partiful Event',\n      description: 'Event from Partiful',\n      author: 'Event Host',\n    };\n  }\n}\n\nexport async function scrapeByPlatform(url: string, platform: PlatformType): Promise<ScrapedData> {\n  try {\n    // Handle Spotify URLs\n    if (platform === 'spotify' || url.includes('spotify.com')) {\n      return scrapeSpotify(url);\n    }\n\n    // Handle generic audio URLs\n    if (platform === 'audio' || url.match(/\\.(mp3|wav|ogg|m4a|aac|flac)$/i)) {\n      return scrapeAudioUrl(url);\n    }\n\n    switch (platform) {\n      case 'youtube':\n        return await scrapeYouTube(url);\n      case 'medium':\n        return await scrapeMedium(url);\n      case 'substack':\n        return await scrapeSubstack(url);\n      case 'gitcoin':\n        return await scrapeGitcoin(url);\n      case 'giveth':\n        return await scrapeGiveth(url);\n      case 'tiktok':\n        return await scrapeTikTokOembed(url);\n      case 'instagram':\n        return await scrapeInstagramOembed(url);\n      case 'twitter':\n        return await scrapeTwitterNitter(url);\n      case 'github':\n        return await scrapeGitHub(url);\n      case 'farcaster':\n        return await scrapeFarcaster(url);\n      case 'twitch':\n        return await scrapeTwitch(url);\n      case 'eventbrite':\n        return await scrapeEventbrite(url);\n      case 'luma':\n        return await scrapeLuma(url);\n      case 'meetup':\n        return await scrapeMeetup(url);\n      case 'partiful':\n        return await scrapePartiful(url);\n      case 'blog':\n      default:\n        return await scrapeGenericBlog(url);\n    }\n  } catch (error) {\n    throw error;\n  }\n}","size_bytes":32826},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] rounded-3xl\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-full opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Remove scrollbar globally */\n* {\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n\n*::-webkit-scrollbar {\n  display: none; /* Chrome, Safari, Opera */\n}\n\n@font-face {\n  font-family: 'Poppins Rounded';\n  src: url('./assets/fonts/PoppinsRounded-Regular.ttf') format('truetype');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'Poppins Rounded';\n  src: url('./assets/fonts/PoppinsRounded-Bold.ttf') format('truetype');\n  font-weight: 700;\n  font-style: normal;\n  font-display: swap;\n}\n\n:root {\n  --background: 0 0% 98%;\n  --foreground: 0 0% 6%;\n  --card: 0 0% 100%;\n  --card-foreground: 0 0% 6%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 0 0% 6%;\n  --primary: 68 78% 66%;\n  --primary-foreground: 0 0% 0%;\n  --secondary: 0 0% 94%;\n  --secondary-foreground: 0 0% 6%;\n  --muted: 0 0% 94%;\n  --muted-foreground: 0 0% 40%;\n  --accent: 68 78% 66%;\n  --accent-foreground: 0 0% 0%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --border: 0 0% 88%;\n  --input: 0 0% 94%;\n  --ring: 68 78% 66%;\n  --chart-1: 68 78% 66%;\n  --chart-2: 160 60% 45%;\n  --chart-3: 30 80% 55%;\n  --chart-4: 43 74% 66%;\n  --chart-5: 27 87% 67%;\n  --sidebar: 0 0% 100%;\n  --sidebar-foreground: 0 0% 6%;\n  --sidebar-primary: 68 78% 66%;\n  --sidebar-primary-foreground: 0 0% 0%;\n  --sidebar-accent: 0 0% 94%;\n  --sidebar-accent-foreground: 0 0% 6%;\n  --sidebar-border: 0 0% 88%;\n  --sidebar-ring: 68 78% 66%;\n}\n\n.light {\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n  --card: 0 0% 100%;\n  --card-foreground: 222.2 84% 4.9%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 222.2 84% 4.9%;\n  --primary: 68 78% 66%;\n  --primary-foreground: 0 0% 0%;\n  --secondary: 210 40% 96.1%;\n  --secondary-foreground: 222.2 47.4% 11.2%;\n  --muted: 210 40% 96.1%;\n  --muted-foreground: 215.4 16.3% 46.9%;\n  --accent: 210 40% 96.1%;\n  --accent-foreground: 222.2 47.4% 11.2%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 210 40% 98%;\n  --border: 214.3 31.8% 91.4%;\n  --input: 214.3 31.8% 91.4%;\n  --ring: 68 78% 66%;\n  --radius: 0.5rem;\n  --sidebar: 0 0% 100%;\n  --sidebar-foreground: 222.2 84% 4.9%;\n  --sidebar-primary: 68 78% 66%;\n  --sidebar-primary-foreground: 0 0% 0%;\n  --sidebar-accent: 210 40% 96.1%;\n  --sidebar-accent-foreground: 222.2 47.4% 11.2%;\n  --sidebar-border: 214.3 31.8% 91.4%;\n  --sidebar-ring: 68 78% 66%;\n}\n\n.dark {\n  --background: 0 0% 6%;\n  --foreground: 0 0% 98%;\n  --card: 0 0% 9%;\n  --card-foreground: 0 0% 98%;\n  --popover: 0 0% 9%;\n  --popover-foreground: 0 0% 98%;\n  --primary: 68 78% 66%;\n  --primary-foreground: 0 0% 0%;\n  --secondary: 0 0% 14%;\n  --secondary-foreground: 0 0% 98%;\n  --muted: 0 0% 14%;\n  --muted-foreground: 0 0% 63%;\n  --accent: 68 78% 66%;\n  --accent-foreground: 0 0% 0%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --border: 0 0% 18%;\n  --input: 0 0% 14%;\n  --ring: 68 78% 66%;\n  --sidebar: 0 0% 6%;\n  --sidebar-foreground: 0 0% 98%;\n  --sidebar-primary: 68 78% 66%;\n  --sidebar-primary-foreground: 0 0% 0%;\n  --sidebar-accent: 0 0% 14%;\n  --sidebar-accent-foreground: 0 0% 98%;\n  --sidebar-border: 0 0% 18%;\n  --sidebar-ring: 68 78% 66%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply antialiased bg-background text-foreground;\n    font-family: 'Poppins Rounded', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n}\n\n@layer utilities {\n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n\n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n\n  /* Closing the gap of coin cards */\n  @media (min-width: 640px) {\n    .scrollbar-hide {\n      grid-auto-columns: calc((100% - 5 * 0.75rem) / 6);\n    }\n  }\n\n  .scrollbar-hide>* {\n    scroll-snap-align: start;\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(68 78% 66%), hsl(75 70% 60%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .glass-card {\n    background: rgba(0, 0, 0, 0.6);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.05);\n  }\n\n  .spotify-card {\n    background: hsl(var(--card));\n    backdrop-filter: blur(20px);\n    border: 1px solid hsl(var(--border));\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n  }\n\n  .spotify-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 32px hsl(var(--foreground) / 0.1), 0 0 0 1px hsl(var(--primary) / 0.1);\n  }\n\n  .hover-lift {\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);\n  }\n\n  .stat-card {\n    background: linear-gradient(135deg, rgba(205, 235, 99, 0.08), rgba(205, 235, 99, 0.04));\n    border: 1px solid rgba(205, 235, 99, 0.2);\n    backdrop-filter: blur(10px);\n  }\n\n  .spotify-green {\n    color: hsl(68 78% 66%);\n  }\n\n  .spotify-button {\n    background: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n    font-weight: 700;\n    text-transform: none;\n    border-radius: 500px;\n    padding: 12px 32px;\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n    border: none;\n    font-size: 14px;\n    letter-spacing: 0.1em;\n  }\n\n  .spotify-button:hover {\n    background: hsl(var(--primary) / 0.9);\n    transform: scale(1.04);\n  }\n\n  .spotify-secondary-button {\n    background: transparent;\n    color: hsl(var(--foreground));\n    font-weight: 700;\n    border: 2px solid hsl(var(--border));\n    border-radius: 500px;\n    padding: 10px 30px;\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n    font-size: 14px;\n    letter-spacing: 0.1em;\n  }\n\n  .spotify-secondary-button:hover {\n    border-color: hsl(var(--foreground));\n    transform: scale(1.04);\n  }\n\n  .coin-card {\n    @apply bg-gradient-to-br from-muted/5 to-muted/10 backdrop-blur-sm border border-border/50 rounded-xl transition-all duration-300 hover:border-primary/50 hover:shadow-lg hover:shadow-primary/10;\n  }\n\n  .channel-card {\n    @apply backdrop-blur-sm border border-border/50 rounded-xl p-4 transition-all duration-300 hover:border-primary/50 hover:shadow-lg hover:shadow-primary/10 hover:transform hover:scale-[1.02];\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.1));\n  }\n\n  .compact-channel-card {\n    @apply backdrop-blur-sm border border-border/30 rounded-2xl p-4 transition-all duration-300 hover:border-primary/50 hover:shadow-lg hover:shadow-primary/20 hover:transform hover:scale-[1.05];\n    background: linear-gradient(135deg, rgba(0, 0, 0, 0.4), rgba(20, 20, 20, 0.6));\n  }\n\n  .compact-channel-card:hover {\n    background: linear-gradient(135deg, rgba(205, 235, 99, 0.1), rgba(20, 20, 20, 0.8));\n  }\n\n  /* Platform icon colors - preserve in light mode */\n  .platform-icon-youtube {\n    color: #FF0000 !important;\n  }\n  \n  .platform-icon-farcaster {\n    color: #8a63d2 !important;\n  }\n  \n  .platform-icon-gitcoin {\n    color: #02E2AC !important;\n  }\n  \n  .platform-icon-spotify {\n    color: #1DB954 !important;\n  }\n  \n  .platform-icon-music {\n    color: #1DB954 !important;\n  }\n  \n  .platform-icon-tiktok {\n    color: #000000 !important;\n  }\n  \n  .platform-icon-instagram {\n    color: #e6683c !important;\n  }\n  \n  .platform-icon-medium {\n    color: #000000 !important;\n  }\n  \n  .platform-icon-twitter {\n    color: #1DA1F2 !important;\n  }\n  \n  .platform-icon-blog {\n    color: #6366f1 !important;\n  }\n  \n  .platform-icon-giveth {\n    color: #5326EC !important;\n  }\n  \n  .platform-icon-all {\n    color: hsl(var(--primary)) !important;\n  }\n  \n  /* Light mode adjustments for better visibility */\n  .light .platform-icon-tiktok {\n    color: #EE1D52 !important; /* TikTok pink for light mode */\n  }\n  \n  .light .platform-icon-medium {\n    color: #00ab6c !important; /* Medium green for light mode */\n  }\n  \n  .light .platform-icon-twitter {\n    color: #000000 !important; /* Twitter X black */\n  }\n\n  /* Mobile-specific utilities */\n  .mobile-grid {\n    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4;\n  }\n\n  .mobile-card {\n    @apply p-3 sm:p-4 md:p-6;\n  }\n\n  .mobile-text {\n    @apply text-sm sm:text-base;\n  }\n\n  .mobile-spacing {\n    @apply space-y-3 sm:space-y-4 md:space-y-6;\n  }\n\n  .mobile-button {\n    @apply text-sm sm:text-base px-4 py-2 sm:px-6 sm:py-3;\n  }\n\n  /* Remove all scrollbars on mobile */\n  @media (max-width: 768px) {\n    * {\n      scrollbar-width: none; /* Firefox */\n      -ms-overflow-style: none; /* IE and Edge */\n    }\n    \n    *::-webkit-scrollbar {\n      display: none; /* Chrome, Safari, Opera */\n    }\n    \n    body, html {\n      overflow-x: hidden;\n      max-width: 100vw;\n    }\n    \n    main {\n      overflow-x: hidden;\n      max-width: 100vw;\n    }\n  }\n}\n\n@keyframes pulse {\n\n  0%,\n  100% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: .5;\n  }\n}\n\n.pulse-animation {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n.shimmer {\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n  background-size: 200% 100%;\n  animation: shimmer 2s infinite;\n}\n\n.modal-backdrop {\n  backdrop-filter: blur(8px);\n  background: rgba(0, 0, 0, 0.7);\n}\n\n.shadow-glow {\n  box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);\n}\n\n.shadow-glow-sm {\n  box-shadow: 0 0 10px rgba(139, 92, 246, 0.2);\n}","size_bytes":9584},"api/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"../server/routes\";\nimport { autoMigrateOnStartup } from \"../server/migrate-old-data\";\n\nconst app = express();\n\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    (req as any).rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      console.log(logLine);\n    }\n  });\n\n  next();\n});\n\nlet isInitialized = false;\n\nasync function initializeApp() {\n  if (!isInitialized) {\n    await registerRoutes(app);\n    \n    // Skip auto-migration in production/Vercel to avoid cold start delays\n    // Run migrations manually or via a separate process\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        await autoMigrateOnStartup();\n      } catch (error) {\n        console.error(\"Failed to run auto migration:\", error);\n      }\n    }\n    \n    isInitialized = true;\n  }\n}\n\nexport default async function handler(req: Request, res: Response) {\n  await initializeApp();\n  return app(req, res);\n}\n","size_bytes":1752},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"replit.md":{"content":"# CoinIT - Content Tokenization Platform\n\n## Overview\n\nCoinIT is a Web3 application that transforms blog content and articles into collectible digital assets (coins) on blockchain networks. The platform bridges traditional web content and blockchain-based digital assets by allowing users to scrape blog posts, extract metadata, and mint them as tokens. Built with React, Express, and integrating with blockchain infrastructure through Neon Database and IPFS storage via Pinata.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## On-Chain Activity Tracking (Grant Verification)\n\n**Contract Name**: youbuidlevery1  \n**Purpose**: Records all platform activities on-chain for grant verification with comprehensive fee tracking\n\n**Last Updated**: October 13, 2025\n\n### Hybrid Activity Tracking Approach\n\nThe platform uses a **hybrid approach** for on-chain verification to provide the best user experience while maintaining grant verification:\n\n**How It Works**:\n1. **Instant Coin Creation**: When a user creates a coin, they sign ONCE to deploy via Zora's factory\n2. **Database Recording**: Coin is immediately saved to our database with all metadata\n3. **Background Batch Sync**: A background service batches unrecorded coins and records them to the blockchain\n4. **Timestamp Preservation**: The contract accepts a timestamp parameter, so batch recording preserves the exact original creation time\n\n**Why Hybrid Approach?**:\n- ✅ **No Double Signatures**: Users only sign once (for deployment), not twice\n- ✅ **Better UX**: Instant coin creation without blockchain delays\n- ✅ **Grant Verification**: All activities still recorded on-chain with accurate timestamps\n- ✅ **Cost Efficient**: Batch recording saves gas fees\n\n**Tracked Metrics**:\n- 💰 **Platform Fees Earned** - 20% of all trading fees (on-chain)\n- 👥 **Creator Fees Earned** - Distributed to coin creators (on-chain)\n- 📊 **Market Cap Updates** - Per coin market capitalization\n- 📈 **Trading Volume** - Total platform trading volume\n- 👤 **Unique Creators** - Number of active creators\n- 🪙 **Total Coins Created** - All-time coin deployments with preserved timestamps\n\n**Key Components**:\n- Smart Contract: `contracts/youbuidlevery1.sol` (accepts timestamp parameter for batch recording)\n- Background Service: `server/activity-tracker-service.ts` (batches and records coins to blockchain)\n- Backend Routes: `server/routes.ts` (includes `/api/activity-tracker/sync` and `/api/activity-tracker/stats`)\n- Deployment Scripts: `scripts/deploy-activity-tracker.js`, `scripts/verify-activity-tracker.js`\n- Frontend Integration: `client/src/lib/zora-factory.ts` (temporarily disabled postDeployHook)\n- Admin Dashboard: `client/src/pages/AdminMetrics.tsx` (visit `/admin/metrics`)\n- Database Schema: `shared/schema.ts` (activityTrackerTxHash and activityTrackerRecordedAt fields)\n- Documentation: `DEPLOYMENT_GUIDE.md`\n\n**Deployment Instructions**:\n```bash\n# 1. Set environment variables in Replit Secrets\nDEPLOYER_PRIVATE_KEY=your_private_key_with_ETH_on_Base\nBASESCAN_API_KEY=your_basescan_key (optional)\n\n# 2. Deploy contract to Base mainnet\nnpm run deploy:tracker\n\n# 3. Add deployed address to Replit Secrets\nVITE_ACTIVITY_TRACKER_ADDRESS=deployed_contract_address\n\n# 4. Verify contract on Basescan (optional but recommended)\nnpm run verify:tracker <contract_address>\n\n# 5. Deploy to Replit\n# Click \"Deploy\" button, select \"Autoscale\", and deploy\n```\n\n**For Grant Judges**:\n- View contract on Basescan: `https://basescan.org/address/<TRACKER_ADDRESS>#readContract`\n- Call `getPlatformStats()` to see total coins, fees, volume, and creators\n- Call `getCoinMetrics(address)` to view specific coin metrics\n- Call `getCreatorStats(address)` to see creator-specific earnings\n- Call `getAllActivities()` to view all platform activities\n- All events and data are permanently on-chain and cannot be modified\n\n**Admin Dashboard**: Visit `/admin/metrics` to view comprehensive on-chain metrics including total platform fees earned, creator fees distributed, trading volume, and more.\n\n## Daily Login Streak Feature\n\n**Last Updated**: October 15, 2025\n\nA gamification feature that rewards users with points for logging in consecutively each day, encouraging daily platform engagement.\n\n**How It Works**:\n1. **Automatic Check-in**: When users visit the app while authenticated, the system automatically checks them in for the day\n2. **Streak Tracking**: Consecutive daily logins build up a streak counter\n3. **Points Rewards**: Users earn 10 base points per day, plus bonus points for longer streaks (e.g., 7+ days = additional bonus)\n4. **Streak Reset**: Missing a day resets the streak counter back to 1\n\n**Key Features**:\n- 🔥 **Streak Counter**: Visual display with flame icon showing current streak\n- 📅 **Weekly Calendar**: Shows last 7 days with checkmarks for login days\n- 📊 **Stats Dashboard**: Displays total points earned, current streak, and best streak (personal record)\n- 🎁 **Bonus Points**: Longer streaks earn bonus points on top of the base 10 points\n\n**Points System**:\n- Base reward: 10 points per daily login\n- Streak bonus: Additional points for maintaining long streaks\n- Bonus formula: `10 + min(floor(streak/7) * 5, 50)` (caps at 50 bonus points)\n\n**Database Schema**:\n- Table: `login_streaks` in `shared/schema.ts`\n- Fields: userAddress, currentStreak, longestStreak, lastLoginDate, totalPoints, loginDates[]\n\n**Implementation Components**:\n- Backend API: `/api/login-streak/:address` (GET), `/api/login-streak/check-in` (POST)\n- Storage Layer: `server/storage.ts` and `server/supabase-storage.ts` (getLoginStreak, createLoginStreak, updateLoginStreak methods)\n- Frontend Component: `client/src/components/streak-display.tsx`\n- Integration: Displayed on home page for authenticated users\n\n**User Experience**:\n- Automatic check-in on app visit (no manual action required)\n- Toast notifications showing points earned and streak status\n- Visual calendar highlighting logged-in days\n- Dark mode support with proper color theming\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React 18+ with TypeScript and Vite as the build tool\n\n**Routing**: Wouter for client-side routing with a simple switch-based route configuration\n\n**UI Components**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling. The design system uses a \"new-york\" style with CSS variables for theming and supports dark mode.\n\n**State Management**: \n- TanStack Query (React Query) for server state management and data fetching\n- Local React hooks (useState, useEffect) for component-level state\n- Custom query client configured with specific retry and caching strategies\n\n**Key Design Patterns**:\n- Component-based architecture with reusable UI primitives\n- Custom hooks for cross-cutting concerns (useToast, useIsMobile)\n- Path aliases for clean imports (@/, @shared/, @assets/)\n\n### Backend Architecture\n\n**Framework**: Express.js running on Node.js with TypeScript\n\n**Server Structure**:\n- Single entry point (`server/index.ts`) handling all middleware setup\n- Modular route registration system (`server/routes.ts`)\n- In-memory storage implementation with interface-based design for easy database migration\n- Custom logging middleware for API request tracking\n\n**API Design**:\n- RESTful endpoints under `/api` prefix\n- JSON request/response format\n- Scraping endpoint (`POST /api/scrape`) for extracting web content\n- CRUD operations for scraped content and coins\n\n**Development Setup**:\n- Vite middleware integration for HMR in development\n- Static file serving for production builds\n- Separation of client and server concerns\n\n### Data Storage\n\n**Current Implementation**: In-memory storage using Map data structures (MemStorage class)\n\n**Planned Database**: PostgreSQL via Neon serverless database\n- Drizzle ORM configured for database operations\n- Schema defined in `shared/schema.ts` with two main tables:\n  - `scraped_content`: Stores web scraping results with metadata\n  - `coins`: Stores blockchain token information linked to scraped content\n- Connection pooling configured for `connect-pg-simple` sessions\n\n**Data Models**:\n- ScrapedContent: url, title, description, author, publishDate, image, content, tags\n- Coin: name, symbol, address, creator, scrapedContentId (foreign key), ipfsUri\n\n**Schema Validation**: Zod schemas generated via drizzle-zod for runtime validation\n\n### External Dependencies\n\n**Web Scraping**:\n- axios: HTTP client for fetching web pages\n- cheerio: Server-side DOM manipulation for HTML parsing\n- Extracts Open Graph metadata, article metadata, and content\n\n**IPFS Storage**:\n- Pinata: Decentralized file storage service\n- Used for storing coin metadata permanently\n- API integration via REST endpoints\n- Falls back to mock URIs if credentials not configured\n\n**Blockchain Integration**:\n- Zora SDK for coin creation and trading\n- Wallet connection via Privy Auth\n- Live trading functionality with on-chain transactions\n- Designed for Zora network coin minting on Base blockchain\n\n**GeckoTerminal Integration** (Added October 12, 2025):\n- Live DEX pool charts via GeckoTerminal embed iframes\n- Free API access (30 calls/min rate limit)\n- Backend proxy routes to avoid CORS and manage rate limits\n- Integration Components:\n  - `client/src/components/geckoterminal-chart.tsx`: Reusable chart component\n  - `client/src/lib/geckoterminal.ts`: API helper functions for pools, OHLCV data\n  - `server/routes.ts`: Backend proxy routes (/api/geckoterminal/*)\n- Chart Features:\n  - TradingView-powered interactive charts\n  - Support for 240+ blockchains including Base\n  - Multiple chart types (price, market cap, volume)\n  - Customizable resolution and styling\n  - Automatic pool discovery by token address\n  - Fallback to existing recharts when GeckoTerminal data unavailable\n\n**UI Libraries**:\n- Radix UI: Accessible, unstyled component primitives\n- Tailwind CSS: Utility-first styling\n- class-variance-authority: Component variant management\n- Lucide React: Icon library\n\n**Development Tools**:\n- TypeScript: Type safety across frontend and backend\n- Vite: Fast build tool with HMR\n- Replit plugins: Dev banner, cartographer, runtime error overlay\n- ESBuild: Server-side bundling for production\n\n**Session Management**:\n- connect-pg-simple: PostgreSQL session store (configured but not active with in-memory storage)\n\n### Architecture Decisions\n\n**Monorepo Structure**: Client and server code in same repository with shared types/schemas for type safety across boundaries.\n\n**Why chosen**: Simplifies development, ensures type consistency, and reduces duplication.\n\n**Trade-offs**: Requires careful build configuration; could be split into separate repos for independent deployment.\n\n**In-Memory Storage**: Current implementation uses Map-based storage instead of database.\n\n**Why chosen**: Simplifies initial development and removes database dependency for prototyping.\n\n**Trade-offs**: Data doesn't persist across restarts; must migrate to PostgreSQL for production (infrastructure already configured).\n\n**IPFS via Pinata**: Centralized service for decentralized storage.\n\n**Why chosen**: Easier setup than running own IPFS node; reliable gateway access.\n\n**Trade-offs**: Depends on third-party service; additional cost considerations.\n\n**Mock Blockchain Operations**: Placeholder implementations for wallet and Zora integration.\n\n**Why chosen**: Allows frontend development without blockchain complexity.\n\n**Trade-offs**: Requires significant work to integrate real blockchain functionality; current implementation is not production-ready for actual token minting.","size_bytes":11649},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/profile-card-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Coin } from \"@shared/schema\";\nimport { Users, DollarSign, Coins as CoinsIcon, TrendingUp, Award, Share2 } from \"lucide-react\";\nimport { getCoin } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { createAvatar } from '@dicebear/core';\nimport { avataaars } from '@dicebear/collection';\nimport { formatSmartCurrency } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProfileCardModalProps {\n  creatorAddress: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  creatorData?: { name?: string; verified?: boolean }; // Added creatorData prop\n}\n\nexport default function ProfileCardModal({ creatorAddress, open, onOpenChange, creatorData }: ProfileCardModalProps) {\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [totalMarketCap, setTotalMarketCap] = useState<number>(0);\n  const [totalHolders, setTotalHolders] = useState<number>(0);\n  const [totalEarnings, setTotalEarnings] = useState<number>(0);\n  const { toast } = useToast();\n\n  const { data: coins = [] } = useQuery<Coin[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  const creatorCoins = coins.filter(\n    (coin) => coin.creator_wallet?.toLowerCase() === creatorAddress.toLowerCase()\n  );\n\n  // Fetch creator data to get avatar\n  const { data: creatorProfile } = useQuery({\n    queryKey: ['/api/creators/address', creatorAddress],\n    enabled: !!creatorAddress,\n  });\n\n  const avatarUrl = creatorProfile?.avatar || creatorProfile?.profileImage || createAvatar(avataaars, {\n    seed: creatorAddress,\n    size: 96,\n  }).toDataUri();\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      let marketCapSum = 0;\n      let holdersSum = 0;\n      let earningsSum = 0;\n\n      for (const coin of creatorCoins) {\n        if (coin.address) {\n          try {\n            const response = await getCoin({\n              address: coin.address as `0x${string}`,\n              chain: base.id,\n            });\n\n            const coinData = response.data?.zora20Token;\n            if (coinData?.marketCap) {\n              marketCapSum += parseFloat(coinData.marketCap);\n            }\n            if (coinData?.uniqueHolders !== undefined) {\n              holdersSum += coinData.uniqueHolders;\n            }\n            // Calculate creator earnings from total volume (already in USD)\n            // Creator gets 50% of 1% total fees = 0.5% of trading volume\n            if (coinData?.totalVolume) {\n              const totalVolumeUSD = parseFloat(coinData.totalVolume);\n              const earningsUSD = totalVolumeUSD * 0.005; // 0.5% of volume\n              earningsSum += earningsUSD;\n            }\n          } catch (error) {\n            console.error(`Error fetching stats for ${coin.symbol}:`, error);\n          }\n        }\n      }\n\n      setTotalMarketCap(marketCapSum);\n      setTotalHolders(holdersSum);\n      setTotalEarnings(earningsSum);\n    };\n\n    if (open && creatorCoins.length > 0) {\n      fetchStats();\n    }\n  }, [open, creatorCoins]);\n\n  const formatAddress = (address: string) => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const handleFollowToggle = () => {\n    setIsFollowing(!isFollowing);\n  };\n\n  // Get the first coin's image for background or use a gradient\n  const backgroundImage = creatorCoins[0]?.image;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-[280px] sm:max-w-[320px] bg-card border-border/50 p-0 overflow-hidden rounded-2xl sm:rounded-3xl\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between p-3 sm:px-5 sm:py-4\">\n            <DialogTitle className=\"text-foreground text-xl font-bold flex items-center gap-2\">\n              {creatorData?.name || formatAddress(creatorAddress)}\n              {creatorData?.verified && (\n                <Award className=\"w-5 h-5 text-yellow-500\" />\n              )}\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n        {/* Profile Content */}\n        <div className=\"px-3 pb-3 sm:px-5 sm:pb-5\">\n          {/* Avatar and Share Icon */}\n          <div className=\"relative mb-2 sm:mb-3 flex items-start justify-between\">\n            <img\n              src={avatarUrl}\n              alt=\"Profile\"\n              className=\"w-16 h-16 sm:w-20 sm:h-20 rounded-full border-2 sm:border-4 border-border shadow-lg\"\n            />\n\n            {/* Share Icon */}\n            <button\n              onClick={async () => {\n                // Use @username if available, otherwise use address\n                const profilePath = creatorData?.name \n                  ? `/@${creatorData.name}` \n                  : `/${creatorAddress}`;\n                const url = `${window.location.origin}${profilePath}`;\n                \n                if (navigator.share) {\n                  await navigator.share({\n                    title: `${creatorData?.name || formatAddress(creatorAddress)} - CoinIT Profile`,\n                    url: url,\n                  });\n                } else {\n                  await navigator.clipboard.writeText(url);\n                  toast({ title: \"Profile link copied!\" });\n                }\n              }}\n              className=\"p-2 sm:p-2.5 bg-background/90 backdrop-blur-sm hover:bg-muted/30 rounded-full transition-colors border border-border/50\"\n            >\n              <Share2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-muted-foreground\" />\n            </button>\n          </div>\n\n          {/* Name & Address */}\n          <div className=\"mb-2 sm:mb-3\">\n            <h3 className=\"text-base sm:text-lg font-bold text-foreground mb-0.5\">\n              {formatAddress(creatorAddress)}\n            </h3>\n            <p className=\"text-[10px] sm:text-xs text-muted-foreground font-mono truncate\">\n              {creatorAddress}\n            </p>\n          </div>\n\n          {/* Stats Row */}\n          <div className=\"grid grid-cols-4 gap-1.5 sm:gap-2 mb-3 sm:mb-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-0.5 sm:gap-1 mb-0.5 sm:mb-1\">\n                <CoinsIcon className=\"w-2.5 h-2.5 sm:w-3 sm:h-3 text-yellow-500\" />\n                <span className=\"text-[10px] sm:text-xs font-medium text-muted-foreground\">Coins</span>\n              </div>\n              <p className=\"text-sm sm:text-base font-bold text-foreground\">{creatorCoins.length}</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-0.5 sm:gap-1 mb-0.5 sm:mb-1\">\n                <DollarSign className=\"w-2.5 h-2.5 sm:w-3 sm:h-3 text-green-500\" />\n                <span className=\"text-[10px] sm:text-xs font-medium text-muted-foreground\">Market</span>\n              </div>\n              <p className=\"text-sm sm:text-base font-bold text-foreground\">\n                ${totalMarketCap > 1000 ? `${(totalMarketCap / 1000).toFixed(0)}k` : totalMarketCap.toFixed(0)}\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-0.5 sm:gap-1 mb-0.5 sm:mb-1\">\n                <Users className=\"w-2.5 h-2.5 sm:w-3 sm:h-3 text-blue-500\" />\n                <span className=\"text-[10px] sm:text-xs font-medium text-muted-foreground\">Holders</span>\n              </div>\n              <p className=\"text-sm sm:text-base font-bold text-foreground\">{totalHolders}</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-0.5 sm:gap-1 mb-0.5 sm:mb-1\">\n                <TrendingUp className=\"w-2.5 h-2.5 sm:w-3 sm:h-3 text-green-500\" />\n                <span className=\"text-[10px] sm:text-xs font-medium text-muted-foreground\">Earn</span>\n              </div>\n              <p className=\"text-sm sm:text-base font-bold text-green-500\">\n                {totalEarnings > 1000 ? `$${(totalEarnings / 1000).toFixed(1)}k` : formatSmartCurrency(totalEarnings)}\n              </p>\n            </div>\n          </div>\n\n          {/* Follow Button */}\n          <Button\n            onClick={handleFollowToggle}\n            className={`w-full h-9 sm:h-10 rounded-full text-sm font-semibold transition-all ${\n              isFollowing\n                ? 'bg-muted/50 text-foreground hover:bg-muted/70 border border-border'\n                : 'bg-primary text-primary-foreground hover:bg-primary/90'\n            }`}\n          >\n            {isFollowing ? 'Unfollow' : 'Follow'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8799},"client/src/components/mobile-trade-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport type { Coin, Comment } from \"@shared/schema\";\nimport { useAccount, usePublicClient, useWalletClient } from \"wagmi\";\nimport { formatEther } from \"viem\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { getCoin, getCoinHolders } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, CheckCircle2, ExternalLink, MessageCircle, Users, Activity as ActivityIcon, Info, Copy, Check, Coins, Play } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatSmartCurrency } from \"@/lib/utils\";\n\ninterface MobileTradeModalProps {\n  coin: Coin;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function MobileTradeModal({ coin, open, onOpenChange }: MobileTradeModalProps) {\n  const { toast } = useToast();\n  const [ethAmount, setEthAmount] = useState(\"\");\n  const [isTrading, setIsTrading] = useState(false);\n  const [txHash, setTxHash] = useState<string | null>(null);\n  const [isBuying, setIsBuying] = useState(true);\n  const [comment, setComment] = useState(\"\");\n  const [standaloneComment, setStandaloneComment] = useState(\"\");\n  const [balance, setBalance] = useState<string>(\"0\");\n  const [marketCap, setMarketCap] = useState<string | null>(null);\n  const [volume24h, setVolume24h] = useState<string | null>(null);\n  const [creatorEarnings, setCreatorEarnings] = useState<string | null>(null);\n  const [holders, setHolders] = useState<Array<{\n    address: string;\n    balance: string;\n    percentage: number;\n    profile?: string | null;\n  }>>([]);\n  const [totalSupply, setTotalSupply] = useState<string | null>(null);\n  const [uniqueHoldersCount, setUniqueHoldersCount] = useState<number>(0);\n  const [copiedAddress, setCopiedAddress] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioRef, setAudioRef] = useState<HTMLAudioElement | null>(null);\n\n  const { address, isConnected } = useAccount();\n  const { data: walletClient } = useWalletClient();\n  const publicClient = usePublicClient();\n\n  // Effect to manage audio playback\n  useEffect(() => {\n    if (audioRef) {\n      if (isPlaying) {\n        audioRef.play().catch(e => console.error(\"Error playing audio:\", e));\n      } else {\n        audioRef.pause();\n      }\n    }\n    return () => {\n      if (audioRef) {\n        audioRef.pause();\n        audioRef.currentTime = 0;\n      }\n    };\n  }, [isPlaying, audioRef]);\n\n  // Fetch comments for this coin\n  const { data: comments = [], isLoading: commentsLoading } = useQuery<Comment[]>({\n    queryKey: ['/api/comments/coin', coin.address],\n    enabled: open && !!coin.address,\n  });\n\n  // Mutation for creating a comment\n  const createCommentMutation = useMutation({\n    mutationFn: async (commentData: { coinAddress: string; userAddress: string; comment: string; transactionHash?: string }) => {\n      return await apiRequest('POST', '/api/comments', commentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/comments/coin', coin.address] });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedAddress(true);\n    setTimeout(() => setCopiedAddress(false), 2000);\n  };\n\n  const handleStandaloneComment = async () => {\n    if (!isConnected || !address || !coin.address || !standaloneComment.trim()) return;\n\n    try {\n      await createCommentMutation.mutateAsync({\n        coinAddress: coin.address,\n        userAddress: address,\n        comment: standaloneComment.trim(),\n      });\n\n      setStandaloneComment(\"\");\n\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted\",\n      });\n    } catch (error) {\n      console.error('Failed to post comment:', error);\n      toast({\n        title: \"Failed to post comment\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Fetch user balance\n  useEffect(() => {\n    async function fetchBalance() {\n      if (!address || !publicClient) return;\n\n      try {\n        const bal = await publicClient.getBalance({ address });\n        setBalance(formatEther(bal));\n      } catch (error) {\n        console.error(\"Error fetching balance:\", error);\n      }\n    }\n\n    if (isConnected && open) {\n      fetchBalance();\n    }\n  }, [address, isConnected, publicClient, open]);\n\n  // Fetch coin stats\n  useEffect(() => {\n    async function fetchCoinStats() {\n      if (!coin.address) return;\n\n      try {\n        const response = await getCoin({\n          collectionAddress: coin.address as `0x${string}`,\n          chainId: base.id,\n        });\n\n        const coinData = response.data?.zora20Token;\n\n        if (coinData) {\n          // Set market cap - handle both string and number\n          if (coinData.marketCap !== null && coinData.marketCap !== undefined) {\n            const mcValue = typeof coinData.marketCap === 'string'\n              ? parseFloat(coinData.marketCap)\n              : coinData.marketCap;\n            setMarketCap(mcValue.toFixed(2));\n          }\n\n          // Set 24h volume - handle both string and number, ensure accurate display\n          if (coinData.volume24h !== null && coinData.volume24h !== undefined) {\n            const volValue =\n              typeof coinData.volume24h === \"string\"\n                ? parseFloat(coinData.volume24h)\n                : coinData.volume24h;\n            if (!isNaN(volValue) && volValue >= 0) {\n              setVolume24h(volValue.toFixed(2));\n            } else {\n              setVolume24h(\"0.00\");\n            }\n          } else {\n            setVolume24h(\"0.00\");\n          }\n\n          // Set creator earnings - properly extract USD value\n          if (coinData.creatorEarnings && coinData.creatorEarnings.length > 0) {\n            const earnings = coinData.creatorEarnings[0] as any;\n            const earningsUsd = earnings.amountUsd || earnings.amount?.amountDecimal?.toString() || \"0\";\n            setCreatorEarnings(earningsUsd);\n          }\n\n          if (coinData.totalSupply) {\n            setTotalSupply(coinData.totalSupply.toString());\n          }\n\n          if (coinData.uniqueHolders !== undefined) {\n            setUniqueHoldersCount(Number(coinData.uniqueHolders));\n          }\n        }\n\n        // Fetch holder details\n        const holdersResponse = await getCoinHolders({\n          chainId: base.id,\n          address: coin.address as `0x${string}`,\n          count: 50,\n        });\n\n        const holderBalances = holdersResponse.data?.zora20Token?.tokenBalances?.edges || [];\n        const supply = parseFloat(coinData?.totalSupply || \"0\");\n\n        if (holderBalances.length > 0 && supply > 0) {\n          const processedHolders = holderBalances.map((edge: any) => {\n            const balance = parseFloat(edge.node.balance || \"0\");\n            const percentage = (balance / supply) * 100;\n\n            return {\n              address: edge.node.ownerAddress,\n              balance: edge.node.balance,\n              percentage: percentage,\n              profile: edge.node.ownerProfile?.handle || null,\n            };\n          });\n\n          setHolders(processedHolders);\n        }\n      } catch (error) {\n        console.error(\"Error fetching coin stats:\", error);\n      }\n    }\n\n    if (open) {\n      fetchCoinStats();\n    }\n  }, [coin.address, open]);\n\n  const formatAddress = (address?: string) => {\n    if (!address) return 'Unknown';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const handleTrade = async () => {\n    if (!isConnected || !address || !walletClient || !publicClient) {\n      toast({\n        title: \"Wallet not connected\",\n        description: \"Please connect your wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const ethAmountNum = parseFloat(ethAmount);\n    if (!ethAmount || ethAmountNum <= 0) {\n      toast({\n        title: \"Invalid amount\",\n        description: \"Please enter a valid ETH amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const balanceNum = parseFloat(balance);\n    if (isBuying && ethAmountNum > balanceNum) {\n      toast({\n        title: \"Insufficient balance\",\n        description: `You only have ${parseFloat(balance).toFixed(6)} ETH`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsTrading(true);\n\n    try {\n      const { tradeZoraCoin } = await import(\"@/lib/zora\");\n\n      const result = await tradeZoraCoin({\n        coinAddress: coin.address as `0x${string}`,\n        ethAmount,\n        walletClient,\n        publicClient,\n        userAddress: address,\n        isBuying,\n      });\n\n      if (result?.hash) {\n        setTxHash(result.hash);\n\n        if (coin.address) {\n          try {\n            await createCommentMutation.mutateAsync({\n              coinAddress: coin.address,\n              userAddress: address,\n              comment: comment.trim() || `Traded ${coin.symbol}`,\n              transactionHash: result.hash,\n            });\n          } catch (error) {\n            console.error('Failed to save trade record:', error);\n          }\n        }\n\n        // Create reward records for platform and trade fees\n        const ADMIN_REFERRAL_ADDRESS = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\";\n        const platformFeeWei = (parseFloat(ethAmount) * 0.02 * 1e18).toString();\n        const tradeFeeWei = (parseFloat(ethAmount) * 0.004 * 1e18).toString();\n\n        // Create platform reward (20%)\n        try {\n          await apiRequest('POST', '/api/rewards', {\n            type: 'platform',\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            transactionHash: result.hash,\n            rewardAmount: platformFeeWei,\n            recipientAddress: ADMIN_REFERRAL_ADDRESS\n          });\n        } catch (error) {\n          console.error('Failed to create platform reward:', error);\n        }\n\n        // Create trade reward (4%)\n        try {\n          await apiRequest('POST', '/api/rewards', {\n            type: 'trade',\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            transactionHash: result.hash,\n            rewardAmount: tradeFeeWei,\n            recipientAddress: ADMIN_REFERRAL_ADDRESS\n          });\n        } catch (error) {\n          console.error('Failed to create trade reward:', error);\n        }\n\n        // Create notification for the trade\n        const notificationType = isBuying ? 'buy' : 'sell';\n        const notificationTitle = isBuying ? '✅ Purchase Successful!' : '✅ Sale Successful!';\n        const notificationMessage = isBuying\n          ? `You bought ${coin.symbol} for ${ethAmount} ETH`\n          : `You sold ${coin.symbol} for ${ethAmount} ETH`;\n\n        try {\n          await apiRequest('POST', '/api/notifications', {\n            userId: address,\n            type: notificationType,\n            title: notificationTitle,\n            message: notificationMessage,\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            amount: ethAmount,\n            transactionHash: result.hash,\n            read: false\n          });\n          console.log('✅ Trade notification created');\n        } catch (error) {\n          console.error('Failed to create trade notification:', error);\n        }\n\n        toast({\n          title: \"Trade successful!\",\n          description: `You ${isBuying ? 'bought' : 'sold'} ${coin.symbol} tokens`,\n        });\n\n        const newBal = await publicClient.getBalance({ address });\n        setBalance(formatEther(newBal));\n      } else {\n        throw new Error(\"Transaction completed but no hash returned\");\n      }\n\n    } catch (error) {\n      console.error(\"Trade failed:\", error);\n\n      const errorMessage = error instanceof Error ? error.message : \"Trade failed\";\n\n      toast({\n        title: \"Trade failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTrading(false);\n    }\n  };\n\n  // Clean up state when modal closes\n  useEffect(() => {\n    if (!open) {\n      setTxHash(null);\n      setEthAmount(\"\");\n      setComment(\"\");\n      setStandaloneComment(\"\");\n      setIsPlaying(false);\n      setIsBuying(true);\n      setIsTrading(false);\n    }\n  }, [open]);\n\n  const setQuickAmount = (percentage: number) => {\n    if (percentage === 100) {\n      const maxAmount = (parseFloat(balance) * 0.9).toFixed(6);\n      setEthAmount(maxAmount);\n    } else {\n      const amount = (parseFloat(balance) * percentage / 100 * 0.9).toFixed(6);\n      setEthAmount(amount);\n    }\n  };\n\n  const imageUrl = coin?.metadata?.animation_url || coin?.image || coin?.metadata?.image || \"\";\n  const isAudio = coin?.type === \"audio\" || coin?.metadata?.type === \"audio\" || imageUrl?.includes('spotify') || imageUrl?.match(/\\.(mp3|wav|ogg|m4a)$/i);\n  const isVideo = coin?.type === \"video\" || coin?.metadata?.type === \"video\" || imageUrl?.match(/\\.(mp4|webm|mov|avi)$/i);\n\n  return (\n    <Drawer open={open} onOpenChange={onOpenChange}>\n      <DrawerContent className=\"bg-background border-t border-border/50 max-h-[90vh]\">\n        <DrawerHeader className=\"px-4 pt-4 pb-2\">\n          <DrawerTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {imageUrl ? (\n                <div className=\"relative w-10 h-10\">\n                  <img src={imageUrl} alt=\"Coin logo\" className=\"w-10 h-10 rounded-full object-cover\" />\n                  {(isAudio || isVideo) && (\n                    <button\n                      onClick={() => setIsPlaying(!isPlaying)}\n                      className=\"absolute bottom-0 right-0 bg-primary text-white rounded-full p-1 shadow-lg hover:bg-primary-hover transition-colors\"\n                    >\n                      {isPlaying ? <Play className=\"w-4 h-4 fill-current\" /> : <Play className=\"w-4 h-4 fill-current\" />}\n                    </button>\n                  )}\n                </div>\n              ) : (\n                <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-sm font-bold text-foreground\">\n                  {coin.symbol.slice(0, 2)}\n                </div>\n              )}\n              <div>\n                <h3 className=\"text-lg font-bold text-foreground\">{coin.name} ({coin.symbol})</h3>\n                <p className=\"text-xs text-muted-foreground\">Creator: @{formatAddress(coin.creator)}</p>\n              </div>\n            </div>\n          </DrawerTitle>\n        </DrawerHeader>\n\n        <Tabs defaultValue=\"trade\" className=\"flex-1 flex flex-col overflow-hidden\">\n          <TabsList className=\"w-full justify-start rounded-none border-b border-border/50 bg-transparent px-4 h-auto p-0\">\n            <TabsTrigger\n              value=\"trade\"\n              className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-3 py-2 bg-transparent text-xs\"\n            >\n              Trade\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"comments\"\n              className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-3 py-2 bg-transparent text-xs\"\n            >\n              Comments\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"holders\"\n              className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-3 py-2 bg-transparent text-xs\"\n            >\n              Holders\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"activity\"\n              className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-3 py-2 bg-transparent text-xs\"\n            >\n              Activity\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"details\"\n              className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none px-3 py-2 bg-transparent text-xs\"\n            >\n              Details\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"trade\" className=\"flex-1 px-4 pb-6 mt-0 pt-3 overflow-y-auto\">\n            {/* Stats Row */}\n            <div className=\"grid grid-cols-3 gap-2 mb-3\">\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Market Cap</p>\n                <p className=\"text-sm font-bold text-green-500\">\n                  {marketCap ? `$${marketCap}` : 'Loading...'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">24H Volume</p>\n                <p className=\"text-sm font-semibold text-foreground\">\n                  {volume24h ? formatSmartCurrency(parseFloat(volume24h)) : 'Loading...'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Creator Earnings</p>\n                <p className=\"text-sm font-semibold text-foreground\">\n                  {creatorEarnings ? formatSmartCurrency(parseFloat(creatorEarnings)) : 'Loading...'}\n                </p>\n              </div>\n            </div>\n\n            {/* Buy/Sell Toggle */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={() => setIsBuying(true)}\n                  className={`px-6 py-2 text-base font-bold rounded-full transition-all ${\n                    isBuying\n                      ? 'bg-green-500 hover:bg-green-600 text-white'\n                      : 'bg-transparent text-muted-foreground border border-border/30 hover:bg-muted/50'\n                  }`}\n                  disabled={isTrading || !!txHash}\n                >\n                  Buy\n                </Button>\n                <Button\n                  onClick={() => setIsBuying(false)}\n                  className={`px-6 py-2 text-base font-bold rounded-full transition-all ${\n                    !isBuying\n                      ? 'bg-red-500 hover:bg-red-600 text-white'\n                      : 'bg-transparent text-muted-foreground border border-border/30 hover:bg-muted/50'\n                  }`}\n                  disabled={isTrading || !!txHash}\n                >\n                  Sell\n                </Button>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xs text-muted-foreground\">Balance</p>\n                <p className=\"text-sm font-semibold text-foreground\">\n                  {parseFloat(balance).toFixed(4)} ETH\n                </p>\n              </div>\n            </div>\n\n            {/* Amount Input */}\n            <div className=\"relative mb-3\">\n              <Input\n                type=\"number\"\n                step=\"0.000001\"\n                min=\"0\"\n                value={ethAmount}\n                onChange={(e) => setEthAmount(e.target.value)}\n                className=\"h-16 text-2xl font-bold pr-24 bg-muted/30 border-border/50 text-foreground rounded-2xl\"\n                disabled={isTrading || !!txHash}\n                placeholder=\"0.0\"\n              />\n              <div className=\"absolute right-4 top-1/2 -translate-y-1/2 flex items-center gap-2\">\n                <div className=\"w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center\">\n                  <span className=\"text-white text-sm font-bold\">Ξ</span>\n                </div>\n                <span className=\"text-base font-semibold text-foreground\">ETH</span>\n              </div>\n            </div>\n\n            {/* Quick Amount Buttons */}\n            <div className=\"grid grid-cols-4 gap-2 mb-3\">\n              {[25, 50, 75, 100].map((percentage) => (\n                <Button\n                  key={percentage}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuickAmount(percentage)}\n                  disabled={isTrading || !!txHash}\n                  className=\"h-10 text-sm bg-muted/20 hover:bg-muted/40 border-border/30 text-foreground rounded-xl font-semibold\"\n                >\n                  {percentage === 100 ? 'Max' : `${percentage}%`}\n                </Button>\n              ))}\n            </div>\n\n            {/* Comment Input */}\n            <Textarea\n              placeholder=\"Add a comment...\"\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n              className=\"min-h-[80px] bg-muted/20 border-border/30 text-foreground placeholder:text-muted-foreground rounded-xl resize-none mb-3\"\n              disabled={isTrading || !!txHash}\n              maxLength={280}\n            />\n\n            {/* Action Button */}\n            {!txHash ? (\n              !isConnected ? (\n                <div className=\"p-3 bg-yellow-500/10 border border-yellow-500/30 rounded-xl\">\n                  <p className=\"text-sm text-yellow-500 text-center font-medium\">\n                    Please connect your wallet to trade\n                  </p>\n                </div>\n              ) : (\n                <Button\n                  className={`w-full h-14 text-lg font-bold transition-all rounded-2xl ${\n                    isBuying\n                      ? 'bg-green-500 hover:bg-green-600'\n                      : 'bg-red-500 hover:bg-red-600'\n                  } text-white`}\n                  onClick={handleTrade}\n                  disabled={isTrading || createCommentMutation.isPending || !ethAmount || parseFloat(ethAmount) <= 0}\n                >\n                  {isTrading ? (\n                    <>\n                      <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                      Trading...\n                    </>\n                  ) : (\n                    `${isBuying ? 'Buy' : 'Sell'} ${coin.symbol}`\n                  )}\n                </Button>\n              )\n            ) : (\n              <div className=\"p-4 rounded-xl bg-green-500/10 border border-green-500/30\">\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle2 className=\"w-5 h-5 text-green-400 mt-0.5 flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-semibold text-green-400 text-base mb-2\">\n                      Transaction Successful!\n                    </div>\n                    <a\n                      href={`https://basescan.org/tx/${txHash}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-sm text-muted-foreground hover:text-foreground flex items-center gap-1 transition-colors\"\n                    >\n                      View on BaseScan\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </a>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* External Links */}\n            {coin.address && (\n              <div className=\"flex items-center gap-2 pt-2 mt-2 border-t border-border/30\">\n                <a\n                  href={`https://basescan.org/address/${coin.address}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 bg-muted/30 hover:bg-muted/50 rounded-lg transition-colors text-xs font-medium text-foreground\"\n                  title=\"View on BaseScan\"\n                >\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5zm0 18c-3.87-.93-7-5.07-7-9V8.3l7-3.11 7 3.11V11c0 3.93-3.13 8.07-7 9z\"/>\n                  </svg>\n                  BaseScan\n                </a>\n                <a\n                  href={`https://www.geckoterminal.com/base/pools/${coin.address}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 bg-muted/30 hover:bg-muted/50 rounded-lg transition-colors text-xs font-medium text-foreground\"\n                  title=\"View on GeckoTerminal\"\n                >\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"/>\n                  </svg>\n                  GeckoTerminal\n                </a>\n                <a\n                  href={`https://dexscreener.com/base/${coin.address}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center gap-1.5 px-3 py-1.5 bg-muted/30 hover:bg-muted/50 rounded-lg transition-colors text-xs font-medium text-foreground\"\n                  title=\"View on DexScreener\"\n                >\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n                  </svg>\n                  DexScreener\n                </a>\n              </div>\n            )}\n\n            {/* Balance */}\n            <div className=\"mt-auto pt-3 text-xs text-muted-foreground text-right\">\n              Balance: {parseFloat(balance).toFixed(6)} ETH\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"comments\" className=\"flex-1 px-4 pb-6 mt-0 pt-3 overflow-y-auto\">\n            <div className=\"mb-3\">\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Add a comment...\"\n                  className=\"h-10 bg-muted/20 border-border/30 text-foreground placeholder:text-muted-foreground flex-1 rounded-xl text-sm\"\n                  disabled={!isConnected || createCommentMutation.isPending}\n                  value={standaloneComment}\n                  onChange={(e) => setStandaloneComment(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      handleStandaloneComment();\n                    }\n                  }}\n                />\n                <Button\n                  onClick={handleStandaloneComment}\n                  disabled={!isConnected || createCommentMutation.isPending || !standaloneComment.trim()}\n                  className=\"h-10 rounded-full px-4 text-sm\"\n                >\n                  {createCommentMutation.isPending ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    'Post'\n                  )}\n                </Button>\n              </div>\n              {!isConnected && (\n                <p className=\"text-xs text-muted-foreground mt-1.5\">\n                  Connect your wallet to comment\n                </p>\n              )}\n            </div>\n\n            <ScrollArea className=\"flex-1\">\n              {commentsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"w-5 h-5 animate-spin text-muted-foreground\" />\n                </div>\n              ) : comments && comments.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {comments.map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"p-2.5 rounded-lg bg-muted/20 border border-border/30\"\n                    >\n                      <div className=\"flex items-start gap-2.5\">\n                        <div className=\"w-7 h-7 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-xs font-bold text-foreground flex-shrink-0\">\n                          {c.userAddress ? c.userAddress.slice(2, 4).toUpperCase() : '??'}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-0.5\">\n                            <span className=\"text-sm font-medium text-foreground truncate\">\n                              {c.userAddress ? `${c.userAddress.slice(0, 6)}...${c.userAddress.slice(-4)}` : 'Unknown'}</span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(c.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground break-words\">\n                            {c.comment}\n                          </p>\n                          {c.transactionHash && (\n                            <a\n                              href={`https://basescan.org/tx/${c.transactionHash}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-primary/70 hover:text-primary flex items-center gap-1 mt-1.5\"\n                            >\n                              View transaction <ExternalLink className=\"w-3 h-3\" />\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-48 text-center\">\n                  <MessageCircle className=\"w-10 h-10 text-muted-foreground/30 mb-2\" />\n                  <p className=\"text-sm font-medium text-foreground mb-1\">No comments yet</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Be the first to add a comment\n                  </p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"holders\" className=\"flex-1 px-4 pb-6 mt-0 pt-3 overflow-y-auto\">\n            <div className=\"mb-3 flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Total Holders</p>\n                <p className=\"text-lg font-bold text-foreground\">{uniqueHoldersCount}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Total Supply</p>\n                <p className=\"text-lg font-bold text-foreground\">\n                  {totalSupply ? parseFloat(totalSupply).toLocaleString(undefined, { maximumFractionDigits: 0 }) : '-'}\n                </p>\n              </div>\n            </div>\n\n            <ScrollArea className=\"flex-1\">\n              {holders.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {holders.map((holder, index) => {\n                    const isCreator = coin.creator ? holder.address.toLowerCase() === coin.creator.toLowerCase() : false;\n                    const tokenBalance = parseFloat(holder.balance);\n                    let formattedBalance: string;\n\n                    if (tokenBalance > 1e18) {\n                      formattedBalance = (tokenBalance / 1e18).toLocaleString(undefined, {\n                        maximumFractionDigits: 2,\n                        minimumFractionDigits: 2\n                      });\n                    } else if (tokenBalance > 1e6) {\n                      formattedBalance = (tokenBalance / 1e6).toFixed(2) + 'M';\n                    } else if (tokenBalance > 1e3) {\n                      formattedBalance = (tokenBalance / 1e3).toFixed(2) + 'K';\n                    } else {\n                      formattedBalance = tokenBalance.toLocaleString(undefined, { maximumFractionDigits: 2 });\n                    }\n\n                    let formattedPercentage: string;\n                    if (holder.percentage < 0.01 && holder.percentage > 0) {\n                      formattedPercentage = '<0.01';\n                    } else if (holder.percentage >= 100 || isNaN(holder.percentage)) {\n                      const totalHoldersBalance = holders.reduce((sum, h) => sum + parseFloat(h.balance), 0);\n                      const actualPercentage = totalHoldersBalance > 0\n                        ? (tokenBalance / totalHoldersBalance) * 100\n                        : 0;\n                      formattedPercentage = actualPercentage.toFixed(2);\n                    } else {\n                      formattedPercentage = holder.percentage.toFixed(2);\n                    }\n\n                    return (\n                      <div\n                        key={holder.address}\n                        className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/10 transition-colors border-b border-border/30\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex items-center gap-1.5 min-w-[25px]\">\n                            <span className=\"text-xs font-bold text-muted-foreground\">#{index + 1}</span>\n                          </div>\n                          <div className={`w-8 h-8 rounded-full ${\n                            index === 0\n                              ? 'bg-gradient-to-br from-yellow-500 to-orange-500'\n                              : isCreator\n                                ? 'bg-gradient-to-br from-primary to-secondary'\n                                : 'bg-gradient-to-br from-blue-500 to-cyan-500'\n                          } flex items-center justify-center text-xs font-bold text-foreground flex-shrink-0`}>\n                            {holder.address.slice(2, 4).toUpperCase()}\n                          </div>\n                          <div>\n                            <div className=\"flex items-center gap-1.5\">\n                              <p className=\"text-sm font-semibold text-foreground\">\n                                {holder.address.slice(0, 6)}...{holder.address.slice(-4)}\n                              </p>\n                              {isCreator && (\n                                <span className=\"text-xs px-1.5 py-0.5 rounded bg-primary/20 text-primary font-medium\">\n                                  Creator\n                                </span>\n                              )}\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formattedBalance} tokens\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-bold text-foreground\">\n                            {formattedPercentage}%\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-48 text-center\">\n                  <Users className=\"w-10 h-10 text-muted-foreground/30 mb-2\" />\n                  <p className=\"text-sm font-medium text-foreground mb-1\">Loading holders...</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Fetching holder information from blockchain\n                  </p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"activity\" className=\"flex-1 px-4 pb-6 mt-0 pt-3 overflow-y-auto\">\n            <ScrollArea className=\"flex-1\">\n              {commentsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"w-5 h-5 animate-spin text-muted-foreground\" />\n                </div>\n              ) : comments && comments.filter(c => c.transactionHash).length > 0 ? (\n                <div className=\"space-y-1.5\">\n                  {comments.filter(c => c.transactionHash).map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"flex items-center gap-2.5 p-2.5 rounded-lg hover:bg-muted/10 transition-colors border-b border-border/30\"\n                    >\n                      <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-xs font-bold text-foreground flex-shrink-0\">\n                        {c.userAddress.slice(2, 4).toUpperCase()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-0.5\">\n                          <span className=\"text-sm font-medium text-foreground truncate\">\n                            {c.userAddress.slice(0, 8)}...\n                          </span>\n                          <span className=\"text-sm font-bold text-green-500\">\n                            Traded\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(c.createdAt).toLocaleTimeString()} • {new Date(c.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        {c.comment && (\n                          <p className=\"text-xs text-muted-foreground mt-0.5 italic\">\n                            \"{c.comment}\"\n                          </p>\n                        )}\n                      </div>\n                      <a\n                        href={`https://basescan.org/tx/${c.transactionHash}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary/70 hover:text-primary flex-shrink-0\"\n                      >\n                        <ExternalLink className=\"w-4 h-4\" />\n                      </a>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-48 text-center\">\n                  <ActivityIcon className=\"w-10 h-10 text-muted-foreground/30 mb-2\" />\n                  <p className=\"text-sm font-medium text-foreground mb-1\">No trades yet</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Trading activity will appear here\n                  </p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"details\" className=\"flex-1 px-4 pb-6 mt-0 pt-3 overflow-y-auto\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Info className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Created</span>\n                </div>\n                <span className=\"text-sm font-medium text-foreground\">\n                  {coin.createdAt ? new Date(coin.createdAt).toLocaleDateString() : 'Unknown'}\n                </span>\n              </div>\n\n              {coin.address && (\n                <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Coins className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Contract address</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-mono text-foreground\">\n                      {coin.address.slice(0, 6)}...{coin.address.slice(-4)}\n                    </span>\n                    <button\n                      onClick={() => copyToClipboard(coin.address!)}\n                      className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                    >\n                      {copiedAddress ? (\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                      ) : (\n                        <Copy className=\"w-4 h-4\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <ActivityIcon className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Chain</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 rounded-full bg-blue-500 flex items-center justify-center\">\n                    <span className=\"text-[10px] font-bold text-foreground\">B</span>\n                  </div>\n                  <span className=\"text-sm font-medium text-foreground\">Base</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between py-2 border-b border-border/30\">\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Users className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Creator</span>\n                </div>\n                <span className=\"text-sm font-mono text-white\">\n                  {formatAddress(coin.creator)}\n                </span>\n              </div>\n\n              {(coin as any).metadata?.originalUrl && (\n                <div className=\"flex items-center justify-between py-2\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <ExternalLink className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">Original post</span>\n                  </div>\n                  <a\n                    href={(coin as any).metadata.originalUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm text-primary hover:underline\"\n                  >\n                    View\n                  </a>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DrawerContent>\n      {isAudio && (\n        <audio ref={setAudioRef} src={coin.metadata?.animation_url || coin.metadata?.audio_url || ''} />\n      )}\n    </Drawer>\n  );\n}","size_bytes":42652},"client/src/pages/profile.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAccount } from \"wagmi\";\nimport { useLocation } from \"wouter\";\nimport type { Coin } from \"@shared/schema\";\nimport Layout from \"@/components/layout\";\nimport CoinCard from \"@/components/coin-card\";\nimport {\n  User as UserIcon,\n  Share2,\n  Grid3x3,\n  List,\n  Copy,\n  Check,\n  DollarSign,\n  TrendingUp,\n  Edit2,\n  Users,\n  Coins as CoinsIcon,\n  ChevronRight,\n  Settings as SettingsIcon\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCoin } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { createAvatar } from '@dicebear/core';\nimport { avataaars } from '@dicebear/collection';\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { formatSmartCurrency } from \"@/lib/utils\";\n\n// Helper function to update OG meta tags\nconst updateOGMeta = ({ title, description, image, url }: { title: string; description: string; image: string; url: string }) => {\n  const head = document.head;\n  const oldMeta = head.querySelectorAll('meta[property^=\"og:\"]');\n  oldMeta.forEach(meta => meta.remove());\n\n  const newMetaTags = [\n    { property: 'og:title', content: title },\n    { property: 'og:description', content: description },\n    { property: 'og:image', content: image },\n    { property: 'og:url', content: url },\n    { property: 'og:type', content: 'website' },\n  ];\n\n  newMetaTags.forEach(({ property, content }) => {\n    const meta = document.createElement('meta');\n    meta.setAttribute('property', property);\n    meta.setAttribute('content', content);\n    head.appendChild(meta);\n  });\n\n  // Also update the Twitter card meta tags\n  const twitterMetaTags = [\n    { name: 'twitter:title', content: title },\n    { name: 'twitter:description', content: description },\n    { name: 'twitter:image', content: image },\n    { name: 'twitter:card', content: 'summary_large_image' },\n  ];\n\n  twitterMetaTags.forEach(({ name, content }) => {\n    let meta = head.querySelector(`meta[name=\"${name}\"]`);\n    if (!meta) {\n      meta = document.createElement('meta');\n      meta.setAttribute('name', name);\n      head.appendChild(meta);\n    }\n    meta.setAttribute('content', content);\n  });\n};\n\n\nexport default function Profile() {\n  const { address, isConnected } = useAccount();\n  const [selectedTab, setSelectedTab] = useState<\"created\" | \"owned\">(\"created\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [copied, setCopied] = useState(false);\n  const [totalEarnings, setTotalEarnings] = useState<number>(0);\n  const [totalMarketCap, setTotalMarketCap] = useState<number>(0);\n  const [totalHolders, setTotalHolders] = useState<number>(0);\n  const [isLoadingStats, setIsLoadingStats] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [bio, setBio] = useState(\"\");\n  const [profileImage, setProfileImage] = useState<File | null>(null);\n  const [profileImageUrl, setProfileImageUrl] = useState<string>(\"\");\n  const [isUploadingImage, setIsUploadingImage] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [shareUrl, setShareUrl] = useState<string>(\"\"); // State for the shareable URL\n\n  const avatarSvg = createAvatar(avataaars, {\n    seed: address || 'anonymous',\n    size: 128,\n  }).toDataUri();\n\n  // Fetch creator data to populate username and bio\n  const { data: creatorData, isLoading: isLoadingCreatorData } = useQuery({\n    queryKey: ['/api/creators/address', address],\n    enabled: !!address,\n  });\n\n  // Fetch creator stats\n  const { data: creatorStats, isLoading: isLoadingCreatorStats } = useQuery({\n    queryKey: ['/api/creators/stats', address],\n    enabled: !!address,\n  });\n\n  // Fetch following count\n  const { data: followingList = [] } = useQuery({\n    queryKey: ['/api/follows/following', address],\n    enabled: !!address,\n  });\n\n  const followingCount = followingList.length;\n\n  const { data: coins = [], isLoading: isLoadingCoins } = useQuery<Coin[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  const createdCoins = useMemo(() => {\n    if (!address) return [];\n    return coins.filter(coin =>\n      coin.creator_wallet && coin.creator_wallet.toLowerCase() === address.toLowerCase()\n    );\n  }, [coins, address]);\n\n  const ownedCoins = useMemo(() => {\n    return [];\n  }, []);\n\n  const displayedCoins = selectedTab === \"created\"\n    ? createdCoins.filter(coin => coin.address !== null) as Array<typeof createdCoins[0] & { address: string }>\n    : ownedCoins;\n\n  useEffect(() => {\n    if (!address || !isConnected || !createdCoins.length) {\n      setTotalEarnings(0);\n      setTotalMarketCap(0);\n      setTotalHolders(0);\n      setIsLoadingStats(false);\n      return;\n    }\n\n    let isMounted = true;\n    setIsLoadingStats(true);\n\n    async function fetchAllStats() {\n      try {\n        let earnings = 0;\n        let marketCap = 0;\n        let holders = 0;\n\n        for (const coin of createdCoins) {\n          if (coin.address && coin.status === 'active') {\n            try {\n              const coinData = await getCoin({\n                collectionAddress: coin.address as `0x${string}`,\n                chainId: base.id,\n              });\n\n              const tokenData = coinData.data?.zora20Token;\n\n              if (tokenData?.creatorEarnings && tokenData.creatorEarnings.length > 0) {\n                const earningAmount = parseFloat(String(tokenData.creatorEarnings[0].amountUsd || tokenData.creatorEarnings[0].amount?.amountDecimal || \"0\"));\n                earnings += earningAmount;\n              }\n\n              if (tokenData?.marketCap) {\n                marketCap += parseFloat(tokenData.marketCap);\n              }\n\n              if (tokenData?.uniqueHolders) {\n                holders += tokenData.uniqueHolders;\n              }\n            } catch (err) {\n              console.error(`Error fetching coin stats for ${coin.address}:`, err);\n            }\n          }\n        }\n\n        if (isMounted) {\n          setTotalEarnings(earnings);\n          setTotalMarketCap(marketCap);\n          setTotalHolders(holders);\n          setIsLoadingStats(false);\n        }\n      } catch (error) {\n        console.error(\"Error fetching creator stats:\", error);\n        if (isMounted) {\n          setTotalEarnings(0);\n          setTotalMarketCap(0);\n          setTotalHolders(0);\n          setIsLoadingStats(false);\n        }\n      }\n    }\n\n    fetchAllStats();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [address, isConnected, createdCoins]);\n\n  const formatAddress = (addr: string) => {\n    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  };\n\n  const handleCopyAddress = async () => {\n    if (!address) return;\n    try {\n      await navigator.clipboard.writeText(address);\n      setCopied(true);\n      toast({\n        title: \"Address copied\",\n        description: \"Wallet address copied to clipboard\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Failed to copy\",\n        description: \"Could not copy address to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleShare = async () => {\n    if (!address) return;\n    const url = shareUrl || `${window.location.origin}/profile?creator=${address}`;\n    try {\n      if (navigator.share) {\n        await navigator.share({\n          title: `${creatorData?.name || formatAddress(address)} - CoinIT Profile`,\n          text: `Check out my profile on CoinIT!`,\n          url: url,\n        });\n      } else {\n        await navigator.clipboard.writeText(url);\n        toast({\n          title: \"Link copied\",\n          description: \"Profile link copied to clipboard\",\n        });\n      }\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n\n  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n      setProfileImage(file);\n\n      // Upload to Pinata immediately\n      setIsUploadingImage(true);\n      try {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to upload image');\n        }\n\n        const data = await response.json();\n        setProfileImageUrl(data.url);\n\n        toast({\n          title: \"Image uploaded\",\n          description: \"Profile image uploaded successfully\",\n        });\n      } catch (error) {\n        console.error('Image upload error:', error);\n        toast({\n          title: \"Upload failed\",\n          description: \"Failed to upload profile image\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsUploadingImage(false);\n      }\n    }\n  };\n\n  // Update state when creator data loads\n  useEffect(() => {\n    if (creatorData) {\n      setUsername(creatorData.name || '');\n      setBio(creatorData.bio || '');\n      setProfileImageUrl(creatorData.avatar || '');\n    }\n  }, [creatorData]);\n\n  // Update OG meta when profile loads\n  useEffect(() => {\n    if (address) {\n      // Use @username if available, otherwise use address\n      const profilePath = creatorData?.name \n        ? `/@${creatorData.name}` \n        : `/${address}`;\n      const profileUrl = `${window.location.origin}${profilePath}`;\n      setShareUrl(profileUrl);\n\n      // Update OG meta for sharing\n      const displayName = creatorData?.name || formatAddress(address);\n      const stats = creatorStats \n        ? `${creatorStats.totalCoins || 0} coins created • ${creatorStats.totalVolume || '0'} ETH volume • ${creatorStats.totalHolders || 0} holders`\n        : 'Creator profile on CoinIT';\n      \n      updateOGMeta({\n        title: `${displayName} - CoinIT Profile`,\n        description: stats,\n        image: profileImageUrl || creatorData?.avatar || avatarSvg,\n        url: profileUrl\n      });\n    }\n  }, [address, creatorData, creatorStats, profileImageUrl, avatarSvg]);\n\n\n  const handleSaveProfile = async () => {\n    if (!address) return;\n\n    try {\n      // Get or create creator\n      const getResponse = await apiRequest('GET', `/api/creators/address/${address}`).catch(() => null);\n      let creator = getResponse ? await getResponse.json() : null;\n\n      if (!creator) {\n        // Create new creator\n        const createResponse = await apiRequest('POST', '/api/creators', {\n          address,\n          name: username || null,\n          bio: bio || null,\n          avatar: profileImageUrl || null,\n        });\n        creator = await createResponse.json();\n      } else {\n        // Update existing creator\n        const updateResponse = await apiRequest('PATCH', `/api/creators/${creator.id}`, {\n          name: username || null,\n          bio: bio || null,\n          avatar: profileImageUrl || null,\n        });\n        creator = await updateResponse.json();\n      }\n\n      // Invalidate all creator-related queries to refresh data everywhere\n      await queryClient.invalidateQueries({ queryKey: ['/api/creators/address'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/creators/stats', address] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/creators'] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/coins\"] });\n\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully\",\n      });\n\n      setIsEditModalOpen(false);\n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!isConnected) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-[60vh] p-8\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <UserIcon className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">Connect Your Wallet</h2>\n            <p className=\"text-muted-foreground\">\n              Please connect your wallet to view your profile\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-2xl mx-auto p-4 sm:p-6\">\n        {/* Header Section */}\n        <div className=\"relative mb-6\">\n          {/* Top Actions */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <button className=\"text-muted-foreground hover:text-white transition-colors\">\n              <ChevronRight className=\"w-6 h-6 rotate-180\" />\n            </button>\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => setIsEditModalOpen(true)}\n                className=\"px-4 py-2 bg-muted/30 hover:bg-muted/40 rounded-full text-sm font-semibold text-foreground transition-colors flex items-center gap-2\"\n                data-testid=\"button-edit-profile\"\n              >\n                <Edit2 className=\"w-4 h-4\" />\n                EDIT\n              </button>\n              <button\n                onClick={() => setLocation('/settings')}\n                className=\"p-2 bg-muted/30 hover:bg-muted/40 rounded-full text-foreground transition-colors\"\n                data-testid=\"button-settings\"\n              >\n                <SettingsIcon className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Avatar and Info */}\n          <div className=\"flex flex-col items-center text-center mb-6\">\n            <div className=\"relative mb-4\">\n              <img\n                src={profileImageUrl || (profileImage ? URL.createObjectURL(profileImage) : avatarSvg)}\n                alt=\"Profile Avatar\"\n                className=\"w-28 h-28 rounded-3xl border-4 border-border shadow-xl\"\n              />\n            </div>\n\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n              {creatorData?.name || username || (address ? formatAddress(address) : 'Anonymous')}\n            </h1>\n\n            <button\n              onClick={handleCopyAddress}\n              className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors mb-4\"\n              data-testid=\"button-copy-address\"\n            >\n              {copied ? (\n                <>\n                  <Check className=\"w-3.5 h-3.5\" />\n                  Copied\n                </>\n              ) : (\n                <>\n                  <span>@{address ? `${address.slice(2, 8)}` : ''}</span>\n                  <Copy className=\"w-3.5 h-3.5\" />\n                </>\n              )}\n            </button>\n\n            {(creatorData?.bio || bio) && (\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4 max-w-md px-4\">\n                {creatorData?.bio || bio}\n              </p>\n            )}\n          </div>\n\n          {/* Stats Grid - Compact */}\n          <div className=\"grid grid-cols-4 gap-2 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-gray-900 dark:text-white mb-1\">\n                {isLoadingStats || isLoadingCoins ? '-' : createdCoins.length}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 uppercase tracking-wide\">Coins</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-gray-900 dark:text-white mb-1\">\n                {isLoadingCreatorData ? '-' : parseInt(creatorData?.followers || '0')}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 uppercase tracking-wide\">Followers</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-gray-900 dark:text-white mb-1\">\n                {followingCount}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 uppercase tracking-wide\">Following</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-gray-900 dark:text-white mb-1\">\n                {isLoadingStats ? '-' : totalMarketCap >= 1000000\n                  ? `$${(totalMarketCap / 1000000).toFixed(2)}M`\n                  : totalMarketCap >= 1000\n                    ? `$${(totalMarketCap / 1000).toFixed(1)}k`\n                    : `$${totalMarketCap.toFixed(2)}`}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 uppercase tracking-wide\">Market Cap</div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-2 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-gray-900 dark:text-white mb-1\">\n                {isLoadingStats ? '-' : totalHolders}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 uppercase tracking-wide\">Holders</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-green-500 mb-1\">\n                {isLoadingStats ? '-' : totalEarnings >= 1000\n                  ? `$${(totalEarnings / 1000).toFixed(1)}k`\n                  : `$${totalEarnings.toFixed(2)}`}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 uppercase tracking-wide\">Earnings</div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 mb-6\">\n            <button\n              onClick={handleShare}\n              className=\"flex-1 py-2.5 bg-primary text-primary-foreground font-semibold rounded-full hover:bg-primary/90 transition-colors flex items-center justify-center gap-2\"\n              data-testid=\"button-share\"\n            >\n              <Share2 className=\"w-4 h-4\" />\n              Share Profile\n            </button>\n          </div>\n\n          {/* Social Share Options */}\n          <div className=\"flex gap-2 justify-center mb-6\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"rounded-full\"\n              asChild\n            >\n              <a \n                href={`https://twitter.com/intent/tweet?text=Check%20out%20my%20CoinIT%20profile!%20I've%20created%20${createdCoins.length}%20coins%20with%20${totalHolders}%20holders.%0A%0A${encodeURIComponent(shareUrl)}`}\n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n              >\n                <svg className=\"w-3.5 h-3.5\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"/></svg>\n              </a>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"rounded-full\"\n              onClick={async () => {\n                await navigator.clipboard.writeText(shareUrl);\n                toast({ title: \"Profile link copied!\" });\n              }}\n            >\n              <Copy className=\"w-3.5 h-3.5\" />\n            </Button>\n          </div>\n\n          {/* Earnings Card - Compact */}\n          {createdCoins.length > 0 && totalEarnings > 0 && (\n            <div className=\"bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-2xl p-4 mb-6 border border-green-500/30\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-green-500/20 rounded-full flex items-center justify-center\">\n                    <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-0.5\">Total Earnings</div>\n                    <div className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                      ${isLoadingStats ? '0.00' : totalEarnings.toFixed(2)}\n                    </div>\n                  </div>\n                </div>\n                <button\n                  onClick={async () => {\n                    const text = `💰 Just earned $${totalEarnings.toFixed(2)} from my ${createdCoins.length} coins on CoinIT! Join me and start creating!\\n\\n${shareUrl}\\n\\n#CoinIT #Web3 #CreatorEconomy`;\n                    if (navigator.share) {\n                      await navigator.share({ text });\n                    } else {\n                      window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`, '_blank');\n                    }\n                  }}\n                  className=\"p-2 bg-green-500/20 hover:bg-green-500/30 rounded-full transition-colors\"\n                  title=\"Share earnings\"\n                >\n                  <Share2 className=\"w-4 h-4 text-green-500\" />\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Edit Profile Modal */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"sm:max-w-[400px] bg-card border-border rounded-3xl p-6\">\n            <DialogHeader className=\"pb-2\">\n              <DialogTitle className=\"text-foreground text-xl font-bold\">Edit Profile</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {/* Profile Image Upload */}\n              <div className=\"flex flex-col items-center\">\n                <label htmlFor=\"profile-image-upload\" className=\"cursor-pointer group relative\">\n                  <img\n                    src={profileImageUrl || (profileImage ? URL.createObjectURL(profileImage) : avatarSvg)}\n                    alt=\"Profile Preview\"\n                    className=\"w-24 h-24 rounded-full border-4 border-primary shadow-lg transition-opacity group-hover:opacity-80\"\n                  />\n                  <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\n                    <div className=\"bg-black/50 rounded-full px-3 py-1 text-xs text-white\">\n                      {isUploadingImage ? 'Uploading...' : 'Change'}\n                    </div>\n                  </div>\n                </label>\n                <Input\n                  id=\"profile-image-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageChange}\n                  disabled={isUploadingImage}\n                  className=\"hidden\"\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground mb-1.5 block\">Username</label>\n                  <Input\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    placeholder=\"Enter your username\"\n                    className=\"bg-muted/20 border-border text-foreground rounded-xl h-11\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground mb-1.5 block\">Bio</label>\n                  <Textarea\n                    value={bio}\n                    onChange={(e) => setBio(e.target.value)}\n                    placeholder=\"Tell us about yourself...\"\n                    rows={3}\n                    className=\"bg-muted/20 border-border text-foreground resize-none rounded-xl\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                onClick={handleSaveProfile}\n                className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold rounded-xl h-11\"\n              >\n                Save Changes\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Tabs & View Toggle */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex gap-1 bg-muted/20 rounded-full p-1\">\n            <button\n              onClick={() => setSelectedTab(\"created\")}\n              className={`px-4 py-2 rounded-full text-sm font-semibold transition-colors ${\n                selectedTab === \"created\"\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"button-tab-created\"\n            >\n              Created {createdCoins.length > 0 && <span className=\"ml-1\">({createdCoins.length})</span>}\n            </button>\n            <button\n              onClick={() => setSelectedTab(\"owned\")}\n              className={`px-4 py-2 rounded-full text-sm font-semibold transition-colors ${\n                selectedTab === \"owned\"\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"button-tab-owned\"\n            >\n              Owned {ownedCoins.length > 0 && <span className=\"ml-1\">({ownedCoins.length})</span>}\n            </button>\n          </div>\n\n          <div className=\"flex gap-1 bg-muted/20 rounded-full p-1\">\n            <button\n              onClick={() => setViewMode(\"grid\")}\n              className={`p-2 rounded-full transition-colors ${\n                viewMode === \"grid\"\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"button-view-grid\"\n            >\n              <Grid3x3 className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => setViewMode(\"list\")}\n              className={`p-2 rounded-full transition-colors ${\n                viewMode === \"list\"\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"button-view-list\"\n            >\n              <List className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Coins Display */}\n        {isLoadingCoins ? (\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"spotify-card rounded-xl overflow-hidden p-3 space-y-3\">\n                <div className=\"aspect-square w-full bg-muted/20 rounded-lg animate-pulse\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-5 bg-muted/20 rounded w-3/4 animate-pulse\"></div>\n                  <div className=\"h-4 bg-muted/20 rounded w-1/2 animate-pulse\"></div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"h-4 bg-muted/20 rounded w-16 animate-pulse\"></div>\n                  <div className=\"h-4 bg-muted/20 rounded w-16 animate-pulse\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : displayedCoins.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CoinsIcon className=\"w-8 h-8 text-gray-600 dark:text-gray-400\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\n              {selectedTab === \"created\" ? \"No coins created yet\" : \"No coins owned yet\"}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              {selectedTab === \"created\"\n                ? \"Create your first coin to get started\"\n                : \"Start collecting coins to build your portfolio\"}\n            </p>\n            {selectedTab === \"created\" && (\n              <Button\n                onClick={() => setLocation('/create-coin')}\n                className=\"bg-primary hover:bg-primary/90 text-black font-bold rounded-xl h-11 px-6\"\n              >\n                Create Your Coin\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className={viewMode === \"grid\" ? \"grid grid-cols-2 gap-4\" : \"space-y-4\"}>\n            {displayedCoins.map((coin) => (\n              <CoinCard\n                key={coin.id}\n                coin={{\n                  ...coin,\n                  createdAt: typeof coin.createdAt === 'string'\n                    ? coin.createdAt\n                    : coin.createdAt\n                      ? coin.createdAt.toISOString()\n                      : new Date().toISOString(),\n                  ipfsUri: coin.ipfsUri ?? undefined\n                }}\n                isOwnCoin={selectedTab === \"created\"}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":29476},"REGISTRY_DEPLOYMENT_GUIDE.md":{"content":"# Platform Coin Registry - Deployment & Usage Guide\n\n## Overview\nThis registry system provides **onchain verification** for all coins created through your platform. This is essential for grant applications (Optimism, Giveth, Gitcoin) as it creates verifiable, transparent metrics of your platform's activity.\n\n## Why This Matters for Grants\nGrant platforms analyze onchain data to:\n- ✅ Verify real platform activity (not self-reported)\n- ✅ Track growth and adoption metrics\n- ✅ Measure creator engagement\n- ✅ Prove transparent operations\n\n## Architecture\n\n### Components\n1. **Smart Contract** (`contracts/PlatformCoinRegistry.sol`) - Onchain registry\n2. **Backend Service** (`server/registry-service.ts`) - Batch registration logic\n3. **API Endpoints** (`server/routes.ts`) - Registry management\n4. **Database Schema** (`shared/schema.ts`) - Registry tracking fields\n\n### How It Works\n```\nUser Creates Coin → Zora Deployment → Database Record (pending)\n                                    ↓\n                            Backend Batch Process\n                                    ↓\n                            Registry Contract Call\n                                    ↓\n                            Onchain Verification ✅\n```\n\n## Deployment Steps\n\n### 1. Deploy the Smart Contract\n\n#### Option A: Using Remix IDE (Recommended)\n1. Go to [Remix IDE](https://remix.ethereum.org/)\n2. Create new file `PlatformCoinRegistry.sol`\n3. Copy contents from `contracts/PlatformCoinRegistry.sol`\n4. Compile with Solidity 0.8.20+\n5. Deploy to Base Mainnet (chainId: 8453)\n6. Save the deployed contract address\n\n#### Option B: Using Hardhat/Foundry\n```bash\n# Install Hardhat\nnpm install --save-dev hardhat @nomicfoundation/hardhat-toolbox\n\n# Deploy script\nnpx hardhat run scripts/deploy.js --network base\n```\n\n### 2. Configure Environment Variables\n\nAdd to your `.env` file:\n\n```bash\n# Required for Registry\nREGISTRY_CONTRACT_ADDRESS=0x...  # Your deployed contract address\nPLATFORM_PRIVATE_KEY=0x...        # Platform wallet private key (for batch registration)\n\n# Existing variables\nVITE_ALCHEMY_API_KEY=...\nVITE_ZORA_RPC_URL=...\n```\n\n**Security Note:** The `PLATFORM_PRIVATE_KEY` should be a dedicated wallet with only enough ETH for gas fees (~0.01 ETH). This wallet will pay for batch registrations.\n\n### 3. Fund the Platform Wallet\n\nSend ~0.01-0.05 ETH to the platform wallet address to cover gas fees for registry transactions.\n\n## Usage\n\n### Manual Registry Sync\n\nTrigger batch registration of all unregistered coins:\n\n```bash\ncurl -X POST http://localhost:5000/api/registry/sync\n```\n\nResponse:\n```json\n{\n  \"success\": true,\n  \"transactionHash\": \"0x...\",\n  \"registered\": 10\n}\n```\n\n### View Registry Statistics\n\n```bash\ncurl http://localhost:5000/api/registry/stats\n```\n\nResponse:\n```json\n{\n  \"totalOnchain\": 15,\n  \"totalInDb\": 20,\n  \"registeredInDb\": 15,\n  \"pendingRegistration\": 5\n}\n```\n\n### Verify Individual Coin\n\n```bash\ncurl http://localhost:5000/api/registry/verify/0x...\n```\n\nResponse:\n```json\n{\n  \"address\": \"0x...\",\n  \"isRegistered\": true,\n  \"registryTxHash\": \"0x...\",\n  \"registeredAt\": \"2024-10-03T12:00:00Z\"\n}\n```\n\n### Get Creator Metrics\n\n```bash\ncurl http://localhost:5000/api/registry/creator/0x.../count\n```\n\nResponse:\n```json\n{\n  \"creator\": \"0x...\",\n  \"onchainCoinCount\": 5\n}\n```\n\n## Automated Batch Registration (Optional)\n\n### Setup Cron Job\n\nAdd to your server (Linux/Mac):\n\n```bash\n# Edit crontab\ncrontab -e\n\n# Add line to run every hour\n0 * * * * curl -X POST http://localhost:5000/api/registry/sync\n```\n\nOr use a service like [cron-job.org](https://cron-job.org) to trigger the endpoint hourly.\n\n## Grant Application Metrics\n\n### What to Include in Grant Applications\n\n1. **Total Platform Activity**\n   ```\n   GET /api/registry/stats\n   → Shows total coins registered onchain\n   ```\n\n2. **Creator Engagement**\n   ```\n   GET /api/creators/top\n   → Shows active creators\n   \n   GET /api/registry/creator/{address}/count\n   → Shows verified coins per creator\n   ```\n\n3. **Verifiable Links**\n   - Contract Address: `0x...` (on Basescan)\n   - Example: `https://basescan.org/address/0x...`\n   - Show event logs proving registrations\n\n### Grant Platform Verification\n\nGrant reviewers can independently verify:\n\n1. **Read Contract on Basescan**\n   - Call `totalCoinsRegistered()` → Total coins\n   - Call `isPlatformCoin(address)` → Verify specific coin\n   - Call `getCreatorCoinCount(creator)` → Creator activity\n\n2. **View Events**\n   - `CoinRegistered` events show all registrations\n   - `BatchRegistered` events show batch operations\n   - Transparent timestamp data\n\n## Smart Contract Methods\n\n### Public View Methods (No Gas)\n\n```solidity\n// Check if coin is registered\nisPlatformCoin(address coinAddress) returns (bool)\n\n// Get total registered coins\ntotalCoinsRegistered() returns (uint256)\n\n// Get creator's coin count\ngetCreatorCoinCount(address creator) returns (uint256)\n\n// Get coin details\ngetCoinRecord(address coinAddress) returns (\n    address creator,\n    bytes32 metadataHash,\n    uint256 timestamp,\n    bool exists\n)\n```\n\n### Owner-Only Methods (Requires Gas)\n\n```solidity\n// Register single coin (admin only)\nregisterCoin(\n    address coinAddress,\n    address creator,\n    bytes32 metadataHash\n)\n\n// Batch register (admin only)\nregisterBatch(\n    address[] coinAddresses,\n    address[] creators,\n    bytes32[] metadataHashes\n)\n```\n\n## Cost Estimation\n\n### Gas Costs (Base Mainnet)\n- Single registration: ~100,000 gas (~$0.20-0.50)\n- Batch registration (10 coins): ~500,000 gas (~$1-2)\n- Contract deployment: ~2,000,000 gas (~$4-8)\n\n### Monthly Operating Costs\n- 100 coins/month: ~$10-20 in gas fees\n- 1000 coins/month: ~$100-200 in gas fees\n\n**Cost Savings:** Batch registration saves ~50% vs individual registrations\n\n## Troubleshooting\n\n### Registry Sync Fails\n\n**Error:** `Failed to register coins batch`\n\n**Solutions:**\n1. Check platform wallet has sufficient ETH\n2. Verify `REGISTRY_CONTRACT_ADDRESS` is correct\n3. Ensure `PLATFORM_PRIVATE_KEY` is valid\n4. Check RPC URL is working\n\n### No Pending Coins to Register\n\nThis means all active coins are already registered. This is good!\n\n### Contract Not Found\n\nMake sure:\n1. Contract is deployed on the correct network (Base = 8453)\n2. `REGISTRY_CONTRACT_ADDRESS` matches deployed address\n3. Using correct RPC URL for the network\n\n## Security Best Practices\n\n1. **Private Key Management**\n   - Use dedicated wallet for registry operations\n   - Keep minimum ETH balance (~0.05 ETH max)\n   - Never commit private keys to git\n   - Rotate keys if compromised\n\n2. **Access Control**\n   - Only platform wallet can register coins\n   - Use `transferOwnership()` to change admin if needed\n\n3. **Monitoring**\n   - Monitor platform wallet balance\n   - Set up alerts for failed transactions\n   - Review registry stats regularly\n\n## Next Steps\n\n1. ✅ Deploy smart contract to Base\n2. ✅ Configure environment variables\n3. ✅ Fund platform wallet\n4. ✅ Test manual sync\n5. ✅ Set up automated batch registration\n6. ✅ Document metrics for grant application\n\n## Support & Resources\n\n- **Block Explorer:** https://basescan.org\n- **Base RPC:** https://mainnet.base.org\n- **Alchemy Dashboard:** https://dashboard.alchemy.com\n\n## Grant Platforms\n\nSubmit to:\n- **Optimism RetroPGF:** https://app.optimism.io/retropgf\n- **Gitcoin Grants:** https://grants.gitcoin.co\n- **Giveth:** https://giveth.io\n\n### Application Tips\n- Highlight transparent onchain metrics\n- Show creator growth over time\n- Demonstrate platform utility\n- Link to verifiable contract data\n","size_bytes":7548},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"scripts/verify-curl.sh":{"content":"#!/bin/bash\n\nCONTRACT_ADDRESS=\"0xa99d508b3d5f9e9bf4b18396250974e684529668\"\nAPI_KEY=\"${BASESCAN_API_KEY}\"\n\nif [ -z \"$API_KEY\" ]; then\n  echo \"❌ BASESCAN_API_KEY not set\"\n  exit 1\nfi\n\necho \"🔍 Verifying contract on Basescan...\"\necho \"📍 Contract: $CONTRACT_ADDRESS\"\necho \"\"\n\nSOURCE_CODE=$(cat contracts/YoubuidlChannelsRegistry.sol)\n\nRESPONSE=$(curl -s -X POST \"https://api.basescan.org/api?module=contract&action=verifysourcecode&apikey=$API_KEY\" \\\n  --data-urlencode \"chainId=8453\" \\\n  --data-urlencode \"codeformat=solidity-single-file\" \\\n  --data-urlencode \"sourceCode=$SOURCE_CODE\" \\\n  --data-urlencode \"contractaddress=$CONTRACT_ADDRESS\" \\\n  --data-urlencode \"contractname=YoubuidlChannelsRegistry\" \\\n  --data-urlencode \"compilerversion=v0.8.20+commit.a1b79de6\" \\\n  --data-urlencode \"optimizationUsed=1\" \\\n  --data-urlencode \"runs=200\" \\\n  --data-urlencode \"constructorArguements=\" \\\n  --data-urlencode \"evmversion=paris\")\n\necho \"📤 Response: $RESPONSE\"\necho \"\"\n\nSTATUS=$(echo \"$RESPONSE\" | grep -o '\"status\":\"[^\"]*\"' | cut -d'\"' -f4)\nMESSAGE=$(echo \"$RESPONSE\" | grep -o '\"message\":\"[^\"]*\"' | cut -d'\"' -f4)\nRESULT=$(echo \"$RESPONSE\" | grep -o '\"result\":\"[^\"]*\"' | cut -d'\"' -f4)\n\nif [ \"$STATUS\" = \"1\" ]; then\n  echo \"✅ Verification submitted successfully!\"\n  echo \"📝 GUID: $RESULT\"\n  echo \"\"\n  echo \"⏳ Checking verification status in 5 seconds...\"\n  sleep 5\n  \n  CHECK_RESPONSE=$(curl -s \"https://api.basescan.org/api?module=contract&action=checkverifystatus&guid=$RESULT&apikey=$API_KEY\")\n  echo \"\"\n  echo \"Status check: $CHECK_RESPONSE\"\n  echo \"\"\n  echo \"🔗 View contract at:\"\n  echo \"   https://basescan.org/address/$CONTRACT_ADDRESS#code\"\nelse\n  echo \"❌ Verification failed\"\n  echo \"   Message: $MESSAGE\"\n  echo \"   Result: $RESULT\"\n  \n  if echo \"$RESULT\" | grep -q \"already verified\"; then\n    echo \"\"\n    echo \"✅ Contract is already verified!\"\n    echo \"🔗 View at: https://basescan.org/address/$CONTRACT_ADDRESS#code\"\n  fi\nfi\n","size_bytes":1961},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-3xl p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&_.badge-count]:px-1.5 [&_.badge-count]:py-0.5 [&_.badge-count]:text-[9px] [&_.badge-count]:min-w-[16px] [&_.badge-count]:h-3.5 [&_.badge-count]:bg-red-500 [&_.badge-count]:text-white [&_.badge-count]:rounded-full [&_.badge-count]:ml-auto\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-3xl p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-4 min-w-[18px] select-none items-center justify-center rounded-2xl px-1.5 text-[10px] font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":24056},"client/src/components/content-preview-card.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { uploadToIPFS } from \"@/lib/pinata\";\nimport { createZoraCoin } from \"@/lib/zora\";\nimport { Calendar, User, ExternalLink, Loader2, Plus } from \"lucide-react\";\nimport { usePrivy, useWallets } from \"@privy-io/react-auth\";\nimport { createWalletClient, custom } from \"viem\";\nimport { base } from \"viem/chains\";\n\ninterface ContentPreviewCardProps {\n  scrapedData: any;\n  onCoinCreated: () => void;\n}\n\nexport default function ContentPreviewCard({ scrapedData, onCoinCreated }: ContentPreviewCardProps) {\n  const { toast } = useToast();\n  const { authenticated, user } = usePrivy();\n  const { wallets } = useWallets();\n  \n  const walletAddress = user?.wallet?.address as `0x${string}` | undefined;\n  const privyWallet = wallets[0];\n\n  const generateSymbol = (title: string) => {\n    // Remove special characters and get clean text\n    const cleanTitle = title.replace(/[^a-zA-Z0-9\\s]/g, '').trim();\n    const words = cleanTitle.split(/\\s+/).filter(word => word.length > 0);\n\n    let symbol = '';\n    if (words.length >= 2) {\n      // Take first letters from multiple words\n      symbol = words.slice(0, 3).map(w => w[0]).join('').toUpperCase();\n    } else {\n      // Take characters from the cleaned title\n      symbol = cleanTitle.slice(0, 10).toUpperCase().replace(/[^A-Z0-9]/g, '');\n    }\n\n    return symbol || 'COIN';\n  };\n\n  const [coinSymbol, setCoinSymbol] = useState(() => generateSymbol(scrapedData.title));\n\n  const createCoinMutation = useMutation({\n    mutationFn: async () => {\n      if (!walletAddress) {\n        throw new Error(\"Please connect your wallet first\");\n      }\n      if (!privyWallet) {\n        throw new Error(\"Wallet not available\");\n      }\n\n      // Get the EIP-1193 provider from Privy wallet\n      const provider = await privyWallet.getEthereumProvider();\n      \n      // Create a viem wallet client from the provider\n      const walletClient = createWalletClient({\n        account: walletAddress,\n        chain: base,\n        transport: custom(provider),\n      });\n\n      // Upload metadata to IPFS for backup\n      const metadata = {\n        title: scrapedData.title,\n        description: scrapedData.description,\n        image: scrapedData.image,\n        originalUrl: scrapedData.url,\n        author: scrapedData.author,\n        publishDate: scrapedData.publishDate,\n        content: scrapedData.content,\n      };\n\n      const ipfsUri = await uploadToIPFS(metadata);\n\n      // Create scraped content record first to preserve metadata (including animation_url for videos)\n      let scrapedContentId = null;\n      try {\n        const scrapedContentData = {\n          url: scrapedData.url || scrapedData.originalUrl || '',\n          title: scrapedData.title,\n          description: scrapedData.description,\n          author: scrapedData.author,\n          publishDate: scrapedData.publishDate,\n          image: scrapedData.image,\n          content: scrapedData.content,\n          platform: scrapedData.platform || 'upload',\n          metadata: {\n            animation_url: scrapedData.animation_url,\n            type: scrapedData.type\n          }\n        };\n\n        const scrapedContentResponse = await apiRequest(\"POST\", \"/api/scraped-content\", scrapedContentData);\n        const scrapedContent = await scrapedContentResponse.json();\n        scrapedContentId = scrapedContent.id;\n      } catch (error) {\n        console.warn(\"Failed to create scraped content, proceeding without it:\", error);\n      }\n\n      // Create pending coin record in database first (decouple from Zora blockchain)\n      const createdCoin = await apiRequest(\"POST\", \"/api/coins\", {\n        name: scrapedData.title,\n        symbol: coinSymbol,\n        creator_wallet: walletAddress,\n        status: 'pending' as const,\n        scrapedContentId: scrapedContentId,\n        ipfsUri: ipfsUri, // Use the uploaded IPFS URI\n        image: scrapedData.image || \"\",\n        description: scrapedData.description || `A coin representing ${scrapedData.title}`,\n      });\n      const createdCoinJson = await createdCoin.json();\n\n      // Deploy contract on-chain using Zora factory\n      const { deployCreatorCoinDirect } = await import('@/lib/zora-factory');\n\n      const deployResult = await deployCreatorCoinDirect(\n        {\n          name: scrapedData.title,\n          symbol: coinSymbol,\n          metadataUri: ipfsUri, // Use the uploaded IPFS URI\n          creatorAddress: walletAddress,\n          contentUrl: scrapedData.url || ipfsUri, // Use original URL or IPFS URI\n          useActivityTracker: false, // Temporarily disabled to debug\n        },\n        walletClient,\n        8453 // Base mainnet\n      );\n\n      // Update coin with deployed address and active status\n      await apiRequest(\"PATCH\", `/api/coins/${createdCoinJson.id}`, {\n        address: deployResult.address,\n        chainId: (walletClient.chain?.id || 8453).toString(), // Use actual chain ID or default to 8453\n        status: 'active' as const,\n        createdAt: deployResult.createdAt, // Use blockchain timestamp\n      });\n\n      return { coin: { ...createdCoinJson, address: deployResult.address, status: 'active', createdAt: deployResult.createdAt }, scrapedContentId };\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Coin Deployed Successfully! 🎉\",\n        description: `${data.coin.symbol} is now live on Base blockchain at ${data.coin.address?.slice(0, 6)}...${data.coin.address?.slice(-4)}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/coins\"] });\n      onCoinCreated();\n    },\n    onError: (error: Error) => {\n      console.error(\"Coin creation mutation error:\", error);\n      toast({\n        title: \"Coin creation failed\",\n        description: error.message || \"Failed to create coin\",\n        variant: \"error\",\n      });\n    },\n  });\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"Unknown date\";\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", { year: 'numeric', month: 'short', day: 'numeric' });\n  };\n\n  return (\n    <div className=\"p-1\">\n      <div className=\"grid md:grid-cols-3 gap-4\">\n        <div className=\"md:col-span-1\">\n          {(scrapedData.animation_url || scrapedData.image) && (\n            <>\n              {scrapedData.type === 'video' ? (\n                <video\n                  src={scrapedData.animation_url || scrapedData.image}\n                  className=\"w-full h-32 object-cover rounded-lg\"\n                  controls\n                  playsInline\n                  poster={scrapedData.image || undefined}\n                />\n              ) : scrapedData.type === 'audio' ? (\n                <div className=\"w-full bg-muted rounded-lg p-4 flex items-center justify-center\">\n                  <audio\n                    src={scrapedData.animation_url || scrapedData.image}\n                    className=\"w-full\"\n                    controls\n                  />\n                </div>\n              ) : scrapedData.image ? (\n                <img\n                  src={scrapedData.image.replace('gateway.pinata.cloud', 'dweb.link')}\n                  alt={scrapedData.title}\n                  className=\"w-full h-32 object-cover rounded-lg\"\n                  onError={(e) => {\n                    // Try alternate gateway on error\n                    const currentSrc = e.currentTarget.src;\n                    if (currentSrc.includes('dweb.link')) {\n                      e.currentTarget.src = scrapedData.image.replace('gateway.pinata.cloud', 'ipfs.io');\n                    } else if (!currentSrc.includes('ipfs.io')) {\n                      e.currentTarget.src = scrapedData.image.replace('gateway.pinata.cloud', 'dweb.link');\n                    } else {\n                      e.currentTarget.style.display = 'none';\n                    }\n                  }}\n                />\n              ) : null}\n            </>\n          )}\n        </div>\n\n        <div className=\"md:col-span-2 space-y-3\">\n          <div>\n            <h3 className=\"text-lg font-bold text-foreground mb-1\" data-testid=\"text-preview-title\">\n              {scrapedData.title}\n            </h3>\n            {scrapedData.description && (\n              <p className=\"text-xs text-muted-foreground line-clamp-2\" data-testid=\"text-preview-description\">\n                {scrapedData.description}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex flex-wrap gap-3 text-xs text-muted-foreground\">\n            {scrapedData.author && (\n              <div className=\"flex items-center gap-1\">\n                <User className=\"w-4 h-4\" />\n                <span data-testid=\"text-preview-author\">{scrapedData.author}</span>\n              </div>\n            )}\n            {scrapedData.publishDate && (\n              <div className=\"flex items-center gap-1\">\n                <Calendar className=\"w-4 h-4\" />\n                <span data-testid=\"text-preview-date\">{formatDate(scrapedData.publishDate)}</span>\n              </div>\n            )}\n            <div className=\"flex items-center gap-1\">\n              <ExternalLink className=\"w-4 h-4\" />\n              <a\n                href={scrapedData.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"truncate max-w-xs hover:text-foreground\"\n                data-testid=\"link-preview-url\"\n              >\n                {new URL(scrapedData.url).hostname}\n              </a>\n            </div>\n          </div>\n\n          <div className=\"pt-3 border-t border-border\">\n            <Label htmlFor=\"coinSymbol\" className=\"block text-xs font-medium mb-1.5\">\n              Coin Symbol\n            </Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"coinSymbol\"\n                type=\"text\"\n                value={coinSymbol}\n                onChange={(e) => {\n                  const val = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');\n                  setCoinSymbol(val);\n                }}\n                className=\"flex-1 bg-muted border-input text-foreground font-mono h-9 text-sm\"\n                placeholder=\"Enter symbol\"\n                disabled={createCoinMutation.isPending}\n                data-testid=\"input-coin-symbol\"\n              />\n              <Button\n                onClick={() => createCoinMutation.mutate()}\n                disabled={createCoinMutation.isPending || !coinSymbol || !walletAddress || !privyWallet}\n                className=\"bg-gradient-to-r from-primary to-primary text-primary-foreground h-9 px-4 text-sm rounded-2xl hover:opacity-90 cursor-pointer\"\n                data-testid=\"button-create-coin\"\n                title={!walletAddress ? \"Connect wallet to create coins\" : \"\"}\n              >\n                {createCoinMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Create\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11506},"client/src/components/layout.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useAccount } from \"wagmi\";\nimport {\n  Play,\n  Compass,\n  Plus,\n  Users,\n  Trophy,\n  HelpCircle,\n  ChevronLeft,\n  ChevronRight,\n  Hash,\n  Search,\n  Award,\n  Menu,\n  User,\n  Moon,\n  Sun,\n  Bell,\n  DollarSign,\n  BookOpen,\n  TrendingUp,\n} from \"lucide-react\";\n// import notificationIconSvg from \"@/assets/notificationIcon.svg\"; // Removed as it's no longer used\nimport WalletConnectButton from \"./wallet-connect-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Notification } from \"@shared/schema\";\nimport { getCoin } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { createAvatar } from '@dicebear/core';\nimport { avataaars } from '@dicebear/collection';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nfunction HeaderStats() {\n  const { data: coins = [] } = useQuery<any[]>({\n    queryKey: [\"/api/coins\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const [totalMarketCap, setTotalMarketCap] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    async function fetchStats() {\n      const activeCoins = coins.filter(c => c.address && c.status === 'active');\n\n      if (activeCoins.length === 0) {\n        if (isMounted) {\n          setTotalMarketCap(0);\n          setIsLoading(false);\n        }\n        return;\n      }\n\n      let totalMC = 0;\n\n      await Promise.all(\n        activeCoins.map(async (coin) => {\n          try {\n            const coinData = await getCoin({\n              address: coin.address as `0x${string}`,\n              chain: base.id,\n            });\n\n            const tokenData = coinData.data?.zora20Token;\n\n            if (tokenData?.marketCap) {\n              const mcValue = typeof tokenData.marketCap === 'string'\n                ? parseFloat(tokenData.marketCap)\n                : tokenData.marketCap;\n\n              if (!isNaN(mcValue) && mcValue > 0) {\n                totalMC += mcValue;\n              }\n            }\n          } catch (error) {\n            console.error(`Failed to fetch stats for ${coin.symbol}:`, error);\n          }\n        })\n      );\n\n      if (isMounted) {\n        setTotalMarketCap(totalMC);\n        setIsLoading(false);\n      }\n    }\n\n    setIsLoading(true);\n    fetchStats();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [coins]);\n\n  const activeCoins = coins.filter(c => c.status === 'active').length;\n  const today = new Date().toISOString().split('T')[0];\n  const newCoinsToday = coins.filter(c =>\n    c.createdAt && new Date(c.createdAt).toISOString().split('T')[0] === today\n  ).length;\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <div className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-full bg-gradient-to-r from-blue-500/10 to-blue-600/10 border border-blue-500/20\">\n        <TrendingUp className=\"w-3.5 h-3.5 text-green-500\" />\n        <span className=\"text-xs font-semibold text-foreground\">\n          {isLoading ? '...' : totalMarketCap >= 1000000\n            ? `$${(totalMarketCap / 1000000).toFixed(2)}M`\n            : totalMarketCap >= 1000\n              ? `$${(totalMarketCap / 1000).toFixed(1)}k`\n              : `$${totalMarketCap.toFixed(0)}`}\n        </span>\n        <span className=\"text-[10px] text-muted-foreground\">MC</span>\n      </div>\n\n      <div className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-full bg-gradient-to-r from-green-500/10 to-green-600/10 border border-green-500/20\">\n        <Trophy className=\"w-3.5 h-3.5 text-green-500\" />\n        <span className=\"text-xs font-semibold text-foreground\">{activeCoins}</span>\n        <span className=\"text-[10px] text-muted-foreground\">Coins</span>\n        {newCoinsToday > 0 && (\n          <span className=\"ml-1 px-1.5 py-0.5 bg-green-500 text-white text-[9px] font-bold rounded-full\">\n            +{newCoinsToday}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [location, setLocation] = useLocation();\n  const isMobile = useIsMobile();\n  const { isConnected } = useAccount();\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n  const { address } = useAccount();\n\n  const { data: notifications = [], isLoading: isLoadingNotifications } = useQuery<Notification[]>({\n    queryKey: [`/api/notifications/${address}/unread`],\n    enabled: !!address,\n    refetchInterval: 10000, // Poll every 10 seconds\n  });\n\n  const unreadCount = notifications.length;\n\n  // Fetch creator data to get avatar\n  const { data: creatorData } = useQuery({\n    queryKey: ['/api/creators/address', address],\n    queryFn: async () => {\n      if (!address) return null;\n      const response = await fetch(`/api/creators/address/${address}`);\n      if (!response.ok) return null;\n      return response.json();\n    },\n    enabled: !!address,\n  });\n\n  // Calculate new coins count (coins created in last 24 hours)\n  const { data: allCoins = [] } = useQuery<any[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  const newCoinsCount = useMemo(() => {\n    const twentyFourHoursAgo = Date.now() - 24 * 60 * 60 * 1000;\n    return allCoins.filter(coin => {\n      if (!coin.createdAt) return false;\n      const createdAt = new Date(coin.createdAt).getTime();\n      return createdAt > twentyFourHoursAgo;\n    }).length;\n  }, [allCoins]);\n\n  // Calculate new creators count (creators created in last 24 hours)\n  const { data: allCreators = [] } = useQuery<any[]>({\n    queryKey: [\"/api/creators\"],\n  });\n\n  const newCreatorsCount = useMemo(() => {\n    const twentyFourHoursAgo = Date.now() - 24 * 60 * 60 * 1000;\n    return allCreators.filter(creator => {\n      if (!creator.createdAt) return false;\n      const createdAt = new Date(creator.createdAt).getTime();\n      return createdAt > twentyFourHoursAgo;\n    }).length;\n  }, [allCreators]);\n\n  // Get username for profile links\n  const username = useMemo(() => {\n    if (!address) return null;\n    const creator = allCreators.find(c => c.address?.toLowerCase() === address.toLowerCase());\n    return creator?.name || address;\n  }, [allCreators, address]);\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.remove(\"light\", \"dark\");\n      document.documentElement.classList.add(savedTheme);\n    } else {\n      // Default to system theme if no theme is saved\n      const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n      const initialTheme = prefersDark ? \"dark\" : \"light\";\n      setTheme(initialTheme);\n      localStorage.setItem(\"theme\", initialTheme);\n      document.documentElement.classList.remove(\"light\", \"dark\");\n      document.documentElement.classList.add(initialTheme);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.remove(\"light\", \"dark\");\n    document.documentElement.classList.add(newTheme);\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/channels?search=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  // Helper function to get link class\n  const getLinkClass = (href: string) => {\n    return `flex items-center gap-3 p-2 rounded-lg transition-colors cursor-pointer relative ${\n      location === href\n        ? \"text-foreground bg-primary/20\"\n        : \"text-muted-foreground hover:text-foreground hover:bg-muted/10\"\n    }`;\n  };\n\n  const totalCoinsCount = allCoins.filter(c => c.status === 'active').length;\n  const totalCreatorsCount = allCreators.length;\n\n  const desktopNavItems = [\n    { href: \"/\", icon: Compass, label: \"Explore\", showBadge: true, badgeType: 'coins' },\n    // { href: \"/channels\", icon: Hash, label: \"Channels\" }, // Hidden for now\n    { href: \"/creators\", icon: Users, label: \"Creators\", showBadge: true, badgeType: 'creators' },\n    { href: \"/faq\", icon: HelpCircle, label: \"FAQ\" },\n    { href: \"/docs\", icon: BookOpen, label: \"Docs\" },\n  ];\n\n  const mobileNavItems = useMemo(() => {\n    const profileHref = address\n      ? (username && username !== address ? `/@${username}` : `/${address}`)\n      : \"/profile\";\n\n    return [\n      { href: \"/\", icon: Compass, label: \"Explore\", showBadge: true, badgeType: 'coins' },\n      { href: \"/search\", icon: Search, label: \"Search\" },\n      { href: \"/create\", icon: Plus, label: \"Create\" },\n      { href: \"/creators\", icon: Users, label: \"Creators\", showBadge: true, badgeType: 'creators' },\n      { href: profileHref, icon: User, label: \"Profile\", isAvatar: true },\n    ];\n  }, [address, username]);\n\n\n\n  const SidebarContent = ({ mobile = false }: { mobile?: boolean }) => {\n    const items = mobile ? mobileNavItems : desktopNavItems;\n\n    return (\n      <div className={`bg-sidebar ${mobile ? 'p-4' : 'p-6'} flex flex-col h-full`}>\n        <Link href=\"/\">\n          <div className=\"flex items-center gap-2 mb-8 cursor-pointer hover:opacity-80 transition-opacity\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <Play className=\"w-4 h-4 text-black fill-current\" />\n            </div>\n            {(!sidebarCollapsed || mobile) && (\n              <span className=\"text-2xl font-bold text-foreground\">Every1.fun</span>\n            )}\n          </div>\n        </Link>\n\n        <nav className=\"space-y-4 mb-8 flex-1\">\n          {items.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n\n            // Determine badge count based on badge type\n            let totalCount = 0;\n            let newCount = 0;\n            if (item.showBadge) {\n              if (item.badgeType === 'coins') {\n                totalCount = totalCoinsCount;\n                newCount = newCoinsCount;\n              } else if (item.badgeType === 'creators') {\n                totalCount = totalCreatorsCount;\n                newCount = newCreatorsCount;\n              }\n            }\n            const showBadge = item.showBadge && totalCount > 0;\n\n            return (\n              <div\n                key={item.href}\n                className={getLinkClass(item.href)}\n                onClick={() => {\n                  if (mobile) setMobileMenuOpen(false);\n                  setLocation(item.href);\n                }}\n              >\n                <div className=\"relative flex-shrink-0\">\n                  <Icon className=\"w-6 h-6\" />\n                  {showBadge && sidebarCollapsed && !mobile && (\n                    <span className=\"absolute -top-1.5 -right-1.5 min-w-[18px] h-4 px-1 bg-red-500 text-white text-[9px] font-bold rounded-full flex items-center justify-center\">\n                      {totalCount > 99 ? '99+' : totalCount}\n                    </span>\n                  )}\n                </div>\n                {(!sidebarCollapsed || mobile) && (\n                  <span className=\"font-bold\">{item.label}</span>\n                )}\n                {showBadge && (!sidebarCollapsed || mobile) && (\n                  <div className=\"ml-auto flex items-center gap-1\">\n                    <span className=\"min-w-[20px] h-5 px-2 py-0.5 bg-primary/20 text-foreground text-xs font-bold rounded-full flex items-center justify-center\">\n                      {totalCount > 99 ? '99+' : totalCount}\n                    </span>\n                    {newCount > 0 && (\n                      <span className=\"min-w-[18px] h-4 px-1.5 py-0.5 bg-green-500 text-white text-[9px] font-bold rounded-full flex items-center justify-center\">\n                        +{newCount > 9 ? '9+' : newCount}\n                      </span>\n                    )}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </nav>\n\n        {/* Social Links */}\n        {(!sidebarCollapsed || mobile) && (\n          <div className=\"mb-4\">\n            <div className=\"px-2 mb-2\">\n              <span className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                Community\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2 px-2\">\n              <a\n                href=\"/givestation\"\n                className=\"flex items-center justify-center w-9 h-9 rounded-lg bg-muted/20 hover:bg-primary/20 transition-colors group\"\n                title=\"Twitter\"\n              >\n                <svg className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"/>\n                </svg>\n              </a>\n              <a\n                href=\"/givestation\"\n                className=\"flex items-center justify-center w-9 h-9 rounded-lg bg-muted/20 hover:bg-primary/20 transition-colors group\"\n                title=\"Discord\"\n              >\n                <svg className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 0 0-.041-.106 13.107 13.107 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.299 12.299 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.839 19.839 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418z\"/>\n                </svg>\n              </a>\n              <a\n                href=\"/givestation\"\n                className=\"flex items-center justify-center w-9 h-9 rounded-lg bg-muted/20 hover:bg-primary/20 transition-colors group\"\n                title=\"Zora\"\n              >\n                <svg className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"currentColor\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n        )}\n\n      {(!sidebarCollapsed || mobile) && (\n        <div className=\"bg-muted/20 rounded-lg p-4\">\n          <h3 className=\"font-bold text-foreground mb-2\">Create Your First Coin</h3>\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Turn any blog post into a tradeable digital asset.\n          </p>\n          <Link href=\"/create\">\n            <button\n              className=\"spotify-button w-full\"\n              onClick={() => mobile && setMobileMenuOpen(false)}\n            >\n              Get Started\n            </button>\n          </Link>\n        </div>\n      )}\n\n      {!mobile && (\n        <button\n          onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n          className=\"flex items-center justify-center w-8 h-8 bg-muted/20 rounded-lg hover:bg-muted/30 transition-colors mt-4\"\n        >\n          {sidebarCollapsed ? (\n            <ChevronRight className=\"w-4 h-4 text-foreground\" />\n          ) : (\n            <ChevronLeft className=\"w-4 h-4 text-foreground\" />\n          )}\n        </button>\n      )}\n      </div>\n    );\n  };\n\n  if (isMobile) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <div className=\"flex flex-col h-screen\">\n          {/* Mobile Header */}\n          <header className=\"flex items-center justify-between p-4 bg-background/95 backdrop-blur-md border-b border-border sticky top-0 z-40\">\n            <Link href=\"/\">\n              <div className=\"flex items-center gap-2 cursor-pointer hover:opacity-80 transition-opacity\">\n                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                  <Play className=\"w-3 h-3 text-black fill-current\" />\n                </div>\n                <span className=\"text-lg font-bold text-foreground\">Every1.fun</span>\n              </div>\n            </Link>\n\n            <div className=\"flex items-center gap-2\">\n              <Link href=\"/notifications\">\n                <button className={`relative w-9 h-9 rounded-full flex items-center justify-center transition-colors ${location === \"/notifications\" ? \"bg-primary/20 text-primary\" : \"hover:bg-muted/20\"}`}>\n                  <Bell className=\"w-5 h-5\" strokeWidth={2.5} />\n                  {unreadCount > 0 && (\n                    <span className=\"absolute -top-0.5 -right-0.5 min-w-[16px] h-4 px-1 bg-red-500 text-white text-[9px] font-bold rounded-full flex items-center justify-center\">\n                      {unreadCount > 9 ? '9+' : unreadCount}\n                    </span>\n                  )}\n                </button>\n              </Link>\n              <WalletConnectButton />\n            </div>\n          </header>\n\n          {/* Mobile Main Content */}\n          <main className=\"flex-1 overflow-y-auto pb-16\">\n            {children}\n          </main>\n\n          {/* Mobile Footer Navigation */}\n          <footer className=\"fixed bottom-0 left-0 right-0 bg-background/95 backdrop-blur-md border-t border-border z-40\">\n            <div className=\"flex items-center justify-around py-2\">\n              {mobileNavItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.href;\n\n                // Determine badge count based on badge type\n                let totalCount = 0;\n                let newCount = 0;\n                if (item.showBadge) {\n                  if (item.badgeType === 'coins') {\n                    totalCount = totalCoinsCount;\n                    newCount = newCoinsCount;\n                  } else if (item.badgeType === 'creators') {\n                    totalCount = totalCreatorsCount;\n                    newCount = newCreatorsCount;\n                  }\n                }\n                const showBadge = item.showBadge && totalCount > 0;\n\n                return (\n                  <div\n                    key={item.href}\n                    className={`flex flex-col items-center justify-center p-2 transition-colors ${\n                      isActive\n                        ? \"text-primary\"\n                        : \"text-muted-foreground\"\n                    }`}\n                    onClick={() => setLocation(item.href)}\n                  >\n                    <div className=\"relative flex-shrink-0\">\n                      {item.isAvatar && address ? (\n                        <img\n                          src={creatorData?.avatar || creatorData?.profileImage || createAvatar(avataaars, {\n                            seed: address,\n                            size: 20,\n                          }).toDataUri()}\n                          alt=\"Profile\"\n                          className=\"w-5 h-5 rounded-full object-cover\"\n                        />\n                      ) : (\n                        <Icon className=\"w-5 h-5\" />\n                      )}\n                      {showBadge && (\n                        <span className=\"absolute -top-1.5 -right-1.5 min-w-[16px] h-4 px-1 bg-red-500 text-white text-[8px] font-bold rounded-full flex items-center justify-center\">\n                          {totalCount > 99 ? '99+' : totalCount}\n                        </span>\n                      )}\n                    </div>\n                    <span className=\"text-[10px] font-medium mt-1\">{item.label}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex h-screen\">\n        {/* Desktop Sidebar */}\n        <div className={`transition-all duration-300 ${\n          sidebarCollapsed ? \"w-20\" : \"w-64\"\n        }`}>\n          <SidebarContent />\n        </div>\n\n        {/* Desktop Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Desktop Top Navigation Bar */}\n          <header className=\"flex items-center justify-between p-4 bg-background/95 backdrop-blur-md border-b border-border\">\n            <div className=\"flex items-center gap-3 flex-1 max-w-2xl\">\n              {/* Search Bar */}\n              <form onSubmit={handleSearch} className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search channels, coins...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 bg-muted/20 border-border text-foreground placeholder:text-muted-foreground\"\n                />\n              </form>\n\n              {/* Compact Stats */}\n              <HeaderStats />\n\n              {/* Create Button */}\n              <Link href=\"/create\">\n                <Button className=\"flex items-center gap-1.5 bg-primary text-black hover:bg-primary/90 font-semibold rounded-full whitespace-nowrap px-3 h-8 text-sm\">\n                  <Plus className=\"w-3.5 h-3.5\" />\n                  Create\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <Link href=\"/notifications\">\n                <button\n                  className=\"relative w-9 h-9 rounded-full flex items-center justify-center transition-colors hover:bg-muted/20\"\n                  aria-label=\"Notifications\"\n                >\n                  <Bell className=\"w-5 h-5\" strokeWidth={2.5} />\n                  {isConnected && unreadCount > 0 && (\n                    <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\" />\n                  )}\n                </button>\n              </Link>\n              {isConnected && address && (\n                <>\n                  <Link href=\"/profile\">\n                    <button\n                      className=\"w-9 h-9 rounded-full hover:opacity-80 transition-opacity\"\n                      data-testid=\"button-profile\"\n                      title=\"My Profile\"\n                    >\n                      <img\n                        src={creatorData?.avatar || creatorData?.profileImage || createAvatar(avataaars, {\n                          seed: address,\n                          size: 36,\n                        }).toDataUri()}\n                        alt=\"Profile\"\n                        className=\"w-9 h-9 rounded-full object-cover\"\n                      />\n                    </button>\n                  </Link>\n                </>\n              )}\n              <Button\n                onClick={toggleTheme}\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-9 h-9 text-foreground\"\n                data-testid=\"button-toggle-theme\"\n              >\n                {theme === \"dark\" ? (\n                  <Sun className=\"w-4 h-4\" />\n                ) : (\n                  <Moon className=\"w-4 h-4\" />\n                )}\n              </Button>\n              <button\n                onClick={() => {\n                  localStorage.removeItem(\"hasSeenProductTour\");\n                  window.location.reload();\n                }}\n                className=\"w-9 h-9 rounded-lg hover:bg-muted/20 transition-colors text-muted-foreground hover:text-foreground flex items-center justify-center\"\n                title=\"View product tour\"\n              >\n                <HelpCircle className=\"w-5 h-5\" />\n              </button>\n              <WalletConnectButton />\n            </div>\n          </header>\n\n          {/* Desktop Page Content */}\n          <main className=\"flex-1 overflow-y-auto\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":25120},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/leaderboard.tsx":{"content":"\nimport Layout from \"@/components/layout\";\n\nexport default function Leaderboard() {\n  return (\n    <Layout>\n      <div className=\"flex items-center justify-center min-h-[60vh] p-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-white mb-2\">Coming Soon</h2>\n          <p className=\"text-muted-foreground\">\n            This feature is under development\n          </p>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":456},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Loader2, DollarSign, TrendingUp, Users, Coins, Activity, Zap, BarChart3, Clock, Settings, Wallet, ExternalLink } from \"lucide-react\";\nimport Layout from \"@/components/layout\";\nimport { PoolConfigDebugger } from \"@/components/pool-config-debugger\";\nimport type { Reward, Coin } from \"@shared/schema\";\nimport { getCoin } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\n\nconst PLATFORM_FEE_ADDRESS = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\";\nconst BASE_CHAIN_ID = 8453;\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const [result, setResult] = useState<any>(null);\n  const [totalVolume24h, setTotalVolume24h] = useState<number>(0);\n  const [totalMarketCap, setTotalMarketCap] = useState<number>(0);\n  const [totalHolders, setTotalHolders] = useState<number>(0);\n  const [isLoadingStats, setIsLoadingStats] = useState(false);\n\n  const migrateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/migrate\", {});\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n      toast({\n        title: \"Migration complete!\",\n        description: `Migrated ${data.count} out of ${data.total} coins`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/coins\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Migration failed\",\n        description: error.message,\n        variant: \"error\",\n      });\n    },\n  });\n\n  const { data: rewards = [], isLoading: isLoadingRewards } = useQuery<Reward[]>({\n    queryKey: [\"/api/rewards\"],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const { data: coins = [], isLoading: isLoadingCoins } = useQuery<Coin[]>({\n    queryKey: [\"/api/coins\"],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const { data: activityTrackerStats, isLoading: isLoadingTrackerStats } = useQuery<{\n    totalInDb: number;\n    recordedInDb: number;\n    pendingRecording: number;\n  }>({\n    queryKey: [\"/api/activity-tracker/stats\"],\n    refetchInterval: 10000,\n  });\n\n  const syncActivityTrackerMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/activity-tracker/sync\", {});\n      return res.json();\n    },\n    onSuccess: (data) => {\n      const hasFailures = data.failed > 0;\n      const description = hasFailures \n        ? `Recorded: ${data.recorded}, Already on-chain: ${data.alreadyRegistered}, Failed: ${data.failed}. Check console for details.`\n        : `Successfully recorded ${data.recorded} coins on-chain, ${data.alreadyRegistered} already registered`;\n      \n      toast({\n        title: hasFailures ? \"Sync Completed with Errors\" : \"Activity Tracker Synced!\",\n        description,\n        variant: hasFailures ? \"destructive\" : \"default\",\n      });\n      \n      if (hasFailures && data.failedCoins) {\n        console.error('Failed coins:', data.failedCoins);\n        console.error('Troubleshooting tips:', data.troubleshooting);\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-tracker/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/coins\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Sync failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const [actualZoraBalance, setActualZoraBalance] = useState<string>(\"0\");\n\n  // Fetch actual ZORA token balance from blockchain\n  useEffect(() => {\n    async function fetchZoraBalance() {\n      try {\n        const { createPublicClient, http } = await import('viem');\n        const { base } = await import('viem/chains');\n\n        const publicClient = createPublicClient({\n          chain: base,\n          transport: http()\n        });\n\n        const ADMIN_ADDRESS = \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\";\n        const ZORA_TOKEN_ADDRESS = \"0x1111111111166b7fe7bd91427724b487980afc69\"; // ZORA token on Base\n\n        // ERC20 balanceOf ABI\n        const balance = await publicClient.readContract({\n          address: ZORA_TOKEN_ADDRESS as `0x${string}`,\n          abi: [{\n            name: 'balanceOf',\n            type: 'function',\n            stateMutability: 'view',\n            inputs: [{ name: 'account', type: 'address' }],\n            outputs: [{ name: 'balance', type: 'uint256' }]\n          }],\n          functionName: 'balanceOf',\n          args: [ADMIN_ADDRESS as `0x${string}`]\n        });\n\n        const balanceInZora = Number(balance) / 1e18;\n        setActualZoraBalance(balanceInZora.toFixed(4));\n\n        console.log('✅ Actual ZORA balance from blockchain:', balanceInZora.toFixed(4));\n      } catch (error) {\n        console.error('Failed to fetch ZORA balance:', error);\n      }\n    }\n\n    fetchZoraBalance();\n    const interval = setInterval(fetchZoraBalance, 30000); // Refresh every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    if (!coins.length || isLoadingCoins) {\n      setTotalVolume24h(0);\n      setTotalMarketCap(0);\n      setTotalHolders(0);\n      return;\n    }\n\n    let isMounted = true;\n    setIsLoadingStats(true);\n\n    async function fetchAllCoinStats() {\n      try {\n        let volume = 0;\n        let marketCap = 0;\n        let holders = 0;\n\n        const activeCoins = coins.filter(c => c.address && c.status === 'active');\n\n        for (const coin of activeCoins) {\n          try {\n            const coinData = await getCoin({\n              address: coin.address as `0x${string}`,\n              chain: base.id,\n            });\n\n            const tokenData = coinData.data?.zora20Token;\n\n            if (tokenData) {\n              // Use volume24h directly from Zora SDK - this is the accurate 24h trading volume\n              if (tokenData.volume24h !== null && tokenData.volume24h !== undefined) {\n                const volValue = typeof tokenData.volume24h === 'string'\n                  ? parseFloat(tokenData.volume24h)\n                  : tokenData.volume24h;\n                if (!isNaN(volValue) && volValue >= 0) {\n                  volume += volValue;\n                }\n              }\n\n              if (tokenData.marketCap !== null && tokenData.marketCap !== undefined) {\n                const mcValue = typeof tokenData.marketCap === 'string'\n                  ? parseFloat(tokenData.marketCap)\n                  : tokenData.marketCap;\n                marketCap += mcValue;\n              }\n\n              if (tokenData.uniqueHolders !== undefined) {\n                holders += Number(tokenData.uniqueHolders);\n              }\n            }\n          } catch (err) {\n            console.error(`Error fetching stats for ${coin.address}:`, err);\n          }\n        }\n\n        if (isMounted) {\n          setTotalVolume24h(volume);\n          setTotalMarketCap(marketCap);\n          setTotalHolders(holders);\n          setIsLoadingStats(false);\n        }\n      } catch (error) {\n        console.error('Error fetching platform stats:', error);\n        if (isMounted) {\n          setIsLoadingStats(false);\n        }\n      }\n    }\n\n    fetchAllCoinStats();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [coins, isLoadingCoins]);\n\n  const platformRewards = rewards.filter(r => r.type === 'platform');\n  const tradeRewards = rewards.filter(r => r.type === 'trade');\n\n  const totalPlatformFees = platformRewards.reduce((sum, r) => {\n    // Skip rewards with missing or invalid amounts\n    if (!r.rewardAmount || r.rewardAmount === 'null' || r.rewardAmount === 'undefined') {\n      return sum;\n    }\n    const amount = parseFloat(r.rewardAmount);\n    if (isNaN(amount) || amount <= 0) {\n      return sum;\n    }\n    const amountInZora = amount / 1e18;\n    return sum + amountInZora;\n  }, 0);\n\n  const totalTradeFees = tradeRewards.reduce((sum, r) => {\n    // Skip rewards with missing or invalid amounts\n    if (!r.rewardAmount || r.rewardAmount === 'null' || r.rewardAmount === 'undefined') {\n      return sum;\n    }\n    const amount = parseFloat(r.rewardAmount);\n    if (isNaN(amount) || amount <= 0) {\n      return sum;\n    }\n    const amountInZora = amount / 1e18;\n    return sum + amountInZora;\n  }, 0);\n\n  const creatorRewards = rewards.filter(r => r.type === 'creator' || r.coinAddress);\n  const totalCreatorFees = creatorRewards.reduce((sum, r) => {\n    if (!r.rewardAmount || r.rewardAmount === 'null' || r.rewardAmount === 'undefined') return sum;\n    const amount = parseFloat(r.rewardAmount);\n    return sum + (isNaN(amount) || amount <= 0 ? 0 : amount / 1e18);\n  }, 0);\n\n  const today = new Date();\n  const todayRewards = rewards.filter(r => {\n    const rewardDate = new Date(r.createdAt);\n    return rewardDate.toDateString() === today.toDateString();\n  });\n\n  const todayPlatformFees = todayRewards\n    .filter(r => r.type === 'platform')\n    .reduce((sum, r) => {\n      if (!r.rewardAmount || r.rewardAmount === 'null' || r.rewardAmount === 'undefined') return sum;\n      const amount = parseFloat(r.rewardAmount);\n      return sum + (isNaN(amount) || amount <= 0 ? 0 : amount / 1e18);\n    }, 0);\n\n  const todayTradeFees = todayRewards\n    .filter(r => r.type === 'trade')\n    .reduce((sum, r) => {\n      if (!r.rewardAmount || r.rewardAmount === 'null' || r.rewardAmount === 'undefined') return sum;\n      const amount = parseFloat(r.rewardAmount);\n      return sum + (isNaN(amount) || amount <= 0 ? 0 : amount / 1e18);\n    }, 0);\n\n  const recentRewards = [...rewards]\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5);\n\n  const activeCoins = coins.filter(c => c.status === 'active').length;\n  const pendingCoins = coins.filter(c => c.status === 'pending').length;\n  const failedCoins = coins.filter(c => c.status === 'failed').length;\n\n  const totalEarnings = totalPlatformFees + totalTradeFees;\n  const avgEarningsPerCoin = activeCoins > 0 ? totalEarnings / activeCoins : 0;\n\n  return (\n    <Layout>\n      <div className=\"p-3 sm:p-4 md:p-6 max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-4 sm:mb-6\">\n          <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-black text-white\">Admin Dashboard</h1>\n          <div className=\"flex items-center gap-1 sm:gap-2 text-xs text-green-500\">\n            <span className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-green-500 rounded-full animate-pulse\"></span>\n            <span className=\"hidden sm:inline\">Live</span>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-6\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Overview</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"earnings\" className=\"flex items-center gap-2\">\n              <Wallet className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Earnings</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" className=\"flex items-center gap-2\">\n              <Activity className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Activity</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"tools\" className=\"flex items-center gap-2\">\n              <Settings className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Tools</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            {/* Platform Configuration Section */}\n            <Card className=\"bg-gradient-to-br from-indigo-500/10 to-indigo-600/5 border-indigo-500/20\">\n              <CardHeader className=\"p-3 sm:p-4\">\n                <CardTitle className=\"text-sm sm:text-base flex items-center gap-2\">\n                  <Settings className=\"w-4 h-4 sm:w-5 sm:h-5 text-indigo-500\" />\n                  Platform Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-3 sm:p-4 pt-0\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs text-muted-foreground\">Platform Fee Address (20%)</div>\n                    <div className=\"flex items-center gap-2 p-2 bg-muted/30 rounded-lg\">\n                      <code className=\"text-xs font-mono text-white flex-1 truncate\">\n                        {PLATFORM_FEE_ADDRESS}\n                      </code>\n                      <a\n                        href={`https://basescan.org/address/${PLATFORM_FEE_ADDRESS}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-500 hover:text-blue-400 transition-colors\"\n                        title=\"View on BaseScan\"\n                      >\n                        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                          <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z\"/>\n                        </svg>\n                      </a>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs text-muted-foreground\">Trade Fee Address (4%)</div>\n                    <div className=\"flex items-center gap-2 p-2 bg-muted/30 rounded-lg\">\n                      <code className=\"text-xs font-mono text-white flex-1 truncate\">\n                        {PLATFORM_FEE_ADDRESS}\n                      </code>\n                      <a\n                        href={`https://basescan.org/address/${PLATFORM_FEE_ADDRESS}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-500 hover:text-blue-400 transition-colors\"\n                        title=\"View on BaseScan\"\n                      >\n                        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                          <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z\"/>\n                        </svg>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Primary Stats Grid */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3\">\n              <Card className=\"bg-gradient-to-br from-blue-500/10 to-blue-600/5 border-blue-500/20\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <DollarSign className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-500\" />\n                    <div className=\"text-right\">\n                      <div className=\"text-lg sm:text-2xl font-bold text-white\">\n                        {isLoadingStats || isLoadingCoins ? '...' : `$${(totalMarketCap / 1000).toFixed(1)}k`}\n                      </div>\n                      <p className=\"text-[10px] sm:text-xs text-muted-foreground\">Market Cap</p>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-green-500/10 to-green-600/5 border-green-500/20\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Activity className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-500\" />\n                    <div className=\"text-right\">\n                      <div className=\"text-lg sm:text-2xl font-bold text-white\">\n                        {isLoadingStats || isLoadingCoins ? '...' : `$${totalVolume24h.toFixed(0)}`}\n                      </div>\n                      <p className=\"text-[10px] sm:text-xs text-muted-foreground\">24h Volume</p>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-purple-500/10 to-purple-600/5 border-purple-500/20\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-500\" />\n                    <div className=\"text-right\">\n                      <div className=\"text-lg sm:text-2xl font-bold text-white\">\n                        {isLoadingStats || isLoadingCoins ? '...' : totalHolders}\n                      </div>\n                      <p className=\"text-[10px] sm:text-xs text-muted-foreground\">Holders</p>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-yellow-500/10 to-yellow-600/5 border-yellow-500/20\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Coins className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-500\" />\n                    <div className=\"text-right\">\n                      <div className=\"text-lg sm:text-2xl font-bold text-white\">\n                        {isLoadingCoins ? '...' : coins.length}\n                      </div>\n                      <p className=\"text-[10px] sm:text-xs text-muted-foreground\">Total Coins</p>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            </div>\n\n            {/* Secondary Stats Grid */}\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2\">\n              <Card className=\"bg-muted/20\">\n                <CardContent className=\"p-2 sm:p-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-bold text-green-500\">{activeCoins}</div>\n                    <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Active</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/20\">\n                <CardContent className=\"p-2 sm:p-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-bold text-yellow-500\">{pendingCoins}</div>\n                    <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Pending</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/20\">\n                <CardContent className=\"p-2 sm:p-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-bold text-red-500\">{failedCoins}</div>\n                    <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Failed</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/20\">\n                <CardContent className=\"p-2 sm:p-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-bold text-white\">{totalEarnings.toFixed(4)}</div>\n                    <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Total ZORA</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/20\">\n                <CardContent className=\"p-2 sm:p-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-bold text-white\">{(todayPlatformFees + todayTradeFees).toFixed(4)}</div>\n                    <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Today</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/20\">\n                <CardContent className=\"p-2 sm:p-3\">\n                  <div className=\"text-center\">\n                    <div className=\"text-base sm:text-lg font-bold text-white\">{avgEarningsPerCoin.toFixed(4)}</div>\n                    <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Avg/Coin</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Deployed Coins with Links */}\n            <Card>\n              <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                <CardTitle className=\"text-sm sm:text-base\">Active Coins On-Chain</CardTitle>\n                <CardDescription className=\"text-xs\">View coins on BaseScan and GeckoTerminal</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-3 sm:p-4 pt-0\">\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  {coins\n                    .filter(c => c.address && c.status === 'active')\n                    .map((coin) => (\n                      <div key={coin.id} className=\"flex items-center justify-between p-2 bg-muted/10 rounded-lg text-xs\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"font-medium text-white truncate\">{coin.name} ({coin.symbol})</div>\n                          <div className=\"text-[9px] sm:text-[10px] text-muted-foreground font-mono\">\n                            {coin.address?.slice(0, 10)}...{coin.address?.slice(-8)}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1 ml-2\">\n                          <a\n                            href={`https://basescan.org/address/${coin.address}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"p-1.5 bg-blue-500/20 hover:bg-blue-500/30 rounded transition-colors\"\n                            title=\"View on BaseScan\"\n                          >\n                            <svg className=\"w-3 h-3 text-blue-500\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                              <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z\"/>\n                            </svg>\n                          </a>\n                          <a\n                            href={`https://www.geckoterminal.com/base/pools/${coin.address}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"p-1.5 bg-green-500/20 hover:bg-green-500/30 rounded transition-colors\"\n                            title=\"View on GeckoTerminal\"\n                          >\n                            <svg className=\"w-3 h-3 text-green-500\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                              <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n                            </svg>\n                          </a>\n                          <a\n                            href={`https://dexscreener.com/base/${coin.address}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"p-1.5 bg-purple-500/20 hover:bg-purple-500/30 rounded transition-colors\"\n                            title=\"View on DexScreener\"\n                          >\n                            <svg className=\"w-3 h-3 text-purple-500\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                              <path d=\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"/>\n                            </svg>\n                          </a>\n                        </div>\n                      </div>\n                    ))}\n                  {coins.filter(c => c.address && c.status === 'active').length === 0 && (\n                    <p className=\"text-center text-muted-foreground text-xs py-4\">No active coins deployed yet</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Earnings Tab */}\n          <TabsContent value=\"earnings\" className=\"space-y-4\">\n            {/* Developer Earnings Breakdown */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3\">\n              <Card className=\"bg-gradient-to-br from-green-500/10 to-green-600/5 border-green-500/20\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <CardTitle className=\"text-xs sm:text-sm font-medium text-muted-foreground\">Actual Balance</CardTitle>\n                    <Coins className=\"w-3 h-3 sm:w-4 sm:h-4 text-green-500\" />\n                  </div>\n                  <div className=\"text-xl sm:text-2xl font-bold text-white\">{actualZoraBalance}</div>\n                  <p className=\"text-[9px] sm:text-[10px] text-green-500\">From blockchain ✓</p>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-primary/10 to-primary/5\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <CardTitle className=\"text-xs sm:text-sm font-medium text-muted-foreground\">Platform (20%)</CardTitle>\n                    <Zap className=\"w-3 h-3 sm:w-4 sm:h-4 text-primary\" />\n                  </div>\n                  <div className=\"text-xl sm:text-2xl font-bold text-white\">{totalPlatformFees.toFixed(4)}</div>\n                  <p className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Tracked in DB</p>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-purple-500/10 to-purple-600/5\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <CardTitle className=\"text-xs sm:text-sm font-medium text-muted-foreground\">Trade (4%)</CardTitle>\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-purple-500\" />\n                  </div>\n                  <div className=\"text-xl sm:text-2xl font-bold text-white\">{totalTradeFees.toFixed(4)}</div>\n                  <p className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Tracked in DB</p>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-blue-500/10 to-blue-600/5\">\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <CardTitle className=\"text-xs sm:text-sm font-medium text-muted-foreground\">DB Records</CardTitle>\n                    <BarChart3 className=\"w-3 h-3 sm:w-4 sm:h-4 text-blue-500\" />\n                  </div>\n                  <div className=\"text-xl sm:text-2xl font-bold text-white\">{rewards.length}</div>\n                  <p className=\"text-[9px] sm:text-[10px] text-muted-foreground\">Total transactions</p>\n                </CardHeader>\n              </Card>\n            </div>\n\n            {/* Per-Coin Earnings with Transactions */}\n            {coins.filter(c => c.address && c.status === 'active').length > 0 && (\n              <Card>\n                <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                  <CardTitle className=\"text-sm sm:text-base\">Earnings by Coin</CardTitle>\n                  <CardDescription className=\"text-xs\">Transaction-level fee tracking</CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-3 sm:p-4 pt-0\">\n                  <div className=\"space-y-1.5 max-h-96 overflow-y-auto\">\n                    {coins\n                      .filter(c => c.address && c.status === 'active')\n                      .map((coin) => {\n                        const coinRewards = rewards.filter(r => \n                          r.coinAddress?.toLowerCase() === coin.address?.toLowerCase()\n                        );\n\n                        const platformFees = coinRewards\n                          .filter(r => r.type === 'platform')\n                          .reduce((sum, r) => sum + parseFloat(r.rewardAmount) / 1e18, 0);\n\n                        const tradeFees = coinRewards\n                          .filter(r => r.type === 'trade')\n                          .reduce((sum, r) => sum + parseFloat(r.rewardAmount) / 1e18, 0);\n\n                        const totalEarnings = platformFees + tradeFees;\n\n                        if (totalEarnings === 0) return null;\n\n                        return (\n                          <div key={coin.id} className=\"space-y-1\">\n                            <div className=\"flex items-center justify-between p-2 bg-muted/10 rounded-lg text-xs\">\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"font-medium text-white truncate\">{coin.symbol}</div>\n                                <div className=\"text-[9px] sm:text-[10px] text-muted-foreground font-mono\">\n                                  {coin.address?.slice(0, 6)}...{coin.address?.slice(-4)}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2 sm:gap-3 ml-2\">\n                                <div className=\"text-center\">\n                                  <div className=\"text-xs sm:text-sm font-bold text-primary\">{platformFees.toFixed(4)}</div>\n                                  <div className=\"text-[8px] sm:text-[9px] text-muted-foreground\">20%</div>\n                                </div>\n                                <div className=\"text-center\">\n                                  <div className=\"text-xs sm:text-sm font-bold text-purple-500\">{tradeFees.toFixed(4)}</div>\n                                  <div className=\"text-[8px] sm:text-[9px] text-muted-foreground\">4%</div>\n                                </div>\n                                <div className=\"text-center\">\n                                  <div className=\"text-xs sm:text-sm font-bold text-green-500\">{totalEarnings.toFixed(4)}</div>\n                                  <div className=\"text-[8px] sm:text-[9px] text-muted-foreground\">Total</div>\n                                </div>\n                              </div>\n                            </div>\n                            {/* Recent transactions for this coin */}\n                            <div className=\"pl-4 space-y-1\">\n                              {coinRewards.slice(0, 3).map((reward) => (\n                                <div key={reward.id} className=\"flex items-center gap-2 text-[10px] text-muted-foreground\">\n                                  <span className={`px-1.5 py-0.5 rounded ${\n                                    reward.type === 'platform' ? 'bg-primary/20 text-primary' : 'bg-purple-500/20 text-purple-500'\n                                  }`}>\n                                    {reward.type === 'platform' ? '20%' : '4%'}\n                                  </span>\n                                  <span className=\"flex-1 truncate\">\n                                    {(parseFloat(reward.rewardAmount) / 1e18).toFixed(6)} ZORA\n                                  </span>\n                                  <a\n                                    href={`https://basescan.org/tx/${reward.transactionHash}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    className=\"text-blue-500 hover:text-blue-400\"\n                                    title=\"View transaction\"\n                                  >\n                                    <svg className=\"w-3 h-3\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                                      <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z\"/>\n                                    </svg>\n                                  </a>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        );\n                      })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\" className=\"space-y-4\">\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader className=\"p-3 sm:p-4 pb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                  <CardTitle className=\"text-sm sm:text-base\">Recent Activity</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-3 sm:p-4 pt-0\">\n                {isLoadingRewards ? (\n                  <div className=\"flex items-center justify-center py-4\">\n                    <Loader2 className=\"w-5 h-5 animate-spin text-muted-foreground\" />\n                  </div>\n                ) : recentRewards.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground text-xs py-4\">No activity yet</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {recentRewards.map((reward) => (\n                      <div key={reward.id} className=\"flex items-center justify-between p-2 bg-muted/10 rounded-lg text-xs sm:text-sm\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-1 sm:gap-2 mb-0.5\">\n                            <span className={`px-1.5 py-0.5 rounded text-[9px] sm:text-[10px] font-medium ${\n                              reward.type === 'platform' \n                                ? 'bg-primary/20 text-primary' \n                                : 'bg-purple-500/20 text-purple-500'\n                            }`}>\n                              {reward.type === 'platform' ? '20%' : '4%'}\n                            </span>\n                            <span className=\"font-mono text-[10px] sm:text-xs text-muted-foreground truncate\">{reward.coinSymbol}</span>\n                            <a\n                              href={`https://basescan.org/tx/${reward.transactionHash}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-blue-500 hover:text-blue-400 transition-colors\"\n                              title=\"View transaction on BaseScan\"\n                            >\n                              <svg className=\"w-3 h-3\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                                <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z\"/>\n                              </svg>\n                            </a>\n                          </div>\n                          <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">\n                            {new Date(reward.createdAt).toLocaleString()}\n                          </div>\n                        </div>\n                        <div className=\"text-right ml-2\">\n                          <div className=\"text-xs sm:text-sm font-bold text-white\">\n                            {(parseFloat(reward.rewardAmount) / 1e18).toFixed(6)}\n                          </div>\n                          <div className=\"text-[9px] sm:text-[10px] text-muted-foreground\">ZORA</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Activity Tracker Section */}\n            <Card className=\"bg-gradient-to-br from-orange-500/10 to-orange-600/5 border-orange-500/20\">\n              <CardHeader className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-sm sm:text-base flex items-center gap-2\">\n                      <Activity className=\"w-4 h-4 sm:w-5 sm:h-5 text-orange-500\" />\n                      On-Chain Activity Tracker\n                    </CardTitle>\n                    <CardDescription className=\"text-xs mt-1\">\n                      Batch record coin creations to blockchain for grant verification\n                    </CardDescription>\n                  </div>\n                  <Button\n                    onClick={() => syncActivityTrackerMutation.mutate()}\n                    disabled={syncActivityTrackerMutation.isPending || (activityTrackerStats?.pendingRecording === 0)}\n                    className=\"bg-orange-500 hover:bg-orange-600 text-white\"\n                    data-testid=\"button-sync-activity-tracker\"\n                  >\n                    {syncActivityTrackerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                        Syncing...\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"w-4 h-4 mr-2\" />\n                        Sync Now\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-3 sm:p-4 pt-0\">\n                <div className=\"grid grid-cols-3 gap-3\">\n                  <div className=\"bg-muted/20 rounded-lg p-3 text-center\">\n                    <div className=\"text-2xl font-bold text-white\" data-testid=\"text-total-coins\">\n                      {isLoadingTrackerStats ? '...' : activityTrackerStats?.totalInDb || 0}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">Total Coins</div>\n                  </div>\n                  <div className=\"bg-green-500/10 rounded-lg p-3 text-center border border-green-500/20\">\n                    <div className=\"text-2xl font-bold text-green-500\" data-testid=\"text-recorded-coins\">\n                      {isLoadingTrackerStats ? '...' : activityTrackerStats?.recordedInDb || 0}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">Recorded On-Chain</div>\n                  </div>\n                  <div className=\"bg-orange-500/10 rounded-lg p-3 text-center border border-orange-500/20\">\n                    <div className=\"text-2xl font-bold text-orange-500\" data-testid=\"text-pending-coins\">\n                      {isLoadingTrackerStats ? '...' : activityTrackerStats?.pendingRecording || 0}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">Pending Recording</div>\n                  </div>\n                </div>\n                <div className=\"mt-3 p-3 bg-muted/10 rounded-lg\">\n                  <div className=\"flex items-start gap-2\">\n                    <Clock className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-xs font-medium text-white mb-1\">Automated Sync Schedule</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Automatic batch recording runs every hour to keep all coins synced on-chain\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tools Tab */}\n          <TabsContent value=\"tools\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4\">\n              <Card>\n                <CardHeader className=\"p-3 sm:p-4\">\n                  <CardTitle className=\"text-sm sm:text-base\">Check Coin Earnings</CardTitle>\n                  <CardDescription className=\"text-xs\">Verify platform referral status</CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-3 sm:p-4 pt-0\">\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"0x...\"\n                      className=\"w-full p-2 bg-muted rounded-lg text-white text-xs sm:text-sm font-mono\"\n                      id=\"coin-address-input\"\n                    />\n                    <Button\n                      onClick={async () => {\n                        const input = document.getElementById('coin-address-input') as HTMLInputElement;\n                        const address = input?.value.trim();\n\n                        if (!address || !address.startsWith('0x')) {\n                          toast({\n                            title: \"Invalid address\",\n                            description: \"Please enter a valid coin address\",\n                            variant: \"error\"\n                          });\n                          return;\n                        }\n\n                        try {\n                          const res = await fetch(`/api/rewards/coin/${address}/status`);\n                          const data = await res.json();\n\n                          if (!res.ok) {\n                            throw new Error(data.error || 'Failed to fetch coin status');\n                          }\n\n                          const resultDiv = document.getElementById('coin-earnings-result');\n                          if (resultDiv) {\n                            resultDiv.innerHTML = `\n                              <div class=\"p-3 bg-muted rounded-lg space-y-2 text-xs sm:text-sm\">\n                                <div class=\"flex items-center justify-between\">\n                                  <h3 class=\"font-bold text-white\">${data.coinSymbol}</h3>\n                                  <span class=\"text-[9px] sm:text-[10px] px-2 py-1 rounded ${data.hasPlatformReferral ? 'bg-green-500/20 text-green-500' : 'bg-red-500/20 text-red-500'}\">\n                                    ${data.hasPlatformReferral ? '✓ Set' : '✗ Not Set'}\n                                  </span>\n                                </div>\n                                <div class=\"grid grid-cols-3 gap-2 pt-2 border-t border-muted/20\">\n                                  <div class=\"text-center\">\n                                    <div class=\"text-sm sm:text-base font-bold text-green-500\">${data.earnings.total.toFixed(6)}</div>\n                                    <div class=\"text-[9px] sm:text-[10px] text-muted-foreground\">Total</div>\n                                  </div>\n                                  <div class=\"text-center\">\n                                    <div class=\"text-sm sm:text-base font-bold text-primary\">${data.earnings.platform.toFixed(6)}</div>\n                                    <div class=\"text-[9px] sm:text-[10px] text-muted-foreground\">Platform</div>\n                                  </div>\n                                  <div class=\"text-center\">\n                                    <div class=\"text-sm sm:text-base font-bold text-purple-500\">${data.earnings.trade.toFixed(6)}</div>\n                                    <div class=\"text-[9px] sm:text-[10px] text-muted-foreground\">Trade</div>\n                                  </div>\n                                </div>\n                              </div>\n                            `;\n                          }\n\n                          toast({\n                            title: \"Coin checked\",\n                            description: `${data.coinSymbol}: ${data.hasPlatformReferral ? 'Platform referral is set ✓' : 'No platform referral ✗'}`\n                          });\n                        } catch (error: any) {\n                          toast({\n                            title: \"Check failed\",\n                            description: error.message,\n                            variant: \"error\"\n                          });\n                        }\n                      }}\n                      className=\"spotify-button w-full text-xs sm:text-sm\"\n                    >\n                      Check Earnings\n                    </Button>\n                    <div id=\"coin-earnings-result\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <PoolConfigDebugger />\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":44793},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { PrivyProvider, usePrivy } from \"@privy-io/react-auth\";\nimport { WagmiProvider } from \"wagmi\";\nimport { config } from \"./lib/wagmi\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ProductTour from \"@/components/product-tour\";\nimport DailyPointsModal from \"@/components/daily-points-modal\";\nimport Home from \"@/pages/home\";\nimport Create from \"@/pages/create\";\nimport Channels from \"@/pages/channels\";\nimport Creators from \"@/pages/creators\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport FAQ from \"@/pages/faq\";\nimport Rewards from \"./pages/rewards\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport Search from \"@/pages/search\";\nimport Profile from \"@/pages/profile\";\nimport Notifications from \"@/pages/notifications\";\nimport Settings from \"@/pages/settings\";\nimport Referrals from \"@/pages/referrals\";\nimport Docs from \"@/pages/docs\";\nimport AdminMetrics from \"@/pages/AdminMetrics\";\nimport PublicProfile from \"@/pages/public-profile\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect, useState } from \"react\";\n\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/search\" component={Search} />\n      <Route path=\"/notifications\" component={Notifications} />\n      <Route path=\"/channels\" component={Channels} />\n      <Route path=\"/create\" component={Create} />\n      <Route path=\"/creators\" component={Creators} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/referrals\" component={Referrals} />\n      <Route path=\"/rewards\" component={Rewards} />\n      <Route path=\"/faq\" component={FAQ} />\n      <Route path=\"/docs\" component={Docs} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/admin/metrics\" component={AdminMetrics} />\n      <Route path=\"/@:username\" component={PublicProfile} />\n      <Route path=\"/:identifier\" component={PublicProfile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { user, authenticated } = usePrivy();\n  const { toast } = useToast();\n  const [pendingReferral, setPendingReferral] = useState<string | null>(null);\n\n  const checkInMutation = useMutation({\n    mutationFn: async (address: string) => {\n      const response = await fetch('/api/login-streak/check-in', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ address }),\n      });\n      if (!response.ok) throw new Error('Check-in failed');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.pointsEarned > 0) {\n        toast({\n          title: data.isFirstLogin ? '🎉 Welcome Bonus!' : `🔥 Day ${data.streak.currentStreak} Streak!`,\n          description: `You earned ${data.pointsEarned} points!`,\n        });\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/login-streak'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/creators'] });\n    },\n  });\n\n  const applyReferralMutation = useMutation({\n    mutationFn: async ({ referralCode, referredAddress }: { referralCode: string; referredAddress: string }) => {\n      // First, find the referrer by their code\n      const creatorsResponse = await fetch('/api/creators');\n      const creators = await creatorsResponse.json();\n      const referrer = creators.find((c: any) => \n        c.referralCode?.toLowerCase() === referralCode.toLowerCase()\n      );\n\n      if (!referrer) {\n        throw new Error('Invalid referral code');\n      }\n\n      // Apply the referral\n      const response = await fetch('/api/referrals/apply', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          referrerAddress: referrer.address,\n          referredAddress: referredAddress,\n          referralCode: referralCode,\n          pointsEarned: '100',\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to apply referral');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: '🎉 Referral Applied!',\n        description: 'Welcome! Your referrer has been credited with points.',\n      });\n      // Clear the pending referral\n      setPendingReferral(null);\n      localStorage.removeItem('pendingReferral');\n      queryClient.invalidateQueries({ queryKey: ['/api/referrals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/creators'] });\n    },\n    onError: (error: Error) => {\n      console.error('Referral application error:', error);\n      // Only show toast if it's not a \"already exists\" error\n      if (!error.message.includes('already exists')) {\n        toast({\n          title: 'Referral Error',\n          description: error.message,\n          variant: 'destructive',\n        });\n      }\n      // Clear the pending referral even on error\n      setPendingReferral(null);\n      localStorage.removeItem('pendingReferral');\n    },\n  });\n\n  // Capture referral code from URL on initial load\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const refCode = urlParams.get('ref');\n\n    if (refCode) {\n      // Store in localStorage and state for later use\n      localStorage.setItem('pendingReferral', refCode);\n      setPendingReferral(refCode);\n      console.log('Referral code captured:', refCode);\n    } else {\n      // Check if we have a pending referral from previous visit\n      const stored = localStorage.getItem('pendingReferral');\n      if (stored) {\n        setPendingReferral(stored);\n      }\n    }\n  }, []);\n\n  // Apply referral when user authenticates with Privy\n  useEffect(() => {\n    if (authenticated && user?.wallet?.address && pendingReferral) {\n      console.log('Applying referral for new user:', user.wallet.address, 'with code:', pendingReferral);\n\n      // Apply referral after a short delay to ensure user is fully set up\n      setTimeout(() => {\n        applyReferralMutation.mutate({\n          referralCode: pendingReferral,\n          referredAddress: user.wallet.address,\n        });\n      }, 1000);\n    }\n  }, [authenticated, user?.wallet?.address, pendingReferral]);\n\n  return (\n    <TooltipProvider>\n      <ProductTour />\n      <DailyPointsModal userAddress={user?.wallet?.address || ''} />\n      <Toaster />\n      <Router />\n    </TooltipProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <PrivyProvider\n      appId={import.meta.env.VITE_PRIVY_APP_ID || \"cmgmh4vtm00ysl50d198fvxik\"}\n      config={{\n        loginMethods: ['email', 'wallet', 'google', 'twitter'],\n        appearance: {\n          theme: 'dark',\n          accentColor: '#8B5CF6',\n        },\n        embeddedWallets: {\n          createOnLogin: 'users-without-wallets',\n        },\n      }}\n    >\n      <WagmiProvider config={config}>\n        <QueryClientProvider client={queryClient}>\n          <AppContent />\n        </QueryClientProvider>\n      </WagmiProvider>\n    </PrivyProvider>\n  );\n}\n\nexport default App;","size_bytes":7361},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/lib/zora-factory.ts":{"content":"import { createPublicClient, createWalletClient, http, type Address, type Hash, zeroAddress, parseUnits, encodeAbiParameters, parseAbiParameters } from \"viem\";\nimport { base, baseSepolia } from \"viem/chains\";\n\n// Zora Factory contract address (same on Base and Base Sepolia)\nconst ZORA_FACTORY_ADDRESS = \"0x777777751622c0d3258f214F9DF38E35BF45baF3\" as const;\n\n// Factory ABI - only the functions we need\nconst FACTORY_ABI = [\n  {\n    name: \"deployCreatorCoin\",\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"payoutRecipient\", type: \"address\" },\n      { name: \"owners\", type: \"address[]\" },\n      { name: \"uri\", type: \"string\" },\n      { name: \"name\", type: \"string\" },\n      { name: \"symbol\", type: \"string\" },\n      { name: \"poolConfig\", type: \"bytes\" },\n      { name: \"platformReferrer\", type: \"address\" },\n      { name: \"coinSalt\", type: \"bytes32\" }\n    ],\n    outputs: [\n      { name: \"coin\", type: \"address\" }\n    ]\n  },\n  {\n    name: \"deploy\",\n    type: \"function\",\n    stateMutability: \"payable\",\n    inputs: [\n      { name: \"payoutRecipient\", type: \"address\" },\n      { name: \"owners\", type: \"address[]\" },\n      { name: \"uri\", type: \"string\" },\n      { name: \"name\", type: \"string\" },\n      { name: \"symbol\", type: \"string\" },\n      { name: \"poolConfig\", type: \"bytes\" },\n      { name: \"platformReferrer\", type: \"address\" },\n      { name: \"postDeployHook\", type: \"address\" },\n      { name: \"postDeployHookData\", type: \"bytes\" },\n      { name: \"coinSalt\", type: \"bytes32\" }\n    ],\n    outputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"postDeployHookDataOut\", type: \"bytes\" }\n    ]\n  }\n] as const;\n\n// PoolConfiguration Struct (from Zora's contract):\n// struct PoolConfiguration {\n//   uint8 version;\n//   uint16 numPositions;\n//   uint24 fee;\n//   int24 tickSpacing;\n//   uint16[] numDiscoveryPositions;\n//   int24[] tickLower;\n//   int24[] tickUpper;\n//   uint256[] maxDiscoverySupplyShare;\n// }\n\n// ZORA Token Address\nconst ZORA_ADDRESS = \"0x1111111111166b7fe7bd91427724b487980afc69\" as const;\n\n// Activity Tracker Contract ABI - for recording on-chain platform activities\nconst ACTIVITY_TRACKER_ABI = [\n  {\n    name: \"recordCoinCreation\",\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"creator\", type: \"address\" },\n      { name: \"contentUrl\", type: \"string\" },\n      { name: \"coinName\", type: \"string\" },\n      { name: \"coinSymbol\", type: \"string\" }\n    ],\n    outputs: [\n      { name: \"activityId\", type: \"bytes32\" }\n    ]\n  }\n] as const;\n\n// Default pool configuration from Zora SDK (ZORA-paired coins)\n// Source: @zoralabs/coins-sdk/src/utils/poolConfigUtils.ts\n// These are the official default configs used by Zora for Creator Coins\n// This same configuration is used by successful coins like:\n// - balajis (0xcaf75598b8b9a6e645b60d882845d361f549f5ec)\n// - and thousands of other Creator Coins on Base\nconst COIN_ZORA_PAIR_LOWER_TICK = -138_000;\nconst COIN_ZORA_PAIR_UPPER_TICK = -81_000;\nconst COIN_ZORA_PAIR_NUM_DISCOVERY_POSITIONS = 11;\nconst COIN_ZORA_PAIR_MAX_DISCOVERY_SUPPLY_SHARE = parseUnits(\"0.05\", 18);\n\n// Encode the pool configuration for ZORA-paired Creator Coins\n// Based on successful transaction: 0x348d9a91b03a3a8e26e087b431b942dd36e989eb4e00ab8ae220f3346bc2a209\nfunction encodePoolConfig(): `0x${string}` {\n  const version = 4; // Version 4 is the current valid version (from working transactions)\n\n  return encodeAbiParameters(\n    parseAbiParameters('uint8, address, int24[], int24[], uint16[], uint256[]'),\n    [\n      version,                                         // version (uint8)\n      ZORA_ADDRESS,                                    // currency (address)\n      [COIN_ZORA_PAIR_LOWER_TICK],                    // tickLower (int24[])\n      [COIN_ZORA_PAIR_UPPER_TICK],                    // tickUpper (int24[])\n      [COIN_ZORA_PAIR_NUM_DISCOVERY_POSITIONS],       // numDiscoveryPositions (uint16[])\n      [COIN_ZORA_PAIR_MAX_DISCOVERY_SUPPLY_SHARE]     // maxDiscoverySupplyShare (uint256[])\n    ]\n  );\n}\n\n// Default pool config for ZORA-paired Creator Coins (most common type)\nconst DEFAULT_POOL_CONFIG = encodePoolConfig();\n\nexport interface DirectCoinParams {\n  name: string;\n  symbol: string;\n  metadataUri: string;\n  creatorAddress: Address;\n  platformReferrer?: Address;\n  manualPoolConfig?: `0x${string}`; // Optional: provide your own poolConfig\n  contentUrl?: string; // Optional: content URL for tracking\n  useActivityTracker?: boolean; // Optional: enable on-chain activity tracking\n}\n\nexport async function getWorkingPoolConfig(chainId: number = base.id): Promise<`0x${string}`> {\n  console.log(\"🔍 Using ZORA-paired Creator Coin poolConfig\");\n  console.log(\"📋 Config parameters:\", {\n    version: 4,\n    currency: \"ZORA Token\",\n    lowerTick: COIN_ZORA_PAIR_LOWER_TICK,\n    upperTick: COIN_ZORA_PAIR_UPPER_TICK,\n    numPositions: COIN_ZORA_PAIR_NUM_DISCOVERY_POSITIONS,\n    maxSupplyShare: \"5%\"\n  });\n\n  return DEFAULT_POOL_CONFIG;\n}\n\n// Helper function to encode activity tracker hook data\n// Note: Zora factory passes coin and creator addresses separately to postDeploy\n// Hook data only needs contentUrl, coinName, coinSymbol\nfunction encodeActivityTrackerData(\n  contentUrl: string,\n  coinName: string,\n  coinSymbol: string\n): `0x${string}` {\n  return encodeAbiParameters(\n    parseAbiParameters('string, string, string'),\n    [contentUrl, coinName, coinSymbol]\n  );\n}\n\nexport async function deployCreatorCoinDirect(\n  params: DirectCoinParams,\n  walletClient: any,\n  chainId: number = base.id\n): Promise<{ hash: Hash; address: Address; createdAt: string }> {\n\n  const chain = chainId === baseSepolia.id ? baseSepolia : base;\n  const alchemyApiKey = import.meta.env.VITE_ALCHEMY_API_KEY || \"o3VW3WRXrsXXMRX3l7jZxLUqhWyZzXBy\";\n  const rpcUrl = `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;\n\n  const publicClient = createPublicClient({\n    chain,\n    transport: http(rpcUrl),\n  });\n\n  // Get working poolConfig (use manual if provided, otherwise use empty to trigger factory defaults)\n  let poolConfig: `0x${string}`;\n\n  if (params.manualPoolConfig) {\n    console.log(\"✓ Using manually provided poolConfig:\", params.manualPoolConfig);\n    poolConfig = params.manualPoolConfig;\n  } else {\n    console.log(\"🔄 Using default poolConfig (version 4, ZORA-paired)...\");\n    poolConfig = await getWorkingPoolConfig(chainId);\n  }\n\n  console.log(\"📋 Final poolConfig to use:\", {\n    hex: poolConfig,\n    length: poolConfig.length,\n    isValid: poolConfig.startsWith('0x') && poolConfig.length > 2,\n    source: params.manualPoolConfig ? 'manual' : 'default'\n  });\n\n  // Admin platform referral (20% of fees)\n  const platformReferrer = params.platformReferrer || \n    import.meta.env.VITE_ADMIN_REFERRAL_ADDRESS || \n    \"0xf25af781c4F1Df40Ac1D06e6B80c17815AD311F7\";\n\n  console.log(\"💰 Platform referrer address:\", platformReferrer);\n\n  // Generate unique salt for deterministic deployment\n  const salt = `0x${Date.now().toString(16).padStart(64, '0')}` as `0x${string}`;\n  console.log(\"🧂 Generated salt:\", salt);\n\n  // Check if activity tracker is enabled\n  const activityTrackerAddress = import.meta.env.VITE_ACTIVITY_TRACKER_ADDRESS as Address | undefined;\n  const useTracker = params.useActivityTracker && activityTrackerAddress;\n\n  if (useTracker) {\n    console.log(\"📊 On-chain activity tracking ENABLED\");\n    console.log(\"📍 Activity tracker address:\", activityTrackerAddress);\n  }\n\n  try {\n    let hash: Hash;\n\n    if (useTracker && activityTrackerAddress) {\n      // Use deploy function with activity tracker hook\n      console.log(\"🔧 Deploying with activity tracker...\");\n\n      // Encode hook data: Zora factory will pass coin and creator to postDeploy separately\n      const hookData = encodeActivityTrackerData(\n        params.contentUrl || params.metadataUri,\n        params.name,\n        params.symbol\n      );\n\n      console.log(\"🔧 Simulating deploy with tracker hook\");\n\n      const { request } = await publicClient.simulateContract({\n        address: ZORA_FACTORY_ADDRESS,\n        abi: FACTORY_ABI,\n        functionName: \"deploy\",\n        args: [\n          params.creatorAddress, // payoutRecipient\n          [params.creatorAddress], // owners\n          params.metadataUri, // uri\n          params.name, // name\n          params.symbol, // symbol\n          poolConfig, // poolConfig\n          platformReferrer as Address, // platformReferrer\n          activityTrackerAddress, // postDeployHook\n          hookData, // postDeployHookData\n          salt // coinSalt\n        ],\n        account: params.creatorAddress,\n      });\n\n      console.log(\"✅ Contract simulation successful with tracker\");\n      hash = await walletClient.writeContract(request);\n      console.log(\"✅ Transaction sent with tracker! Hash:\", hash);\n    } else {\n      // Use standard deployCreatorCoin function\n      console.log(\"🔧 Simulating standard deployment\");\n\n      const { request } = await publicClient.simulateContract({\n        address: ZORA_FACTORY_ADDRESS,\n        abi: FACTORY_ABI,\n        functionName: \"deployCreatorCoin\",\n        args: [\n          params.creatorAddress, // payoutRecipient\n          [params.creatorAddress], // owners\n          params.metadataUri, // uri\n          params.name, // name\n          params.symbol, // symbol\n          poolConfig, // poolConfig\n          platformReferrer as Address, // platformReferrer\n          salt // coinSalt\n        ],\n        account: params.creatorAddress,\n      });\n\n      console.log(\"✅ Contract simulation successful\");\n      hash = await walletClient.writeContract(request);\n      console.log(\"✅ Transaction sent! Hash:\", hash);\n    }\n\n    // Wait for transaction\n    console.log(\"⏳ Waiting for transaction confirmation...\");\n    const receipt = await publicClient.waitForTransactionReceipt({ hash });\n    console.log(\"✅ Transaction confirmed! Receipt:\", receipt);\n\n    // Extract coin address from logs\n    const coinAddress = receipt.logs[0]?.address as Address;\n    console.log(\"🎉 Coin deployed at address:\", coinAddress);\n\n    if (useTracker) {\n      console.log(\"📊 On-chain activity recorded! Check tracker contract for details.\");\n    }\n\n    console.log(\"✅ Coin deployed successfully:\", coinAddress);\n\n    // Get the blockchain timestamp from the transaction receipt\n    const block = await publicClient.getBlock({ \n      blockNumber: receipt.blockNumber \n    });\n    const createdAt = new Date(Number(block.timestamp) * 1000).toISOString();\n\n    return {\n      hash,\n      address: coinAddress,\n      createdAt // Include the blockchain timestamp\n    };\n  } catch (error) {\n    console.error(\"❌ Contract call failed:\", error);\n    if (error instanceof Error) {\n      console.error(\"Error message:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n    }\n    throw error;\n  }\n}","size_bytes":10909},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { storage } from \"./storage\";\nimport { autoMigrateOnStartup } from \"./migrate-old-data\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initTelegramBot } from \"./telegram-bot\";\nimport { ActivityTrackerCron } from \"./activity-tracker-cron\";\nimport { base } from \"viem/chains\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Initialize Telegram bot\n  await initTelegramBot();\n\n  // Start trending notifications\n  const { startTrendingNotifications } = await import('./trending-notifications');\n  startTrendingNotifications();\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n\n  // Run automatic migration on startup\n  try {\n    await autoMigrateOnStartup();\n  } catch (error) {\n    console.error(\"Failed to run auto migration:\", error);\n  }\n\n  // Initialize and start activity tracker cron job\n  const activityTrackerCron = new ActivityTrackerCron(storage, base.id);\n  activityTrackerCron.start();\n  log(`Activity tracker cron started with schedule: ${activityTrackerCron.getSchedule()}`);\n\n  // Initialize and start notification cron jobs\n  const { notificationCron } = await import('./notification-cron');\n  notificationCron.start();\n  log(`Notification cron jobs started: ${notificationCron.getSchedules().length} jobs`);\n\n  // Start streak reminder cron service\n  const { startStreakReminderCron } = await import('./streak-reminder-cron');\n  startStreakReminderCron();\n  log(`Streak reminder cron started.`);\n\n  // Graceful shutdown\n  const shutdown = async (signal: string) => {\n    console.log(`\\n${signal} received, shutting down gracefully...`);\n    const { stopTelegramBot } = await import('./telegram-bot');\n    await stopTelegramBot();\n    activityTrackerCron.stop();\n    notificationCron.stop();\n    process.exit(0);\n  };\n\n  process.on('SIGINT', () => shutdown('SIGINT'));\n  process.on('SIGTERM', () => shutdown('SIGTERM'));\n})();","size_bytes":3665},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"REGISTRY_SETUP.md":{"content":"# Registry Setup Guide\n\n## What I Fixed\n\n✅ **Fixed Code Issues:**\n- Corrected field name mismatch: `creator` → `creator_wallet`\n- Removed references to non-existent `metadata` field\n- All TypeScript errors resolved\n\n## What You Need to Do\n\nThe Registry contract requires 2 environment variables to function:\n\n### 1. Deploy the Registry Contract (or use existing)\n\nIf you haven't deployed the contract yet:\n1. Compile: `npx hardhat compile` (in the contracts directory)\n2. Deploy to Base or Base Sepolia network\n3. Save the deployed contract address\n\n**Or use an existing deployed contract address if you have one**\n\n### 2. Set Environment Variables\n\nYou need to add these secrets to your Replit environment:\n\n#### `REGISTRY_CONTRACT_ADDRESS`\n- The address of your deployed YoubuidlChannelsRegistry contract\n- Example: `0x1234567890abcdef1234567890abcdef12345678`\n\n#### `PLATFORM_PRIVATE_KEY` \n- A wallet private key that will pay for registry transactions\n- This wallet must be the **owner** of the registry contract\n- Format: `0x...` (starts with 0x)\n- **Important**: Fund this wallet with ~0.05 ETH on Base for gas fees\n\n### 3. Test the Registry\n\nOnce environment variables are set, test it:\n\n```bash\n# Sync unregistered coins to the registry\ncurl -X POST http://localhost:5000/api/registry/sync\n\n# Check registry stats\ncurl http://localhost:5000/api/registry/stats\n```\n\n## How It Works Now\n\n1. Users create coins → saved to database\n2. Coins with status='active' and an address are ready for registry\n3. Call `/api/registry/sync` to batch-register them on-chain\n4. The registry contract emits events that grant reviewers can verify\n\n## Need Help?\n\n- Check `REGISTRY_DEPLOYMENT_GUIDE.md` for detailed deployment instructions\n- The contract is in `contracts/YoubuidlChannelsRegistry.sol`\n","size_bytes":1795},"client/src/pages/referrals.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAccount } from \"wagmi\";\nimport Layout from \"@/components/layout\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Gift, Users, Calendar, Award } from \"lucide-react\";\nimport type { Referral } from \"@shared/schema\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Share2, Copy, Trophy, DollarSign, Check } from \"lucide-react\";\n\n// Helper function to update OG meta tags\nconst updateOGMeta = ({\n  title,\n  description,\n  image,\n  url,\n}: {\n  title: string;\n  description: string;\n  image?: string;\n  url?: string;\n}) => {\n  document.title = title;\n\n  const setMetaTag = (property: string, content: string) => {\n    let tag = document.querySelector(\n      `meta[property=\"${property}\"]`,\n    ) as HTMLMetaElement;\n    if (!tag) {\n      tag = document.createElement(\"meta\");\n      tag.setAttribute(\"property\", property);\n      document.head.appendChild(tag);\n    }\n    tag.content = content;\n  };\n\n  setMetaTag(\"og:title\", title);\n  setMetaTag(\"og:description\", description);\n  setMetaTag(\"twitter:title\", title);\n  setMetaTag(\"twitter:description\", description);\n  setMetaTag(\"twitter:card\", \"summary_large_image\");\n\n  if (image) {\n    setMetaTag(\"og:image\", image);\n    setMetaTag(\"twitter:image\", image);\n  }\n\n  if (url) {\n    setMetaTag(\"og:url\", url);\n    setMetaTag(\"twitter:url\", url);\n  }\n};\n\nexport default function Referrals() {\n  const { address, isConnected } = useAccount();\n  const [referralLink, setReferralLink] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const { data: referralStats, isLoading: loadingStats } = useQuery({\n    queryKey: [\"/api/referrals/stats\", address],\n    enabled: !!address,\n  });\n\n  const { data: referrals = [], isLoading: loadingReferrals } = useQuery<\n    Referral[]\n  >({\n    queryKey: [\"/api/referrals/referrer\", address],\n    enabled: !!address,\n  });\n\n  const formatAddress = (addr: string) => {\n    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return \"N/A\";\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Your referral link has been copied.\",\n      variant: \"success\",\n    });\n  };\n\n  useEffect(() => {\n    if (address) {\n      const refLink = `${window.location.origin}/?ref=${address}`;\n      setReferralLink(refLink);\n\n      // Update OG meta for sharing\n      updateOGMeta({\n        title: \"🎁 Join Every1.Fun & Earn 100 Bonus Points!\",\n        description: `Create content coins, trade on Base blockchain, and earn rewards! Use referral code ${address.slice(0, 8)}... to get started with bonus points. 🚀`,\n        url: refLink,\n        image: `${window.location.origin}/purple-white.png`,\n      });\n    }\n  }, [address]);\n\n  if (!isConnected) {\n    return (\n      <Layout>\n        <div className=\"flex flex-col items-center justify-center min-h-[60vh] gap-4\">\n          <Users className=\"w-16 h-16 text-muted-foreground\" />\n          <h2 className=\"text-2xl font-bold\">Connect Your Wallet</h2>\n          <p className=\"text-muted-foreground text-center max-w-md\">\n            Please connect your wallet to view your referrals\n          </p>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <div className=\"mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1\n              className=\"text-4xl font-bold mb-2\"\n              data-testid=\"text-referrals-title\"\n            >\n              My Referrals\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Track your referral performance and rewards\n            </p>\n          </div>\n\n          {/* Referral Link Sharing */}\n          <div className=\"flex flex-col sm:flex-row gap-2 items-center\">\n            <Input\n              type=\"text\"\n              value={referralLink}\n              readOnly\n              className=\"flex-grow max-w-xs\"\n              placeholder=\"Your referral link...\"\n            />\n            <Button\n              onClick={() => copyToClipboard(referralLink)}\n              variant=\"outline\"\n              size=\"icon\"\n            >\n              <Copy className=\"w-4 h-4\" />\n            </Button>\n            <Button asChild>\n              <a\n                href={`https://twitter.com/intent/tweet?text=Join%20CoinIT%20and%20earn%20100%20bonus%20points!%20Create%20content%20coins%20on%20Base%20blockchain.%20Use%20my%20referral%20link:%0A%0A${encodeURIComponent(referralLink)}%0A%0A%23CoinIT%20%23Web3%20%23Base%20%23Referral`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <Share2 className=\"w-4 h-4 mr-2\" /> Share on X\n              </a>\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid gap-6 md:grid-cols-3 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Points\n              </CardTitle>\n              <Gift className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold\"\n                data-testid=\"text-points-earned\"\n              >\n                {loadingStats ? \"...\" : referralStats?.totalPoints || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                100 points per referral\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Referrals\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold\"\n                data-testid=\"text-referral-count\"\n              >\n                {loadingStats ? \"...\" : referralStats?.totalReferrals || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Users you've referred\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Rank</CardTitle>\n              <Award className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {referralStats?.totalReferrals >= 10\n                  ? \"Gold\"\n                  : referralStats?.totalReferrals >= 5\n                    ? \"Silver\"\n                    : \"Bronze\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Based on referrals\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Referrals List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Referral History</CardTitle>\n            <CardDescription>\n              View all users you've successfully referred\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {loadingReferrals ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Loading referrals...\n              </div>\n            ) : referrals.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">No referrals yet</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Share your referral link from Settings to start earning\n                  points!\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {referrals.map((referral) => (\n                  <div\n                    key={referral.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors\"\n                    data-testid={`referral-item-${referral.id}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p\n                          className=\"font-medium font-mono\"\n                          data-testid={`text-referred-address-${referral.id}`}\n                        >\n                          {formatAddress(referral.referredAddress)}\n                        </p>\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Calendar className=\"w-3 h-3\" />\n                          <span>{formatDate(referral.createdAt)}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-primary\">\n                        +{referral.pointsEarned} points\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {referral.claimed ? \"Claimed\" : \"Pending\"}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* How it Works */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>How Referrals Work</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex gap-3\">\n                <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold\">\n                  1\n                </div>\n                <p>Get your unique referral link from the Settings page (your username or wallet becomes your referral code)</p>\n              </div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold\">\n                  2\n                </div>\n                <p>\n                  Share your link with friends via social media, email, or\n                  direct message\n                </p>\n              </div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold\">\n                  3\n                </div>\n                <p>\n                  When they click your link and sign up using Privy (email, social login, or wallet), the referral is automatically tracked\n                </p>\n              </div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold\">\n                  4\n                </div>\n                <p>\n                  You automatically earn 100 points once they complete authentication - no wallet connection required!\n                </p>\n              </div>\n              <div className=\"flex gap-3\">\n                <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold\">\n                  5\n                </div>\n                <p>\n                  Use your points for exclusive rewards and benefits on the\n                  platform\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":12607},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAccount } from \"wagmi\";\nimport { useLocation, useSearch } from \"wouter\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Copy, Check, Gift, Users, TrendingUp, Settings as SettingsIcon, Award, Flame } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Referral } from \"@shared/schema\";\n\nexport default function Settings() {\n  const { address, isConnected } = useAccount();\n  const { toast } = useToast();\n  const searchParams = new URLSearchParams(useSearch());\n  const [copied, setCopied] = useState(false);\n  const [referralLink, setReferralLink] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(searchParams.get(\"tab\") || \"settings\");\n  const [loadingReferral, setLoadingReferral] = useState(false);\n  const [referralData, setReferralData] = useState<{ referralLink: string; referralCode: string } | null>(null);\n\n  // Fetch creator data for username-based referral\n  const { data: creatorData } = useQuery({\n    queryKey: ['/api/creators/address', address],\n    enabled: !!address,\n  });\n\n  // Generate referral link on mount or when creator data changes\n  useEffect(() => {\n    const generateReferral = async () => {\n      if (!address) return;\n\n      setLoadingReferral(true);\n      try {\n        const response = await apiRequest('POST', '/api/referrals/generate', { address });\n        const data = await response.json();\n        setReferralData(data);\n        console.log('Referral data loaded:', data);\n        \n        // Update OG meta for sharing\n        if (data.referralLink) {\n          const { updateOGMeta } = await import('@/lib/og-meta');\n          updateOGMeta({\n            title: \"🎁 Join CoinIT & Earn 100 Bonus Points!\",\n            description: `Create content coins, trade on Base blockchain, and earn rewards! Use referral code ${data.referralCode} to get started with bonus points. 🚀`,\n            url: data.referralLink,\n            image: `${window.location.origin}/purple-white.png`\n          });\n        }\n      } catch (error) {\n        console.error('Error generating referral:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate referral link\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoadingReferral(false);\n      }\n    };\n\n    generateReferral();\n  }, [address, creatorData?.name, toast]);\n\n  const { data: referralStats, isLoading: loadingStats } = useQuery({\n    queryKey: ['/api/referrals/stats', address],\n    enabled: !!address,\n  });\n\n  const { data: referrals = [], isLoading: loadingReferrals } = useQuery<Referral[]>({\n    queryKey: ['/api/referrals/referrer', address],\n    enabled: !!address,\n  });\n\n  useEffect(() => {\n    if (referralData?.referralLink) {\n      setReferralLink(referralData.referralLink);\n    }\n  }, [referralData]);\n\n  const handleCopyLink = () => {\n    if (!referralLink) {\n      toast({\n        title: \"Error\",\n        description: \"Referral link not available yet\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    navigator.clipboard.writeText(referralLink);\n    setCopied(true);\n    toast({\n      title: \"Copied!\",\n      description: \"Referral link copied to clipboard\",\n    });\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleCopyCode = () => {\n    if (!referralData?.referralCode) {\n      toast({\n        title: \"Error\",\n        description: \"Referral code not available yet\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    navigator.clipboard.writeText(referralData.referralCode);\n    toast({\n      title: \"Copied!\",\n      description: \"Referral code copied to clipboard\",\n    });\n  };\n\n  const formatAddress = (addr: string) => {\n    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (!isConnected) {\n    return (\n      <Layout>\n        <div className=\"flex flex-col items-center justify-center min-h-[60vh] gap-4\">\n          <SettingsIcon className=\"w-16 h-16 text-muted-foreground\" />\n          <h2 className=\"text-2xl font-bold\">Connect Your Wallet</h2>\n          <p className=\"text-muted-foreground text-center max-w-md\">\n            Please connect your wallet to access settings and referral features\n          </p>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"container mx-auto px-4 py-6 max-w-5xl\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <div className=\"flex justify-center mb-4 sm:mb-6\">\n            <TabsList className=\"inline-flex gap-1 bg-muted/20 rounded-full p-1\">\n              <TabsTrigger\n                value=\"settings\"\n                className=\"rounded-full px-4 sm:px-6 py-2 text-sm font-semibold data-[state=active]:bg-white data-[state=active]:text-black\"\n              >\n                <SettingsIcon className=\"w-4 h-4 mr-2\" />\n                Settings\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"referral\"\n                className=\"rounded-full px-4 sm:px-6 py-2 text-sm font-semibold data-[state=active]:bg-white data-[state=active]:text-black\"\n              >\n                <Gift className=\"w-4 h-4 mr-2\" />\n                Referral\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-3 sm:space-y-4\">\n            <Card className=\"rounded-2xl sm:rounded-3xl\">\n              <CardHeader className=\"pb-2 sm:pb-3 px-4 sm:px-6 pt-4 sm:pt-6\">\n                <CardTitle className=\"text-base sm:text-lg\">Account Information</CardTitle>\n                <CardDescription className=\"text-xs sm:text-sm\">Your wallet details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"px-4 sm:px-6 pb-4 sm:pb-6\">\n                <div className=\"space-y-2 sm:space-y-3\">\n                  <div>\n                    <Label className=\"text-xs sm:text-sm\">Wallet Address</Label>\n                    <Input\n                      value={address || ''}\n                      readOnly\n                      className=\"mt-1 sm:mt-1.5 font-mono text-xs sm:text-sm rounded-xl\"\n                      data-testid=\"input-wallet-address\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"username\" className=\"text-xs sm:text-sm\">Username</Label>\n                    <div className=\"flex items-center gap-2 mt-1 sm:mt-1.5\">\n                      <Input\n                        id=\"username\"\n                        value={creatorData?.name || ''}\n                        readOnly\n                        className=\"font-mono text-xs sm:text-sm rounded-xl\"\n                        data-testid=\"input-username\"\n                        placeholder=\"Set your username in profile\"\n                      />\n                      <Button variant=\"outline\" size=\"icon\" className=\"rounded-xl\">\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Referral Tab */}\n          <TabsContent value=\"referral\" className=\"space-y-3 sm:space-y-4\">\n            {/* Daily Streak Points Section */}\n            <Card className=\"rounded-2xl sm:rounded-3xl bg-gradient-to-br from-orange-500/10 to-red-500/10 border-orange-500/20\">\n              <CardHeader className=\"pb-2 sm:pb-3 px-4 sm:px-6 pt-4 sm:pt-6\">\n                <CardTitle className=\"text-base sm:text-lg flex items-center gap-2\">\n                  <Flame className=\"w-5 h-5 text-orange-500\" />\n                  Daily Streak Points\n                </CardTitle>\n                <CardDescription className=\"text-xs sm:text-sm\">Points earned from daily login streaks</CardDescription>\n              </CardHeader>\n              <CardContent className=\"px-4 sm:px-6 pb-4 sm:pb-6\">\n                {(() => {\n                  const { data: streakData } = useQuery({\n                    queryKey: ['/api/login-streak', address],\n                    enabled: !!address,\n                  });\n\n                  const totalPoints = parseInt(streakData?.totalPoints || '0');\n                  const currentStreak = parseInt(streakData?.currentStreak || '0');\n\n                  return (\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <div className=\"bg-background/50 rounded-xl p-3 border border-orange-500/20\">\n                        <p className=\"text-xs text-muted-foreground mb-1\">Total Earned</p>\n                        <p className=\"text-2xl font-bold text-orange-500\">{totalPoints}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">Points</p>\n                      </div>\n                      <div className=\"bg-background/50 rounded-xl p-3 border border-orange-500/20\">\n                        <p className=\"text-xs text-muted-foreground mb-1\">Current Streak</p>\n                        <p className=\"text-2xl font-bold text-orange-500\">{currentStreak}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">Days</p>\n                      </div>\n                    </div>\n                  );\n                })()}\n              </CardContent>\n            </Card>\n\n            {/* Stats Cards */}\n            <div className=\"grid gap-3 sm:gap-4 grid-cols-3\">\n              <Card className=\"rounded-xl sm:rounded-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-1 sm:pb-2 px-3 sm:px-6 pt-3 sm:pt-6\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Points</CardTitle>\n                  <Gift className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"px-3 sm:px-6 pb-3 sm:pb-6\">\n                  <div className=\"text-lg sm:text-2xl font-bold\" data-testid=\"text-total-points\">\n                    {loadingStats ? '...' : referralStats?.totalPoints || 0}\n                  </div>\n                  <p className=\"text-[10px] sm:text-xs text-muted-foreground mt-0.5 sm:mt-1\">\n                    100 per referral\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"rounded-xl sm:rounded-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-1 sm:pb-2 px-3 sm:px-6 pt-3 sm:pt-6\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">Referrals</CardTitle>\n                  <Users className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"px-3 sm:px-6 pb-3 sm:pb-6\">\n                  <div className=\"text-lg sm:text-2xl font-bold\" data-testid=\"text-total-referrals\">\n                    {loadingStats ? '...' : referralStats?.totalReferrals || 0}\n                  </div>\n                  <p className=\"text-[10px] sm:text-xs text-muted-foreground mt-0.5 sm:mt-1\">\n                    Total users\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"rounded-xl sm:rounded-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-1 sm:pb-2 px-3 sm:px-6 pt-3 sm:pt-6\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">Rank</CardTitle>\n                  <Award className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"px-3 sm:px-6 pb-3 sm:pb-6\">\n                  <div className=\"text-lg sm:text-2xl font-bold\">\n                    {(referralStats?.totalReferrals || 0) >= 10 ? 'Gold' : (referralStats?.totalReferrals || 0) >= 5 ? 'Silver' : 'Bronze'}\n                  </div>\n                  <p className=\"text-[10px] sm:text-xs text-muted-foreground mt-0.5 sm:mt-1\">\n                    Based on refs\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Referral Link & Code */}\n            <Card className=\"rounded-2xl sm:rounded-3xl\">\n              <CardHeader className=\"pb-2 sm:pb-3 px-4 sm:px-6 pt-4 sm:pt-6\">\n                <CardTitle className=\"text-base sm:text-lg\">Your Referral Info</CardTitle>\n                <CardDescription className=\"text-xs sm:text-sm\">Share to earn 100 points per referral</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-2 sm:space-y-3 px-4 sm:px-6 pb-4 sm:pb-6\">\n                <div>\n                  <Label htmlFor=\"referral-code\" className=\"text-sm\">Referral Code</Label>\n                  <div className=\"flex gap-2 mt-1.5\">\n                    <Input\n                      id=\"referral-code\"\n                      value={loadingReferral ? 'Loading...' : (referralData?.referralCode || creatorData?.name || '')}\n                      readOnly\n                      className=\"font-mono text-sm\"\n                      data-testid=\"input-referral-code\"\n                      placeholder={loadingReferral ? 'Generating...' : ''}\n                    />\n                    <Button\n                      onClick={handleCopyCode}\n                      variant=\"outline\"\n                      size=\"icon\"\n                      disabled={loadingReferral || !(referralData?.referralCode || creatorData?.name)}\n                      data-testid=\"button-copy-code\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"referral-link\" className=\"text-sm\">Referral Link</Label>\n                  <div className=\"flex gap-2 mt-1.5\">\n                    <Input\n                      id=\"referral-link\"\n                      value={loadingReferral ? 'Loading...' : (referralData?.referralLink || referralLink)}\n                      readOnly\n                      className=\"text-sm\"\n                      data-testid=\"input-referral-link\"\n                      placeholder={loadingReferral ? 'Generating...' : ''}\n                    />\n                    <Button\n                      onClick={handleCopyLink}\n                      variant=\"outline\"\n                      size=\"icon\"\n                      disabled={loadingReferral || !(referralData?.referralLink || referralLink)}\n                      data-testid=\"button-copy-link\"\n                    >\n                      {copied ? <Check className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Referral History */}\n            <Card className=\"rounded-2xl sm:rounded-3xl\">\n              <CardHeader className=\"pb-2 sm:pb-3 px-4 sm:px-6 pt-4 sm:pt-6\">\n                <CardTitle className=\"text-base sm:text-lg\">Referral History</CardTitle>\n                <CardDescription className=\"text-xs sm:text-sm\">Track your successful referrals</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {loadingReferrals ? (\n                  <div className=\"text-center py-6 text-sm text-muted-foreground\">Loading...</div>\n                ) : referrals.length === 0 ? (\n                  <div className=\"text-center py-6\">\n                    <Users className=\"w-10 h-10 mx-auto mb-3 text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground\">No referrals yet</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Share your link to start earning!\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2 max-h-[300px] overflow-y-auto\">\n                    {referrals.map((referral) => (\n                      <div\n                        key={referral.id}\n                        className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                            <Users className=\"w-4 h-4 text-primary\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium font-mono text-sm\">\n                              {formatAddress(referral.referredAddress)}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {formatDate(referral.createdAt)}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-primary text-sm\">+{referral.pointsEarned}</p>\n                          <p className=\"text-xs text-muted-foreground\">points</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* How it Works */}\n            <Card className=\"rounded-2xl sm:rounded-3xl\">\n              <CardHeader className=\"pb-2 sm:pb-3 px-4 sm:px-6 pt-4 sm:pt-6\">\n                <CardTitle className=\"text-base sm:text-lg\">How It Works</CardTitle>\n              </CardHeader>\n              <CardContent className=\"px-4 sm:px-6 pb-4 sm:pb-6\">\n                <div className=\"space-y-2.5 text-sm\">\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold flex-shrink-0\">1</div>\n                    <p className=\"text-sm\">Copy your unique referral link or code</p>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold flex-shrink-0\">2</div>\n                    <p className=\"text-sm\">Share it with friends via social media or direct message</p>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold flex-shrink-0\">3</div>\n                    <p className=\"text-sm\">When they connect their wallet using your link, you earn 100 points</p>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-5 h-5 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold flex-shrink-0\">4</div>\n                    <p className=\"text-sm\">Use points for exclusive rewards and benefits</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":19874},"client/src/components/farcaster-icon.tsx":{"content":"\nimport farcasterLogo from \"@/assets/farcaster-seeklogo.png\";\n\nexport function FarcasterIcon({ className }: { className?: string }) {\n  return (\n    <img \n      src={farcasterLogo} \n      alt=\"Farcaster\" \n      className={className}\n      style={{ objectFit: 'cover', borderRadius: '2px' }}\n    />\n  );\n}\n","size_bytes":305},"client/src/components/gitcoin-icon.tsx":{"content":"\nimport gitcoinLogo from \"@/assets/gitcoin.png\";\n\nexport function GitcoinIcon({ className }: { className?: string }) {\n  return (\n    <img \n      src={gitcoinLogo} \n      alt=\"Gitcoin\" \n      className={className}\n      style={{ objectFit: 'cover', borderRadius: '2px' }}\n    />\n  );\n}\n","size_bytes":286},"client/src/components/karma-icon.tsx":{"content":"\nimport karmaLogo from \"@/assets/karma.jpg\";\n\nexport function KarmaIcon({ className }: { className?: string }) {\n  return (\n    <img \n      src={karmaLogo} \n      alt=\"KarmaGap\" \n      className={className}\n      style={{ objectFit: 'cover', borderRadius: '2px' }}\n    />\n  );\n}\n","size_bytes":279},"client/src/components/product-tour.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { X, ArrowRight, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface TourStep {\n  title: string;\n  description: string;\n  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';\n  targetElement?: string; // CSS selector for the element to highlight\n}\n\nexport default function ProductTour() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const hasSeenTour = localStorage.getItem(\"hasSeenProductTour\");\n    if (!hasSeenTour) {\n      setTimeout(() => setIsOpen(true), 500);\n    }\n  }, []);\n\n  const tourSteps: TourStep[] = [\n    {\n      title: \"Welcome to Every1.fun! 🎉\",\n      description: \"Transform your content into tradeable digital assets. Your creativity deserves to be rewarded.\",\n      position: 'center'\n    },\n    {\n      title: \"Connect Your Wallet\",\n      description: \"Start by connecting your wallet to create and trade coins on the Base blockchain.\",\n      position: 'top-right',\n      targetElement: 'button[data-testid=\"button-wallet-connect\"]'\n    },\n    {\n      title: \"Create Your First Coin\",\n      description: \"Import from YouTube, TikTok, Farcaster, or any platform. Each piece becomes a unique tradeable coin.\",\n      position: 'top-left',\n      targetElement: 'nav a[href=\"/create\"], header a[href=\"/create\"]'\n    },\n    {\n      title: \"Explore Trending Coins\",\n      description: \"Discover coins from creators, see live prices, and trade with the community.\",\n      position: 'bottom-left',\n      targetElement: '[data-coin-card]'\n    },\n    {\n      title: \"Earn Creator Earnings\",\n      description: \"Every time someone trades your coin, you earn Creator Earnings automatically. They're sent directly to your wallet - no claiming needed!\",\n      position: 'top-right',\n      targetElement: 'nav a[href=\"/creators\"], header a[href=\"/creators\"]'\n    },\n    {\n      title: \"Ready to Start?\",\n      description: \"Connect your wallet and create your first coin in minutes. Let's turn your content into value!\",\n      position: 'center'\n    },\n  ];\n\n  const handleClose = () => {\n    localStorage.setItem(\"hasSeenProductTour\", \"true\");\n    setIsOpen(false);\n  };\n\n  const handleNext = () => {\n    if (currentStep < tourSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleClose();\n      setLocation(\"/create\");\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSnooze = () => {\n    handleClose();\n  };\n\n  const [highlightStyle, setHighlightStyle] = useState<React.CSSProperties>({});\n\n  useEffect(() => {\n    if (isOpen && currentStep > 0) {\n      const step = tourSteps[currentStep];\n      if (step.targetElement) {\n        // Wait for DOM to update and element to be available\n        const updateHighlight = () => {\n          const selectors = step.targetElement!.split(',').map(s => s.trim());\n          const element = selectors.map(s => document.querySelector(s)).find(el => el !== null);\n          \n          if (element) {\n            element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            \n            // Small delay to ensure scroll completes\n            setTimeout(() => {\n              const rect = element.getBoundingClientRect();\n              setHighlightStyle({\n                position: 'fixed',\n                top: `${rect.top - 8}px`,\n                left: `${rect.left - 8}px`,\n                width: `${rect.width + 16}px`,\n                height: `${rect.height + 16}px`,\n                borderRadius: '12px',\n                pointerEvents: 'none',\n                zIndex: 45,\n              });\n            }, 150);\n          } else {\n            // Element not found, clear highlight\n            console.warn(`Tour step ${currentStep}: Element not found for selectors \"${step.targetElement}\"`);\n            setHighlightStyle({});\n          }\n        };\n\n        // Initial update with multiple retries\n        let retries = 0;\n        const maxRetries = 10;\n        const retryInterval = setInterval(() => {\n          const selectors = step.targetElement!.split(',').map(s => s.trim());\n          const element = selectors.map(s => document.querySelector(s)).find(el => el !== null);\n          if (element || retries >= maxRetries) {\n            clearInterval(retryInterval);\n            updateHighlight();\n          }\n          retries++;\n        }, 100);\n\n        // Recalculate on window resize\n        window.addEventListener('resize', updateHighlight);\n        \n        return () => {\n          clearInterval(retryInterval);\n          window.removeEventListener('resize', updateHighlight);\n        };\n      } else {\n        setHighlightStyle({});\n      }\n    } else {\n      setHighlightStyle({});\n    }\n  }, [currentStep, isOpen]);\n\n  if (!isOpen) return null;\n\n  const currentTourStep = tourSteps[currentStep];\n\n  const getPositionClasses = () => {\n    switch (currentTourStep.position) {\n      case 'top-left':\n        return 'top-20 left-4';\n      case 'top-right':\n        return 'top-20 right-4';\n      case 'bottom-left':\n        return 'bottom-20 left-4';\n      case 'bottom-right':\n        return 'bottom-20 right-4';\n      case 'center':\n      default:\n        return 'top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2';\n    }\n  };\n\n  return (\n    <>\n      {/* Spotlight effect - uses box-shadow to create backdrop with cutout */}\n      {currentTourStep.targetElement && highlightStyle.width ? (\n        <div \n          className=\"fixed inset-0 z-40 pointer-events-none transition-all duration-200\"\n        >\n          <div \n            className=\"absolute transition-all duration-200 pointer-events-none\"\n            style={{\n              ...highlightStyle,\n              boxShadow: '0 0 0 9999px rgba(0, 0, 0, 0.75), 0 0 0 3px rgba(139, 92, 246, 1)',\n              border: '3px solid rgb(139, 92, 246)',\n              background: 'transparent',\n            }}\n          />\n        </div>\n      ) : (\n        <div className=\"fixed inset-0 z-40 bg-black/75 backdrop-blur-sm animate-in fade-in duration-200\" />\n      )}\n\n      {/* Tour Modal */}\n      <div \n        className={`fixed z-[60] p-3 animate-in zoom-in-95 duration-200 ${getPositionClasses()}`}\n        style={{\n          animation: 'slideIn 0.2s ease-out',\n          maxWidth: '90vw',\n          width: '380px'\n        }}\n      >\n        <div \n          className=\"relative w-full bg-background rounded-2xl shadow-2xl border border-border overflow-hidden\"\n        >\n          {/* Close Button */}\n          <button\n            onClick={handleClose}\n            className=\"absolute top-2 right-2 z-10 w-8 h-8 rounded-full bg-muted/80 hover:bg-muted flex items-center justify-center transition-all hover:scale-110\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n\n          {/* Content */}\n          <div className=\"p-6\">\n            {/* Title */}\n            <h2 className=\"text-lg font-black mb-2 text-foreground animate-in slide-in-from-bottom duration-500\">\n              {currentTourStep.title}\n            </h2>\n\n            {/* Description */}\n            <p className=\"text-sm text-muted-foreground leading-relaxed mb-4 animate-in slide-in-from-bottom duration-500 delay-100\">\n              {currentTourStep.description}\n            </p>\n\n            {/* Progress Dots */}\n            <div className=\"flex justify-center gap-1.5 mb-4\">\n              {tourSteps.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => setCurrentStep(index)}\n                  className={`h-1.5 rounded-full transition-all duration-300 ${\n                    index === currentStep\n                      ? \"w-6 bg-primary\"\n                      : index < currentStep\n                      ? \"w-1.5 bg-primary/50\"\n                      : \"w-1.5 bg-muted\"\n                  }`}\n                />\n              ))}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex items-center justify-between gap-2\">\n              <button\n                onClick={handleSnooze}\n                className=\"text-xs text-muted-foreground hover:text-foreground transition-colors px-3 py-1.5\"\n              >\n                Skip Tour\n              </button>\n\n              <div className=\"flex gap-2\">\n                {currentStep > 0 && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={handlePrev}\n                    size=\"sm\"\n                    className=\"gap-1.5 rounded-full text-xs h-9 px-3\"\n                  >\n                    <ArrowLeft className=\"w-3 h-3\" />\n                    Back\n                  </Button>\n                )}\n                <Button\n                  onClick={handleNext}\n                  size=\"sm\"\n                  className=\"gap-1.5 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full text-xs h-9 px-4\"\n                >\n                  {currentStep === tourSteps.length - 1 ? (\n                    \"Get Started\"\n                  ) : (\n                    <>\n                      Next\n                      <ArrowRight className=\"w-3 h-3\" />\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <style>{`\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateY(20px) scale(0.95);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0) scale(1);\n          }\n        }\n      `}</style>\n    </>\n  );\n}\n","size_bytes":9808},"client/src/pages/docs.tsx":{"content":"import Layout from \"@/components/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  BookOpen,\n  Coins,\n  Upload,\n  TrendingUp,\n  Sparkles,\n  Zap,\n  DollarSign,\n} from \"lucide-react\";\n\nexport default function Docs() {\n  return (\n    <Layout>\n      <div className=\"p-4 sm:p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header with Alpha Badge */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <BookOpen className=\"w-6 h-6 text-primary\" />\n              <h1 className=\"text-3xl font-black text-foreground\">Documentation</h1>\n              <Badge\n                variant=\"secondary\"\n                className=\"bg-primary/20 text-primary border-primary/30\"\n              >\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                Alpha\n              </Badge>\n            </div>\n            <p className=\"text-muted-foreground text-lg\">\n              Transform content into tradeable blockchain assets\n            </p>\n          </div>\n\n          {/* What is Every1.fun */}\n          <Card className=\"spotify-card mb-6 rounded-3xl border-border/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-xl\">\n                <Zap className=\"w-6 h-6 text-primary\" />\n                What is Every1.fun?\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-muted-foreground\">\n              <p className=\"text-foreground font-semibold\">\n                A Product by GiveStation\n              </p>\n              <p>\n                Every1.fun revolutionizes creator monetization by transforming\n                any digital content into tradeable blockchain assets on Base.\n              </p>\n              <div className=\"bg-primary/5 border border-primary/20 rounded-2xl p-4\">\n                <p className=\"text-foreground font-medium mb-2\">\n                  ✨ Key Features:\n                </p>\n                <ul className=\"space-y-1.5 ml-4 list-disc\">\n                  <li>\n                    Import content from any platform (KarmaGAP, PublicGOODS,\n                    Music, Videos, YouTube, TikTok, Farcaster, etc.)\n                  </li>\n                  <li>Automatic Creator Earnings from every trade</li>\n                  <li>One-click content tokenization</li>\n                  <li>Real-time market data and transparent pricing</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Start */}\n          <Card className=\"spotify-card mb-6 rounded-3xl border-border/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-xl\">\n                <Coins className=\"w-6 h-6 text-primary\" />\n                Quick Start\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                <div className=\"bg-primary/5 border border-primary/20 rounded-2xl p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">1</div>\n                  <p className=\"text-sm font-medium\">Connect Wallet</p>\n                </div>\n                <div className=\"bg-primary/5 border border-primary/20 rounded-2xl p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">2</div>\n                  <p className=\"text-sm font-medium\">Import Content</p>\n                </div>\n                <div className=\"bg-primary/5 border border-primary/20 rounded-2xl p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">3</div>\n                  <p className=\"text-sm font-medium\">Start Earning</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Creating Coins */}\n          <Card className=\"spotify-card mb-6 rounded-3xl border-border/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-xl\">\n                <Upload className=\"w-6 h-6 text-primary\" />\n                Creating Coins\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-muted-foreground\">\n              <div>\n                <h3 className=\"text-foreground font-semibold mb-1\">\n                  📎 Import from URL\n                </h3>\n                <p className=\"text-sm\">\n                  Paste any content URL to auto-extract and create a coin.\n                  Supports YouTube, Medium, Farcaster, TikTok, and more.\n                </p>\n              </div>\n              <div className=\"border-t border-border/30 pt-3\">\n                <h3 className=\"text-foreground font-semibold mb-1\">\n                  📁 Upload Content\n                </h3>\n                <p className=\"text-sm\">\n                  Upload images, videos, or audio directly. Add a title and\n                  description to create your coin.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Trading */}\n          <Card className=\"spotify-card mb-6 rounded-3xl border-border/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-xl\">\n                <TrendingUp className=\"w-6 h-6 text-primary\" />\n                Trading & Earnings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-muted-foreground\">\n              <div>\n                <h3 className=\"text-foreground font-semibold mb-1\">\n                  💱 Trading\n                </h3>\n                <p className=\"text-sm\">\n                  Click any coin to trade. Buy or sell using ETH with automatic\n                  price discovery through bonding curves.\n                </p>\n              </div>\n              <div className=\"border-t border-border/30 pt-3\">\n                <h3 className=\"text-foreground font-semibold mb-1 flex items-center gap-2\">\n                  <DollarSign className=\"w-4 h-4 text-primary\" />\n                  Creator Earnings\n                </h3>\n                <p className=\"text-sm\">\n                  Earn automatically from every trade of your coins. Earnings\n                  are sent directly to your wallet - no claiming needed!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Alpha Notice */}\n          <Card className=\"spotify-card rounded-3xl border-primary/30 bg-primary/5\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start gap-3\">\n                <Sparkles className=\"w-6 h-6 text-primary flex-shrink-0 mt-1\" />\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-foreground font-bold text-lg\">\n                    Alpha Launch\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    We're actively developing new features. Your feedback shapes\n                    the future of content monetization!\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":7364},"client/src/components/tour-trigger-button.tsx":{"content":"\nimport { HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function TourTriggerButton() {\n  const handleResetTour = () => {\n    localStorage.removeItem(\"hasSeenProductTour\");\n    window.location.reload();\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={handleResetTour}\n      className=\"w-9 h-9 text-muted-foreground hover:text-foreground\"\n      title=\"View product tour\"\n    >\n      <HelpCircle className=\"w-5 h-5\" />\n    </Button>\n  );\n}\n","size_bytes":526},"client/src/hooks/use-privy-wallet.ts":{"content":"\nimport { usePrivy, useWallets } from '@privy-io/react-auth';\nimport { useMemo } from 'react';\n\nexport function usePrivyWallet() {\n  const { ready, authenticated, user } = usePrivy();\n  const { wallets } = useWallets();\n\n  const wallet = useMemo(() => {\n    if (!authenticated || !user?.wallet) return null;\n    \n    // Get the embedded wallet or connected wallet\n    return wallets[0] || null;\n  }, [authenticated, user, wallets]);\n\n  const address = user?.wallet?.address;\n\n  return {\n    isReady: ready,\n    isConnected: authenticated && !!address,\n    address: address as `0x${string}` | undefined,\n    wallet,\n    user,\n  };\n}\n","size_bytes":632},"scripts/deploy-activity-tracker.js":{"content":"import solc from 'solc';\nimport { createWalletClient, createPublicClient, http } from 'viem';\nimport { base } from 'viem/chains';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nasync function main() {\n  console.log(\"🚀 Deploying CoinITActivityTracker to Base Mainnet...\\n\");\n\n  const privateKey = process.env.DEPLOYER_PRIVATE_KEY;\n  if (!privateKey) {\n    throw new Error(\"DEPLOYER_PRIVATE_KEY environment variable not set\");\n  }\n\n  const account = privateKeyToAccount(privateKey);\n  console.log(\"📝 Deploying from account:\", account.address);\n\n  const publicClient = createPublicClient({\n    chain: base,\n    transport: http()\n  });\n\n  const balance = await publicClient.getBalance({ address: account.address });\n  console.log(\"💰 Account balance:\", (Number(balance) / 1e18).toFixed(6), \"ETH\\n\");\n\n  if (Number(balance) < 3e14) {\n    throw new Error(\"Insufficient balance. Need at least 0.0003 ETH for deployment\");\n  }\n\n  console.log(\"📦 Compiling contract...\");\n  const contractPath = join(__dirname, '../contracts/youbuidlevery1.sol');\n  const source = readFileSync(contractPath, 'utf8');\n\n  const input = {\n    language: 'Solidity',\n    sources: {\n      'youbuidlevery1.sol': {\n        content: source\n      }\n    },\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200\n      },\n      outputSelection: {\n        '*': {\n          '*': ['abi', 'evm.bytecode']\n        }\n      }\n    }\n  };\n\n  const output = JSON.parse(solc.compile(JSON.stringify(input)));\n\n  if (output.errors) {\n    const errors = output.errors.filter(e => e.severity === 'error');\n    if (errors.length > 0) {\n      console.error(\"❌ Compilation errors:\");\n      errors.forEach(err => console.error(err.formattedMessage));\n      process.exit(1);\n    }\n  }\n\n  const contract = output.contracts['youbuidlevery1.sol']['youbuidlevery1'];\n  const bytecode = `0x${contract.evm.bytecode.object}`;\n  const abi = contract.abi;\n\n  console.log(\"✅ Contract compiled successfully\\n\");\n\n  const walletClient = createWalletClient({\n    account,\n    chain: base,\n    transport: http()\n  });\n\n  // Platform address - this will be the backend server that calls the contract\n  const platformAddress = account.address;\n  console.log(\"🏢 Platform address:\", platformAddress);\n\n  console.log(\"🔨 Deploying contract to Base Mainnet...\");\n  console.log(\"⏳ This may take 30-60 seconds...\\n\");\n\n  const hash = await walletClient.deployContract({\n    abi,\n    bytecode,\n    account,\n    args: [platformAddress]\n  });\n\n  console.log(\"📤 Transaction sent:\", hash);\n  console.log(\"⏳ Waiting for confirmation...\\n\");\n\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n\n  if (receipt.status === 'success') {\n    console.log(\"✅ Contract deployed successfully!\\n\");\n    console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\n    console.log(\"📍 Contract Address:\", receipt.contractAddress);\n    console.log(\"🔗 View on Basescan:\", `https://basescan.org/address/${receipt.contractAddress}`);\n    console.log(\"🔗 Transaction:\", `https://basescan.org/tx/${hash}`);\n    console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\");\n    console.log(\"📝 Next steps:\");\n    console.log(\"1. Add to Replit Secrets:\");\n    console.log(`   ACTIVITY_TRACKER_ADDRESS=${receipt.contractAddress}`);\n    console.log(\"\\n2. Verify contract on Basescan (optional):\");\n    console.log(`   npm run verify:tracker ${receipt.contractAddress}`);\n    console.log(\"\\n3. Grant judges can now view platform activities on-chain at:\");\n    console.log(`   https://basescan.org/address/${receipt.contractAddress}#readContract`);\n    console.log(\"\\n📊 For grant judges:\");\n    console.log(\"   - Call 'getTotalActivities()' to see total coins created\");\n    console.log(\"   - Call 'getAllActivities()' to see all platform activity\");\n    console.log(\"   - Call 'getActivity(index)' to see specific coin details\");\n  } else {\n    console.error(\"❌ Deployment failed\");\n    process.exit(1);\n  }\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"\\n❌ Deployment error:\", error.message);\n    process.exit(1);\n  });\n","size_bytes":4497},"contracts/CoinITActivityTracker.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract CoinITActivityTracker {\n    event PlatformCoinCreated(\n        address indexed coin,\n        address indexed creator,\n        string contentUrl,\n        uint256 timestamp,\n        bytes32 indexed activityId,\n        string coinName,\n        string coinSymbol\n    );\n    \n    event TradingActivityRecorded(\n        address indexed coin,\n        address indexed trader,\n        string activityType,\n        uint256 amount,\n        uint256 timestamp\n    );\n    \n    struct CoinActivity {\n        address creator;\n        address coinAddress;\n        string contentUrl;\n        string coinName;\n        string coinSymbol;\n        uint256 timestamp;\n        bytes32 activityId;\n    }\n    \n    address public owner;\n    address public platformAddress;\n    uint256 public totalCoinsCreated;\n    \n    CoinActivity[] public activities;\n    mapping(address => CoinActivity[]) public creatorActivities;\n    mapping(address => bool) public isRegisteredCoin;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this\");\n        _;\n    }\n    \n    modifier onlyPlatformOrOwner() {\n        require(\n            msg.sender == platformAddress || msg.sender == owner,\n            \"Only platform or owner can call this\"\n        );\n        _;\n    }\n    \n    constructor(address _platformAddress) {\n        owner = msg.sender;\n        platformAddress = _platformAddress;\n    }\n    \n    function recordCoinCreation(\n        address coin,\n        address creator,\n        string memory contentUrl,\n        string memory coinName,\n        string memory coinSymbol\n    ) external onlyPlatformOrOwner returns (bytes32) {\n        bytes32 activityId = keccak256(\n            abi.encodePacked(\n                coin,\n                creator,\n                block.timestamp,\n                totalCoinsCreated\n            )\n        );\n        \n        CoinActivity memory activity = CoinActivity({\n            creator: creator,\n            coinAddress: coin,\n            contentUrl: contentUrl,\n            coinName: coinName,\n            coinSymbol: coinSymbol,\n            timestamp: block.timestamp,\n            activityId: activityId\n        });\n        \n        activities.push(activity);\n        creatorActivities[creator].push(activity);\n        isRegisteredCoin[coin] = true;\n        totalCoinsCreated++;\n        \n        emit PlatformCoinCreated(\n            coin,\n            creator,\n            contentUrl,\n            block.timestamp,\n            activityId,\n            coinName,\n            coinSymbol\n        );\n        \n        return activityId;\n    }\n    \n    function recordTradingActivity(\n        address coin,\n        address trader,\n        string memory activityType,\n        uint256 amount\n    ) external onlyPlatformOrOwner {\n        require(isRegisteredCoin[coin], \"Coin not registered on platform\");\n        \n        emit TradingActivityRecorded(\n            coin,\n            trader,\n            activityType,\n            amount,\n            block.timestamp\n        );\n    }\n    \n    function getAllActivities() external view returns (CoinActivity[] memory) {\n        return activities;\n    }\n    \n    function getCreatorActivities(address creator) external view returns (CoinActivity[] memory) {\n        return creatorActivities[creator];\n    }\n    \n    function getTotalActivities() external view returns (uint256) {\n        return activities.length;\n    }\n    \n    function getActivity(uint256 index) external view returns (CoinActivity memory) {\n        require(index < activities.length, \"Index out of bounds\");\n        return activities[index];\n    }\n    \n    function updatePlatformAddress(address newPlatformAddress) external onlyOwner {\n        platformAddress = newPlatformAddress;\n    }\n    \n    function isPlatformCoin(address coin) external view returns (bool) {\n        return isRegisteredCoin[coin];\n    }\n}\n","size_bytes":3925},"contracts/youbuidlevery1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract youbuidlevery1 {\n    event PlatformCoinCreated(\n        address indexed coin,\n        address indexed creator,\n        string contentUrl,\n        uint256 timestamp,\n        bytes32 indexed activityId,\n        string coinName,\n        string coinSymbol\n    );\n\n    event TradingActivityRecorded(\n        address indexed coin,\n        address indexed trader,\n        string activityType,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event FeesRecorded(\n        address indexed coin,\n        address indexed trader,\n        uint256 creatorFee,\n        uint256 platformFee,\n        uint256 timestamp\n    );\n\n    event MarketCapUpdated(\n        address indexed coin,\n        uint256 marketCap,\n        uint256 timestamp\n    );\n\n    struct CoinActivity {\n        address creator;\n        address coinAddress;\n        string contentUrl;\n        string coinName;\n        string coinSymbol;\n        uint256 timestamp;\n        bytes32 activityId;\n    }\n\n    struct CoinMetrics {\n        uint256 totalCreatorFees;\n        uint256 totalPlatformFees;\n        uint256 currentMarketCap;\n        uint256 totalVolume;\n        uint256 tradeCount;\n        uint256 lastUpdated;\n    }\n\n    address public owner;\n    address public platformAddress;\n    address public constant ZORA_FACTORY = 0x777777751622c0d3258f214F9DF38E35BF45baF3;\n\n    uint256 public totalCoinsCreated;\n    uint256 public totalPlatformFeesEarned;\n    uint256 public totalCreatorFeesEarned;\n    uint256 public totalTradingVolume;\n\n    CoinActivity[] public activities;\n    mapping(address => CoinActivity[]) public creatorActivities;\n    mapping(address => bool) public isRegisteredCoin;\n    mapping(address => CoinMetrics) public coinMetrics;\n    mapping(address => uint256) public creatorTotalFees;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this\");\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        require(\n            msg.sender == platformAddress ||\n            msg.sender == owner ||\n            msg.sender == ZORA_FACTORY,\n            \"Not authorized\"\n        );\n        _;\n    }\n\n    constructor(address _platformAddress) {\n        owner = msg.sender;\n        platformAddress = _platformAddress;\n    }\n\n    function postDeploy(\n        address coin,\n        address creator,\n        bytes calldata hookData\n    ) external returns (bytes memory) {\n        require(msg.sender == ZORA_FACTORY, \"Only Zora factory can call\");\n\n        (string memory contentUrl, string memory coinName, string memory coinSymbol) =\n            abi.decode(hookData, (string, string, string));\n\n        bytes32 activityId = _recordCoinCreation(\n            coin,\n            creator,\n            contentUrl,\n            coinName,\n            coinSymbol,\n            block.timestamp\n        );\n\n        return abi.encode(activityId);\n    }\n\n    function recordCoinCreation(\n        address coin,\n        address creator,\n        string memory contentUrl,\n        string memory coinName,\n        string memory coinSymbol,\n        uint256 createdAtTimestamp\n    ) external onlyAuthorized returns (bytes32) {\n        return _recordCoinCreation(coin, creator, contentUrl, coinName, coinSymbol, createdAtTimestamp);\n    }\n\n    function _recordCoinCreation(\n        address coin,\n        address creator,\n        string memory contentUrl,\n        string memory coinName,\n        string memory coinSymbol,\n        uint256 createdAtTimestamp\n    ) internal returns (bytes32) {\n        bytes32 activityId = keccak256(\n            abi.encodePacked(\n                coin,\n                creator,\n                createdAtTimestamp,\n                totalCoinsCreated\n            )\n        );\n\n        CoinActivity memory activity = CoinActivity({\n            creator: creator,\n            coinAddress: coin,\n            contentUrl: contentUrl,\n            coinName: coinName,\n            coinSymbol: coinSymbol,\n            timestamp: createdAtTimestamp,\n            activityId: activityId\n        });\n\n        activities.push(activity);\n        creatorActivities[creator].push(activity);\n        isRegisteredCoin[coin] = true;\n        totalCoinsCreated++;\n\n        emit PlatformCoinCreated(\n            coin,\n            creator,\n            contentUrl,\n            createdAtTimestamp,\n            activityId,\n            coinName,\n            coinSymbol\n        );\n\n        return activityId;\n    }\n\n    function recordTradingActivity(\n        address coin,\n        address trader,\n        string memory activityType,\n        uint256 amount\n    ) external onlyAuthorized {\n        require(isRegisteredCoin[coin], \"Coin not registered on platform\");\n\n        CoinMetrics storage metrics = coinMetrics[coin];\n        metrics.totalVolume += amount;\n        metrics.tradeCount++;\n        metrics.lastUpdated = block.timestamp;\n\n        totalTradingVolume += amount;\n\n        emit TradingActivityRecorded(\n            coin,\n            trader,\n            activityType,\n            amount,\n            block.timestamp\n        );\n    }\n\n    function recordFees(\n        address coin,\n        address trader,\n        uint256 creatorFee,\n        uint256 platformFee\n    ) external onlyAuthorized {\n        require(isRegisteredCoin[coin], \"Coin not registered on platform\");\n\n        CoinMetrics storage metrics = coinMetrics[coin];\n        metrics.totalCreatorFees += creatorFee;\n        metrics.totalPlatformFees += platformFee;\n        metrics.lastUpdated = block.timestamp;\n\n        totalCreatorFeesEarned += creatorFee;\n        totalPlatformFeesEarned += platformFee;\n\n        // Track creator's total fees across all their coins\n        address creator = getCoinCreator(coin);\n        if (creator != address(0)) {\n            creatorTotalFees[creator] += creatorFee;\n        }\n\n        emit FeesRecorded(\n            coin,\n            trader,\n            creatorFee,\n            platformFee,\n            block.timestamp\n        );\n    }\n\n    function updateMarketCap(\n        address coin,\n        uint256 marketCap\n    ) external onlyAuthorized {\n        require(isRegisteredCoin[coin], \"Coin not registered on platform\");\n\n        CoinMetrics storage metrics = coinMetrics[coin];\n        metrics.currentMarketCap = marketCap;\n        metrics.lastUpdated = block.timestamp;\n\n        emit MarketCapUpdated(\n            coin,\n            marketCap,\n            block.timestamp\n        );\n    }\n\n    function getCoinCreator(address coin) public view returns (address) {\n        for (uint256 i = 0; i < activities.length; i++) {\n            if (activities[i].coinAddress == coin) {\n                return activities[i].creator;\n            }\n        }\n        return address(0);\n    }\n\n    function getCoinMetrics(address coin) external view returns (\n        uint256 totalCreatorFees,\n        uint256 totalPlatformFees,\n        uint256 currentMarketCap,\n        uint256 totalVolume,\n        uint256 tradeCount,\n        uint256 lastUpdated\n    ) {\n        CoinMetrics memory metrics = coinMetrics[coin];\n        return (\n            metrics.totalCreatorFees,\n            metrics.totalPlatformFees,\n            metrics.currentMarketCap,\n            metrics.totalVolume,\n            metrics.tradeCount,\n            metrics.lastUpdated\n        );\n    }\n\n    function getPlatformStats() external view returns (\n        uint256 totalCoins,\n        uint256 totalPlatformFees,\n        uint256 totalCreatorFees,\n        uint256 totalVolume,\n        uint256 totalCreators\n    ) {\n        return (\n            totalCoinsCreated,\n            totalPlatformFeesEarned,\n            totalCreatorFeesEarned,\n            totalTradingVolume,\n            getUniqueCreatorsCount()\n        );\n    }\n\n    function getCreatorStats(address creator) external view returns (\n        uint256 coinsCreated,\n        uint256 totalFeesEarned\n    ) {\n        return (\n            creatorActivities[creator].length,\n            creatorTotalFees[creator]\n        );\n    }\n\n    function getUniqueCreatorsCount() public view returns (uint256) {\n        uint256 count = 0;\n        address[] memory seenCreators = new address[](totalCoinsCreated);\n\n        for (uint256 i = 0; i < activities.length; i++) {\n            address creator = activities[i].creator;\n            bool seen = false;\n\n            for (uint256 j = 0; j < count; j++) {\n                if (seenCreators[j] == creator) {\n                    seen = true;\n                    break;\n                }\n            }\n\n            if (!seen) {\n                seenCreators[count] = creator;\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    function getAllActivities() external view returns (CoinActivity[] memory) {\n        return activities;\n    }\n\n    function getCreatorActivities(address creator) external view returns (CoinActivity[] memory) {\n        return creatorActivities[creator];\n    }\n\n    function getTotalActivities() external view returns (uint256) {\n        return activities.length;\n    }\n\n    function getActivity(uint256 index) external view returns (CoinActivity memory) {\n        require(index < activities.length, \"Index out of bounds\");\n        return activities[index];\n    }\n\n    function updatePlatformAddress(address newPlatformAddress) external onlyOwner {\n        platformAddress = newPlatformAddress;\n    }\n\n    function isPlatformCoin(address coin) external view returns (bool) {\n        return isRegisteredCoin[coin];\n    }\n}","size_bytes":9473},"ACTIVITY_TRACKER_DEPLOYMENT.md":{"content":"# On-Chain Activity Tracker Deployment Guide\n\nThis guide explains how to deploy the CoinIT Activity Tracker contract to Base mainnet for on-chain grant verification.\n\n## Overview\n\nThe Activity Tracker contract records all coin creation activities on-chain, making it verifiable by grant judges and the community. Every time a coin is created through your platform, it's automatically recorded on the blockchain with:\n\n- Creator address\n- Coin address\n- Content URL\n- Coin name and symbol\n- Timestamp\n- Unique activity ID\n\n## Prerequisites\n\n1. **Wallet with ETH on Base**: You need at least 0.0003 ETH on Base mainnet for deployment\n2. **Private Key**: The deployer wallet's private key\n3. **Basescan API Key** (optional): For contract verification\n\n## Step 1: Set Up Environment Variables\n\nAdd these to your Replit Secrets:\n\n```bash\nDEPLOYER_PRIVATE_KEY=your_wallet_private_key_here\nBASESCAN_API_KEY=your_basescan_api_key_here  # Optional, for verification\n```\n\n## Step 2: Deploy the Contract\n\nRun the deployment script:\n\n```bash\nnpm run deploy:tracker\n```\n\nThis will:\n1. Compile the contract\n2. Deploy to Base mainnet\n3. Output the contract address\n4. Provide next steps\n\n## Step 3: Save the Contract Address\n\nAfter deployment, you'll see output like:\n\n```\n✅ Contract deployed successfully!\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n📍 Contract Address: 0x1234567890abcdef...\n🔗 View on Basescan: https://basescan.org/address/0x1234...\n```\n\n**Add the contract address to Replit Secrets:**\n\n```bash\nVITE_ACTIVITY_TRACKER_ADDRESS=0x1234567890abcdef...\n```\n\n## Step 4: Verify the Contract (Optional)\n\nTo verify on Basescan for better transparency:\n\n```bash\nnpm run verify:tracker 0x1234567890abcdef...\n```\n\nReplace with your actual contract address.\n\n## Step 5: Test the Integration\n\n1. Create a test coin through your platform\n2. Check that the transaction includes the tracker contract call\n3. View the activity on Basescan:\n   - Go to your tracker contract address\n   - Click \"Read Contract\"\n   - Call `getTotalActivities()` to see total coins\n   - Call `getAllActivities()` to see all recorded coins\n\n## For Grant Judges\n\n### Viewing Platform Activities\n\nGrant judges can verify all platform activities by:\n\n1. **Visit the tracker contract on Basescan:**\n   ```\n   https://basescan.org/address/YOUR_TRACKER_ADDRESS#readContract\n   ```\n\n2. **Query platform statistics:**\n   - `getTotalActivities()` - Total coins created\n   - `getAllActivities()` - All coin creation records\n   - `getActivity(index)` - Specific coin details\n   - `getCreatorActivities(address)` - Coins by specific creator\n\n3. **View events:**\n   - Click \"Events\" tab to see `PlatformCoinCreated` events\n   - Each event shows creator, coin address, content URL, and timestamp\n\n### Verifying On-Chain Activity\n\nAll data is stored permanently on-chain and cannot be modified. Judges can:\n\n- Verify coin creation timestamps\n- See creator attributions\n- Check content URLs\n- Track platform growth over time\n- Confirm all activities are legitimate\n\n## Architecture\n\n```\nUser Creates Coin\n    ↓\nZora Factory Contract\n    ↓\n[During deployment]\n    ↓\nActivity Tracker Hook\n    ↓\nRecord On-Chain\n```\n\nThe tracker uses Zora's `postDeployHook` mechanism to atomically record each coin creation in the same transaction.\n\n## Contract Functions\n\n### For Platform\n\n- `recordCoinCreation()` - Records new coin (called automatically)\n- `recordTradingActivity()` - Records trades (optional)\n\n### For Viewing\n\n- `getTotalActivities()` - Total count\n- `getAllActivities()` - All records\n- `getActivity(index)` - Specific record\n- `getCreatorActivities(address)` - By creator\n- `isPlatformCoin(address)` - Verify coin is from platform\n\n## Security\n\n- Contract is immutable once deployed\n- Only platform address can record activities\n- All data is publicly visible\n- Cannot be modified or deleted\n- Verified on Basescan for transparency\n\n## Troubleshooting\n\n### Deployment fails\n- Check you have enough ETH (need ~0.0003 ETH)\n- Verify private key is correct\n- Ensure you're on Base mainnet\n\n### Coins not being tracked\n- Verify `VITE_ACTIVITY_TRACKER_ADDRESS` is set\n- Check contract is deployed on same chain (Base)\n- Restart the application after setting env var\n\n### Can't view on Basescan\n- Wait a few minutes for indexing\n- Try refreshing the page\n- Verify contract address is correct\n\n## Support\n\nFor issues or questions, check:\n- Basescan contract page for transaction history\n- Contract events for recorded activities\n- Platform logs for deployment details\n","size_bytes":4604},"client/src/pages/AdminMetrics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, Activity, TrendingUp, Users, Coins, DollarSign, Wallet } from \"lucide-react\";\nimport { formatEther } from \"viem\";\n\nconst ACTIVITY_TRACKER_ADDRESS = import.meta.env.VITE_ACTIVITY_TRACKER_ADDRESS;\n\nexport default function AdminMetrics() {\n  const { data: platformStats, isLoading: loadingPlatform } = useQuery({\n    queryKey: ['/api/blockchain/platform-stats'],\n    enabled: !!ACTIVITY_TRACKER_ADDRESS\n  });\n\n  if (!ACTIVITY_TRACKER_ADDRESS) {\n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <Card className=\"border-yellow-500\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              On-Chain Activity Tracker Not Configured\n            </CardTitle>\n            <CardDescription>\n              Deploy the activity tracker contract to enable on-chain metrics\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                To enable on-chain activity tracking for grant verification:\n              </p>\n              <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                <li>Set deployer private key in Replit Secrets: <code className=\"bg-muted px-2 py-1 rounded\">DEPLOYER_PRIVATE_KEY</code></li>\n                <li>Deploy the tracker contract: <code className=\"bg-muted px-2 py-1 rounded\">npm run deploy:tracker</code></li>\n                <li>Add contract address to Replit Secrets: <code className=\"bg-muted px-2 py-1 rounded\">VITE_ACTIVITY_TRACKER_ADDRESS</code></li>\n                <li>Restart the application</li>\n              </ol>\n              <Button asChild data-testid=\"link-deployment-guide\">\n                <a href=\"https://docs.zora.co/coins\" target=\"_blank\">\n                  View Zora Docs <ExternalLink className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const totalCoins = platformStats?.totalCoins ? Number(platformStats.totalCoins) : 0;\n  const totalPlatformFees = platformStats?.totalPlatformFees ? formatEther(BigInt(platformStats.totalPlatformFees)) : \"0\";\n  const totalCreatorFees = platformStats?.totalCreatorFees ? formatEther(BigInt(platformStats.totalCreatorFees)) : \"0\";\n  const totalVolume = platformStats?.totalVolume ? formatEther(BigInt(platformStats.totalVolume)) : \"0\";\n  const totalCreators = platformStats?.totalCreators ? Number(platformStats.totalCreators) : 0;\n\n  const totalFeesEarned = (parseFloat(totalPlatformFees) + parseFloat(totalCreatorFees)).toFixed(4);\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">On-Chain Platform Metrics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Verifiable on-chain activity for grant judges\n          </p>\n        </div>\n        <Button asChild variant=\"outline\" data-testid=\"button-view-contract\">\n          <a \n            href={`https://basescan.org/address/${ACTIVITY_TRACKER_ADDRESS}#readContract`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View Contract <ExternalLink className=\"ml-2 h-4 w-4\" />\n          </a>\n        </Button>\n      </div>\n\n      {/* Main Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card data-testid=\"card-total-coins\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Coins className=\"h-4 w-4 text-blue-500\" />\n              Total Coins Created\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-total-coins\">\n              {loadingPlatform ? '...' : totalCoins}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-unique-creators\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Users className=\"h-4 w-4 text-purple-500\" />\n              Unique Creators\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-unique-creators\">\n              {loadingPlatform ? '...' : totalCreators}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-volume\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              Total Volume\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-volume\">\n              {loadingPlatform ? '...' : `${parseFloat(totalVolume).toFixed(4)} ETH`}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-contract-status\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Activity className=\"h-4 w-4 text-orange-500\" />\n              Contract Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Badge variant=\"default\" className=\"bg-green-500\" data-testid=\"badge-status\">\n              Active on Base\n            </Badge>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fee Earnings Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card data-testid=\"card-platform-fees\" className=\"bg-gradient-to-br from-blue-500/10 to-blue-600/10\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Wallet className=\"h-4 w-4 text-blue-500\" />\n              Platform Fees Earned\n            </CardTitle>\n            <CardDescription>20% of all trading fees</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-platform-fees\">\n              {loadingPlatform ? '...' : `${parseFloat(totalPlatformFees).toFixed(6)} ETH`}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-creator-fees\" className=\"bg-gradient-to-br from-purple-500/10 to-purple-600/10\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4 text-purple-500\" />\n              Creator Fees Earned\n            </CardTitle>\n            <CardDescription>Distributed to coin creators</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\" data-testid=\"text-creator-fees\">\n              {loadingPlatform ? '...' : `${parseFloat(totalCreatorFees).toFixed(6)} ETH`}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-fees\" className=\"bg-gradient-to-br from-green-500/10 to-green-600/10\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              Total Fees Generated\n            </CardTitle>\n            <CardDescription>All platform activity fees</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-total-fees\">\n              {loadingPlatform ? '...' : `${totalFeesEarned} ETH`}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Information Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"bg-muted/50\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">On-Chain Verification</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm space-y-2\">\n            <p>All platform metrics are permanently recorded on-chain:</p>\n            <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n              <li>✅ Coin creation tracking</li>\n              <li>✅ Creator fee distribution</li>\n              <li>✅ Platform fee earnings</li>\n              <li>✅ Trading volume tracking</li>\n              <li>✅ Market cap updates</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-muted/50\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">For Grant Judges</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm space-y-2\">\n            <p>Verify all platform activities on Base blockchain:</p>\n            <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n              <li>Contract: <code className=\"bg-background px-2 py-1 rounded text-xs\">{ACTIVITY_TRACKER_ADDRESS?.slice(0, 10)}...</code></li>\n              <li>Network: Base (Chain ID: 8453)</li>\n              <li>\n                <a \n                  href={`https://basescan.org/address/${ACTIVITY_TRACKER_ADDRESS}#readContract`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-primary hover:underline inline-flex items-center gap-1\"\n                >\n                  View on Basescan <ExternalLink className=\"h-3 w-3\" />\n                </a>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Key Metrics Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Platform Performance Summary</CardTitle>\n          <CardDescription>\n            Comprehensive on-chain metrics for grant verification\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Coins Deployed:</span>\n                  <span className=\"font-semibold\">{totalCoins}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Active Creators:</span>\n                  <span className=\"font-semibold\">{totalCreators}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Trading Volume:</span>\n                  <span className=\"font-semibold\">{parseFloat(totalVolume).toFixed(4)} ETH</span>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Platform Revenue:</span>\n                  <span className=\"font-semibold text-blue-600 dark:text-blue-400\">{parseFloat(totalPlatformFees).toFixed(6)} ETH</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Creator Earnings:</span>\n                  <span className=\"font-semibold text-purple-600 dark:text-purple-400\">{parseFloat(totalCreatorFees).toFixed(6)} ETH</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Fees:</span>\n                  <span className=\"font-semibold text-green-600 dark:text-green-400\">{totalFeesEarned} ETH</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-xs text-muted-foreground\">\n                📊 All data is verifiable on-chain via the youbuidlevery1 contract on Base mainnet\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12592},"scripts/verify-activity-tracker.js":{"content":"import { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nasync function verifyContract() {\n  const contractAddress = process.argv[2];\n  \n  if (!contractAddress) {\n    console.error(\"❌ Please provide contract address as argument\");\n    console.log(\"Usage: npm run verify:tracker <CONTRACT_ADDRESS>\");\n    process.exit(1);\n  }\n\n  console.log(\"🔍 Verifying youbuidlevery1 contract on Basescan...\\n\");\n  console.log(\"📍 Contract:\", contractAddress);\n\n  const BASESCAN_API_KEY = process.env.BASESCAN_API_KEY;\n  if (!BASESCAN_API_KEY) {\n    throw new Error(\"BASESCAN_API_KEY environment variable not set\");\n  }\n\n  const contractPath = join(__dirname, '../contracts/youbuidlevery1.sol');\n  const sourceCode = readFileSync(contractPath, 'utf8');\n\n  // Get the platform address used in constructor\n  const platformAddress = process.env.DEPLOYER_PRIVATE_KEY ? \n    await getAddressFromPrivateKey(process.env.DEPLOYER_PRIVATE_KEY) : \n    contractAddress; // fallback to contract address if no key\n\n  console.log(\"🏢 Platform address:\", platformAddress);\n\n  // Encode constructor arguments (address parameter)\n  const constructorArgs = platformAddress.toLowerCase().replace('0x', '').padStart(64, '0');\n\n  const queryParams = new URLSearchParams({\n    chainid: '8453',\n    module: 'contract',\n    action: 'verifysourcecode',\n    apikey: BASESCAN_API_KEY\n  });\n\n  const formData = new URLSearchParams();\n  formData.append('contractaddress', contractAddress);\n  formData.append('sourceCode', sourceCode);\n  formData.append('codeformat', 'solidity-single-file');\n  formData.append('contractname', 'youbuidlevery1');\n  formData.append('compilerversion', 'v0.8.30+commit.73712a01');\n  formData.append('optimizationUsed', '1');\n  formData.append('runs', '200');\n  formData.append('constructorArguements', constructorArgs);\n  formData.append('evmversion', 'cancun');\n  formData.append('licenseType', '3'); // MIT License\n\n  console.log(\"📤 Submitting verification request...\\n\");\n\n  const response = await fetch(`https://api.etherscan.io/v2/api?${queryParams}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData.toString()\n  });\n\n  const result = await response.json();\n\n  if (result.status === '1') {\n    const guid = result.result;\n    console.log(\"✅ Verification submitted successfully!\");\n    console.log(\"📝 GUID:\", guid);\n    console.log(\"\\n⏳ Checking verification status in 10 seconds...\\n\");\n\n    await new Promise(resolve => setTimeout(resolve, 10000));\n\n    const statusParams = new URLSearchParams({\n      chainid: '8453',\n      apikey: BASESCAN_API_KEY,\n      module: 'contract',\n      action: 'checkverifystatus',\n      guid: guid\n    });\n\n    const statusResponse = await fetch(`https://api.etherscan.io/v2/api?${statusParams}`);\n    const statusResult = await statusResponse.json();\n\n    if (statusResult.status === '1') {\n      console.log(\"✅ Contract verified successfully!\\n\");\n      console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\n      console.log(\"🔗 View verified contract:\");\n      console.log(`   https://basescan.org/address/${contractAddress}#code`);\n      console.log(\"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\");\n    } else {\n      console.log(\"⏳ Verification pending...\");\n      console.log(\"   Status:\", statusResult.result);\n      console.log(\"\\n💡 Check status manually at:\");\n      console.log(`   https://basescan.org/address/${contractAddress}#code`);\n    }\n  } else {\n    console.error(\"❌ Verification failed:\");\n    console.error(\"   Message:\", result.message);\n    console.error(\"   Result:\", result.result);\n    \n    if (result.result && result.result.includes(\"already verified\")) {\n      console.log(\"\\n✅ Contract is already verified!\");\n      console.log(\"🔗 View at: https://basescan.org/address/\" + contractAddress + \"#code\");\n    }\n  }\n}\n\nasync function getAddressFromPrivateKey(privateKey) {\n  const { privateKeyToAccount } = await import('viem/accounts');\n  const account = privateKeyToAccount(privateKey);\n  return account.address;\n}\n\nverifyContract()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"\\n❌ Verification error:\", error.message);\n    process.exit(1);\n  });\n","size_bytes":4539},"client/src/lib/og-meta.ts":{"content":"\nexport function updateOGMeta(data: {\n  title: string;\n  description: string;\n  image?: string;\n  url?: string;\n}) {\n  // Update title\n  document.title = data.title;\n  \n  // Update OG tags\n  const setMetaTag = (property: string, content: string) => {\n    let tag = document.querySelector(`meta[property=\"${property}\"]`) as HTMLMetaElement;\n    if (!tag) {\n      tag = document.createElement('meta');\n      tag.setAttribute('property', property);\n      document.head.appendChild(tag);\n    }\n    tag.content = content;\n  };\n\n  setMetaTag('og:title', data.title);\n  setMetaTag('og:description', data.description);\n  setMetaTag('twitter:title', data.title);\n  setMetaTag('twitter:description', data.description);\n  \n  if (data.image) {\n    setMetaTag('og:image', data.image);\n    setMetaTag('twitter:image', data.image);\n  }\n  \n  if (data.url) {\n    setMetaTag('og:url', data.url);\n    setMetaTag('twitter:url', data.url);\n  }\n}\n","size_bytes":925},"server/activity-tracker.ts":{"content":"import { createPublicClient, createWalletClient, http, parseEther, type Address } from \"viem\";\nimport { base } from \"viem/chains\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\n// Activity Tracker Contract ABI\nconst ACTIVITY_TRACKER_ABI = [\n  {\n    name: \"recordFees\",\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"trader\", type: \"address\" },\n      { name: \"creatorFee\", type: \"uint256\" },\n      { name: \"platformFee\", type: \"uint256\" }\n    ],\n    outputs: []\n  },\n  {\n    name: \"updateMarketCap\",\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"marketCap\", type: \"uint256\" }\n    ],\n    outputs: []\n  },\n  {\n    name: \"recordTradingActivity\",\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"trader\", type: \"address\" },\n      { name: \"activityType\", type: \"string\" },\n      { name: \"amount\", type: \"uint256\" }\n    ],\n    outputs: []\n  },\n  {\n    name: \"getCoinMetrics\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [\n      { name: \"coin\", type: \"address\" }\n    ],\n    outputs: [\n      { name: \"totalCreatorFees\", type: \"uint256\" },\n      { name: \"totalPlatformFees\", type: \"uint256\" },\n      { name: \"currentMarketCap\", type: \"uint256\" },\n      { name: \"totalVolume\", type: \"uint256\" },\n      { name: \"tradeCount\", type: \"uint256\" },\n      { name: \"lastUpdated\", type: \"uint256\" }\n    ]\n  },\n  {\n    name: \"getPlatformStats\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [\n      { name: \"totalCoins\", type: \"uint256\" },\n      { name: \"totalPlatformFees\", type: \"uint256\" },\n      { name: \"totalCreatorFees\", type: \"uint256\" },\n      { name: \"totalVolume\", type: \"uint256\" },\n      { name: \"totalCreators\", type: \"uint256\" }\n    ]\n  },\n  {\n    name: \"getCreatorStats\",\n    type: \"function\",\n    stateMutability: \"view\",\n    inputs: [\n      { name: \"creator\", type: \"address\" }\n    ],\n    outputs: [\n      { name: \"coinsCreated\", type: \"uint256\" },\n      { name: \"totalFeesEarned\", type: \"uint256\" }\n    ]\n  },\n  {\n    name: \"recordCoinCreation\",\n    type: \"function\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"creator\", type: \"address\" },\n      { name: \"contentUrl\", type: \"string\" },\n      { name: \"name\", type: \"string\" },\n      { name: \"symbol\", type: \"string\" }\n    ],\n    outputs: []\n  },\n  {\n    name: \"CoinCreated\",\n    type: \"event\",\n    inputs: [\n      { name: \"coin\", type: \"address\", indexed: true },\n      { name: \"creator\", type: \"address\", indexed: true },\n      { name: \"contentUrl\", type: \"string\", indexed: false },\n      { name: \"name\", type: \"string\", indexed: false },\n      { name: \"symbol\", type: \"string\", indexed: false },\n      { name: \"timestamp\", type: \"uint256\", indexed: false },\n      { name: \"activityId\", type: \"uint256\", indexed: false }\n    ]\n  },\n  {\n    name: \"ActivityRecorded\",\n    type: \"event\",\n    inputs: [\n      { name: \"coin\", type: \"address\", indexed: true },\n      { name: \"creator\", type: \"address\", indexed: true },\n      { name: \"activityId\", type: \"uint256\", indexed: false },\n      { name: \"timestamp\", type: \"uint256\", indexed: false }\n    ]\n  },\n] as const;\n\nexport class ActivityTrackerService {\n  private activityTrackerAddress: Address | undefined;\n  private publicClient: any;\n  private walletClient: any;\n  private account: any;\n\n  constructor() {\n    this.activityTrackerAddress = process.env.VITE_ACTIVITY_TRACKER_ADDRESS as Address | undefined;\n\n    if (!this.activityTrackerAddress) {\n      console.warn(\"⚠️ Activity tracker not configured - on-chain fee tracking disabled\");\n      return;\n    }\n\n    // Setup clients\n    const alchemyApiKey = process.env.VITE_ALCHEMY_API_KEY || \"o3VW3WRXrsXXMRX3l7jZxLUqhWyZzXBy\";\n    const rpcUrl = `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;\n\n    this.publicClient = createPublicClient({\n      chain: base,\n      transport: http(rpcUrl),\n    });\n\n    // Setup wallet client if private key is available\n    const privateKey = process.env.DEPLOYER_PRIVATE_KEY || process.env.PLATFORM_PRIVATE_KEY;\n    if (privateKey) {\n      this.account = privateKeyToAccount(privateKey as `0x${string}`);\n      this.walletClient = createWalletClient({\n        account: this.account,\n        chain: base,\n        transport: http(rpcUrl),\n      });\n      console.log(\"✅ Activity Tracker service initialized with wallet:\", this.account.address);\n    } else {\n      console.warn(\"⚠️ No private key configured - on-chain recording will be disabled\");\n    }\n  }\n\n  async recordFees(\n    coinAddress: Address,\n    traderAddress: Address,\n    creatorFee: bigint,\n    platformFee: bigint\n  ): Promise<string | null> {\n    if (!this.activityTrackerAddress || !this.walletClient) {\n      console.warn(\"Activity tracker not configured, skipping on-chain fee recording\");\n      return null;\n    }\n\n    try {\n      console.log(\"📊 Recording fees on-chain:\", {\n        coin: coinAddress,\n        trader: traderAddress,\n        creatorFee: creatorFee.toString(),\n        platformFee: platformFee.toString()\n      });\n\n      const hash = await this.walletClient.writeContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"recordFees\",\n        args: [coinAddress, traderAddress, creatorFee, platformFee],\n      });\n\n      console.log(\"✅ Fees recorded on-chain! TX:\", hash);\n      return hash;\n    } catch (error) {\n      console.error(\"❌ Failed to record fees on-chain:\", error);\n      return null;\n    }\n  }\n\n  async updateMarketCap(\n    coinAddress: Address,\n    marketCap: bigint\n  ): Promise<string | null> {\n    if (!this.activityTrackerAddress || !this.walletClient) {\n      console.warn(\"Activity tracker not configured, skipping market cap update\");\n      return null;\n    }\n\n    try {\n      console.log(\"💰 Updating market cap on-chain:\", {\n        coin: coinAddress,\n        marketCap: marketCap.toString()\n      });\n\n      const hash = await this.walletClient.writeContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"updateMarketCap\",\n        args: [coinAddress, marketCap],\n      });\n\n      console.log(\"✅ Market cap updated on-chain! TX:\", hash);\n      return hash;\n    } catch (error) {\n      console.error(\"❌ Failed to update market cap on-chain:\", error);\n      return null;\n    }\n  }\n\n  async recordTradingActivity(\n    coinAddress: Address,\n    traderAddress: Address,\n    activityType: string,\n    amount: bigint\n  ): Promise<string | null> {\n    if (!this.activityTrackerAddress || !this.walletClient) {\n      console.warn(\"Activity tracker not configured, skipping trading activity\");\n      return null;\n    }\n\n    try {\n      const hash = await this.walletClient.writeContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"recordTradingActivity\",\n        args: [coinAddress, traderAddress, activityType, amount],\n      });\n\n      console.log(\"✅ Trading activity recorded on-chain! TX:\", hash);\n      return hash;\n    } catch (error) {\n      console.error(\"❌ Failed to record trading activity on-chain:\", error);\n      return null;\n    }\n  }\n\n  async getCoinMetrics(coinAddress: Address) {\n    if (!this.activityTrackerAddress || !this.publicClient) {\n      return null;\n    }\n\n    try {\n      const result = await this.publicClient.readContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"getCoinMetrics\",\n        args: [coinAddress],\n      }) as [bigint, bigint, bigint, bigint, bigint, bigint];\n\n      return {\n        totalCreatorFees: result[0],\n        totalPlatformFees: result[1],\n        currentMarketCap: result[2],\n        totalVolume: result[3],\n        tradeCount: result[4],\n        lastUpdated: result[5]\n      };\n    } catch (error) {\n      console.error(\"❌ Failed to get coin metrics:\", error);\n      return null;\n    }\n  }\n\n  async getPlatformStats() {\n    if (!this.activityTrackerAddress || !this.publicClient) {\n      return null;\n    }\n\n    try {\n      const result = await this.publicClient.readContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"getPlatformStats\",\n        args: [],\n      }) as [bigint, bigint, bigint, bigint, bigint];\n\n      return {\n        totalCoins: result[0],\n        totalPlatformFees: result[1],\n        totalCreatorFees: result[2],\n        totalVolume: result[3],\n        totalCreators: result[4]\n      };\n    } catch (error) {\n      console.error(\"❌ Failed to get platform stats:\", error);\n      return null;\n    }\n  }\n\n  async getCreatorStats(creatorAddress: Address) {\n    if (!this.activityTrackerAddress || !this.publicClient) {\n      return null;\n    }\n\n    try {\n      const result = await this.publicClient.readContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"getCreatorStats\",\n        args: [creatorAddress],\n      }) as [bigint, bigint];\n\n      return {\n        coinsCreated: result[0],\n        totalFeesEarned: result[1]\n      };\n    } catch (error) {\n      console.error(\"❌ Failed to get creator stats:\", error);\n      return null;\n    }\n  }\n\n  async recordCoinCreation(\n    coinAddress: Address,\n    creatorAddress: Address,\n    contentUrl: string,\n    name: string,\n    symbol: string\n  ): Promise<string | null> {\n    if (!this.activityTrackerAddress || !this.walletClient) {\n      console.warn(\"Activity tracker not configured, skipping on-chain recording\");\n      return null;\n    }\n\n    try {\n      console.log(\"📊 Recording coin creation on-chain:\", {\n        coin: coinAddress,\n        creator: creatorAddress,\n        name,\n        symbol,\n        contentUrl\n      });\n\n      const hash = await this.walletClient.writeContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"recordCoinCreation\",\n        args: [coinAddress, creatorAddress, contentUrl, name, symbol],\n      });\n\n      console.log(\"✅ Coin creation recorded on-chain! TX:\", hash);\n\n      // Wait for transaction receipt to confirm\n      const receipt = await this.publicClient.waitForTransactionReceipt({ \n        hash,\n        confirmations: 1\n      });\n\n      console.log(\"✅ Transaction confirmed! Block:\", receipt.blockNumber);\n\n      // Get the activity ID from the event logs\n      if (receipt.logs && receipt.logs.length > 0) {\n        console.log(\"📝 Event logs:\", receipt.logs.length, \"events emitted\");\n        receipt.logs.forEach((log, index) => {\n          console.log(`Event ${index}:`, {\n            address: log.address,\n            topics: log.topics,\n            data: log.data\n          });\n        });\n      }\n\n      return hash;\n    } catch (error) {\n      console.error(\"❌ Failed to record coin creation on-chain:\", error);\n      return null;\n    }\n  }\n\n  async getTotalActivities() {\n    if (!this.activityTrackerAddress || !this.publicClient) {\n      return 0;\n    }\n\n    try {\n      const result = await this.publicClient.readContract({\n        address: this.activityTrackerAddress,\n        abi: ACTIVITY_TRACKER_ABI,\n        functionName: \"getTotalActivities\",\n        args: [],\n      }) as bigint;\n\n      return Number(result);\n    } catch (error) {\n      console.error(\"❌ Failed to get total activities:\", error);\n      return 0;\n    }\n  }\n\n  async getActivityEvents(fromBlock: bigint = 0n) {\n    if (!this.activityTrackerAddress || !this.publicClient) {\n      return [];\n    }\n\n    try {\n      const logs = await this.publicClient.getLogs({\n        address: this.activityTrackerAddress,\n        event: {\n          type: 'event',\n          name: 'CoinCreated',\n          inputs: [\n            { name: \"coin\", type: \"address\", indexed: true },\n            { name: \"creator\", type: \"address\", indexed: true },\n            { name: \"contentUrl\", type: \"string\", indexed: false },\n            { name: \"name\", type: \"string\", indexed: false },\n            { name: \"symbol\", type: \"string\", indexed: false },\n            { name: \"timestamp\", type: \"uint256\", indexed: false },\n            { name: \"activityId\", type: \"uint256\", indexed: false }\n          ]\n        },\n        fromBlock,\n        toBlock: 'latest'\n      });\n\n      console.log(`📊 Found ${logs.length} CoinCreated events from block ${fromBlock}`);\n      return logs;\n    } catch (error) {\n      console.error(\"❌ Failed to get activity events:\", error);\n      return [];\n    }\n  }\n}\n\nexport const activityTrackerService = new ActivityTrackerService();","size_bytes":12811},"DEPLOYMENT_GUIDE.md":{"content":"# CoinIT Platform - Complete Deployment Guide\n\n## Overview\nThis guide covers deploying the enhanced CoinIT platform with comprehensive on-chain activity tracking for grant verification.\n\n## Prerequisites\n\n### Required Environment Variables (Replit Secrets)\n\n1. **DEPLOYER_PRIVATE_KEY** (Required for contract deployment)\n   - Your wallet private key (with ETH on Base for gas)\n   - Format: `0x...`\n   - Minimum balance: 0.001 ETH on Base mainnet\n\n2. **BASESCAN_API_KEY** (Optional, for contract verification)\n   - Get from: https://basescan.org/myapikey\n   - Used for verifying contract source code\n\n3. **VITE_ACTIVITY_TRACKER_ADDRESS** (Required after deployment)\n   - The deployed contract address\n   - Will be provided after Step 2\n\n4. **Existing Required Secrets**\n   - VITE_PINATA_JWT\n   - VITE_ALCHEMY_API_KEY\n   - VITE_NEXT_PUBLIC_ZORA_API_KEY\n\n## Step-by-Step Deployment\n\n### Step 1: Set Up Deployment Wallet\n\n1. Add your wallet private key to Replit Secrets:\n   ```\n   DEPLOYER_PRIVATE_KEY=0xyour_private_key_here\n   ```\n\n2. Ensure your wallet has ETH on Base:\n   - Minimum: 0.001 ETH\n   - Recommended: 0.005 ETH (for deployment + verification)\n\n3. (Optional) Add Basescan API key for contract verification:\n   ```\n   BASESCAN_API_KEY=your_basescan_api_key\n   ```\n\n### Step 2: Deploy Activity Tracker Contract\n\nRun the deployment script:\n```bash\nnpm run deploy:tracker\n```\n\nThe script will:\n- Compile the youbuidlevery1 contract\n- Deploy it to Base mainnet\n- Display the deployed contract address\n- Show the transaction hash\n\n**Save the contract address!** You'll need it for the next step.\n\nExample output:\n```\n✅ Contract deployed successfully!\n📝 Contract address: 0x1234567890abcdef...\n🔗 Transaction: 0xabcdef1234567890...\n```\n\n### Step 3: Configure Contract Address\n\nAdd the deployed contract address to Replit Secrets:\n```\nVITE_ACTIVITY_TRACKER_ADDRESS=0x_your_deployed_contract_address\n```\n\n### Step 4: Verify Contract (Optional but Recommended)\n\nVerify the contract on Basescan for transparency:\n```bash\nnpm run verify:tracker <contract_address>\n```\n\nThis makes the contract source code publicly visible for grant judges.\n\n### Step 5: Deploy to Replit\n\nThe application is already configured for deployment:\n\n1. **Build Command**: `npm run build`\n2. **Run Command**: `npm run start`\n3. **Deployment Type**: Autoscale (pre-configured)\n\n**To Deploy:**\n1. Click the **\"Deploy\"** button in Replit header\n2. Select **\"Autoscale\"** deployment type\n3. Click **\"Deploy\"**\n4. Wait for build to complete\n\nYour app will be live at: `https://your-repl-name.replit.app`\n\n### Step 6: Verify On-Chain Tracking\n\n1. Visit your deployed app at `/admin/metrics`\n2. Verify the contract status shows \"Active\"\n3. Create a test coin to generate on-chain activity\n4. Check Basescan to verify the transaction\n\n**Contract Verification URL:**\n```\nhttps://basescan.org/address/<YOUR_CONTRACT_ADDRESS>#readContract\n```\n\n## Enhanced Features\n\n### 📊 Comprehensive Metrics Tracked\n\nThe youbuidlevery1 contract tracks:\n\n1. **Platform Fees Earned** (20% of all trading fees)\n2. **Creator Fees Earned** (distributed to coin creators)\n3. **Market Cap** (updated per coin)\n4. **Trading Volume** (total platform volume)\n5. **Unique Creators** (number of platform creators)\n6. **Total Coins Created** (all-time count)\n\n### 🔍 Grant Verification\n\nGrant judges can verify all activity on-chain:\n\n1. **View Contract on Basescan:**\n   ```\n   https://basescan.org/address/<CONTRACT_ADDRESS>#readContract\n   ```\n\n2. **Call Read Functions:**\n   - `getPlatformStats()` - Total platform metrics\n   - `getCoinMetrics(address)` - Specific coin metrics\n   - `getCreatorStats(address)` - Creator-specific stats\n   - `getAllActivities()` - All coin creations\n\n3. **View Events:**\n   - `PlatformCoinCreated` - Coin deployments\n   - `FeesRecorded` - Fee distributions\n   - `MarketCapUpdated` - Market cap changes\n\n### 📈 Admin Dashboard\n\nAccess comprehensive metrics at: `/admin/metrics`\n\nDisplays:\n- Total coins created\n- Unique creators count\n- Platform fees earned (in ETH)\n- Creator fees earned (in ETH)\n- Total trading volume\n- Live blockchain data\n\n## Troubleshooting\n\n### Contract Deployment Issues\n\n**Error: Insufficient balance**\n- Ensure wallet has at least 0.001 ETH on Base\n- Check balance: https://basescan.org/address/your_wallet\n\n**Error: DEPLOYER_PRIVATE_KEY not set**\n- Add private key to Replit Secrets\n- Ensure it starts with `0x`\n\n**Error: Compilation failed**\n- Ensure solc is installed: `npm list solc`\n- Check contract syntax in `contracts/youbuidlevery1.sol`\n\n### Dashboard Issues\n\n**Contract not configured message**\n- Ensure `VITE_ACTIVITY_TRACKER_ADDRESS` is set in Secrets\n- Restart the application after adding the secret\n\n**Metrics showing zero**\n- Contract may not have any activity yet\n- Create test coins to generate data\n- Verify contract address is correct\n\n**404 errors on metrics endpoints**\n- Ensure application is running\n- Check server logs for errors\n- Verify `/api/blockchain/platform-stats` endpoint exists\n\n### Deployment Issues\n\n**Build fails**\n- Run `npm run build` locally first\n- Check for TypeScript errors: `npm run check`\n- Review build logs in Replit console\n\n**App doesn't start**\n- Verify all required secrets are set\n- Check start script in package.json\n- Review server logs for errors\n\n## For Grant Judges\n\n### Verifying Platform Activity\n\nAll platform metrics are permanently on-chain and verifiable:\n\n1. **Access Contract:**\n   - Network: Base (8453)\n   - Contract: `<VITE_ACTIVITY_TRACKER_ADDRESS>`\n   - Explorer: https://basescan.org\n\n2. **Read Platform Stats:**\n   ```solidity\n   function getPlatformStats() returns (\n     uint256 totalCoins,\n     uint256 totalPlatformFees,\n     uint256 totalCreatorFees,\n     uint256 totalVolume,\n     uint256 totalCreators\n   )\n   ```\n\n3. **Verify Individual Coins:**\n   ```solidity\n   function getCoinMetrics(address coin) returns (\n     uint256 totalCreatorFees,\n     uint256 totalPlatformFees,\n     uint256 currentMarketCap,\n     uint256 totalVolume,\n     uint256 tradeCount,\n     uint256 lastUpdated\n   )\n   ```\n\n4. **All Data is:**\n   - ✅ Permanently on-chain\n   - ✅ Publicly verifiable\n   - ✅ Timestamped\n   - ✅ Immutable\n\n## Support\n\nFor issues or questions:\n1. Check this guide first\n2. Review Replit logs for errors\n3. Verify all secrets are configured\n4. Check contract on Basescan\n\n## Next Steps\n\nAfter deployment:\n1. ✅ Monitor `/admin/metrics` dashboard\n2. ✅ Share contract address with grant judges\n3. ✅ Verify on-chain data matches platform activity\n4. ✅ Keep wallet funded for on-chain recording\n\n---\n\n**Congratulations!** Your CoinIT platform is now deployed with full on-chain activity tracking for grant verification! 🚀\n","size_bytes":6728},"client/src/lib/geckoterminal.ts":{"content":"const GECKOTERMINAL_API_BASE = \"https://api.geckoterminal.com/api/v2\";\n\nexport interface GeckoTerminalPool {\n  id: string;\n  type: string;\n  attributes: {\n    address: string;\n    name: string;\n    base_token_price_usd: string;\n    quote_token_price_usd: string;\n    pool_created_at: string;\n    fdv_usd: string;\n    market_cap_usd: string;\n    price_change_percentage: {\n      h1: string;\n      h24: string;\n    };\n    transactions: {\n      h1: {\n        buys: number;\n        sells: number;\n      };\n      h24: {\n        buys: number;\n        sells: number;\n      };\n    };\n    volume_usd: {\n      h1: string;\n      h24: string;\n    };\n    reserve_in_usd: string;\n  };\n  relationships?: {\n    base_token?: { data: { id: string; type: string } };\n    quote_token?: { data: { id: string; type: string } };\n    dex?: { data: { id: string; type: string } };\n  };\n}\n\nexport interface GeckoTerminalOHLCV {\n  data: {\n    id: string;\n    type: string;\n    attributes: {\n      ohlcv_list: Array<[number, number, number, number, number, number]>; // [timestamp, open, high, low, close, volume]\n    };\n  };\n  meta?: {\n    base: {\n      address: string;\n      name: string;\n      symbol: string;\n      coingecko_coin_id: string | null;\n    };\n  };\n}\n\nexport interface GeckoTerminalTokenPools {\n  data: GeckoTerminalPool[];\n  included?: Array<{\n    id: string;\n    type: string;\n    attributes: {\n      address?: string;\n      name?: string;\n      symbol?: string;\n      image_url?: string;\n    };\n  }>;\n}\n\n/**\n * Search for pools by token address\n */\nexport async function getTokenPools(\n  network: string,\n  tokenAddress: string,\n  page = 1\n): Promise<GeckoTerminalTokenPools> {\n  const response = await fetch(\n    `${GECKOTERMINAL_API_BASE}/networks/${network}/tokens/${tokenAddress}/pools?page=${page}`\n  );\n  \n  if (!response.ok) {\n    throw new Error(`GeckoTerminal API error: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Get specific pool data\n */\nexport async function getPool(\n  network: string,\n  poolAddress: string,\n  includeTokens = true\n): Promise<{ data: GeckoTerminalPool; included?: any[] }> {\n  const params = includeTokens ? \"?include=base_token,quote_token\" : \"\";\n  const response = await fetch(\n    `${GECKOTERMINAL_API_BASE}/networks/${network}/pools/${poolAddress}${params}`\n  );\n  \n  if (!response.ok) {\n    throw new Error(`GeckoTerminal API error: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Get OHLCV (candlestick) data for a pool\n */\nexport async function getPoolOHLCV(\n  network: string,\n  poolAddress: string,\n  timeframe: \"day\" | \"hour\" | \"minute\" = \"hour\",\n  aggregate = 1,\n  limit = 100,\n  currency: \"usd\" | \"token\" = \"usd\",\n  token: \"base\" | \"quote\" = \"base\"\n): Promise<GeckoTerminalOHLCV> {\n  const response = await fetch(\n    `${GECKOTERMINAL_API_BASE}/networks/${network}/pools/${poolAddress}/ohlcv/${timeframe}?aggregate=${aggregate}&limit=${limit}&currency=${currency}&token=${token}`\n  );\n  \n  if (!response.ok) {\n    throw new Error(`GeckoTerminal API error: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Get multiple pools data in one call\n */\nexport async function getMultiplePools(\n  network: string,\n  poolAddresses: string[]\n): Promise<{ data: GeckoTerminalPool[] }> {\n  const addresses = poolAddresses.join(\",\");\n  const response = await fetch(\n    `${GECKOTERMINAL_API_BASE}/networks/${network}/pools/multi/${addresses}`\n  );\n  \n  if (!response.ok) {\n    throw new Error(`GeckoTerminal API error: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Search for a pool by token address and return the top pool\n */\nexport async function findTopPoolForToken(\n  network: string,\n  tokenAddress: string\n): Promise<GeckoTerminalPool | null> {\n  try {\n    const result = await getTokenPools(network, tokenAddress, 1);\n    \n    if (result.data && result.data.length > 0) {\n      return result.data[0];\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(\"Error finding pool for token:\", error);\n    return null;\n  }\n}\n\n/**\n * Format OHLCV data for use with recharts\n */\nexport function formatOHLCVForChart(ohlcvData: GeckoTerminalOHLCV): Array<{\n  time: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  timestamp: number;\n}> {\n  if (!ohlcvData.data?.attributes?.ohlcv_list) {\n    return [];\n  }\n\n  return ohlcvData.data.attributes.ohlcv_list\n    .filter((row) => row && row.length === 6)\n    .map(([timestamp, open, high, low, close, volume]) => {\n      const date = new Date(Number(timestamp) * 1000);\n      const timeStr = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      \n      return {\n        time: timeStr,\n        open: parseFloat(Number(open).toFixed(8)),\n        high: parseFloat(Number(high).toFixed(8)),\n        low: parseFloat(Number(low).toFixed(8)),\n        close: parseFloat(Number(close).toFixed(8)),\n        volume: parseFloat(Number(volume).toFixed(2)),\n        timestamp: Number(timestamp),\n      };\n    });\n}\n\n/**\n * Get trending pools for a network\n */\nexport async function getTrendingPools(\n  network: string,\n  page = 1\n): Promise<{ data: GeckoTerminalPool[] }> {\n  const response = await fetch(\n    `${GECKOTERMINAL_API_BASE}/networks/${network}/trending_pools?page=${page}`\n  );\n  \n  if (!response.ok) {\n    throw new Error(`GeckoTerminal API error: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Get recent trades for a pool\n */\nexport async function getPoolTrades(\n  network: string,\n  poolAddress: string\n): Promise<any> {\n  const response = await fetch(\n    `${GECKOTERMINAL_API_BASE}/networks/${network}/pools/${poolAddress}/trades`\n  );\n  \n  if (!response.ok) {\n    throw new Error(`GeckoTerminal API error: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n","size_bytes":5823},"client/src/components/geckoterminal-chart.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface GeckoTerminalChartProps {\n  network?: string;\n  poolAddress?: string;\n  tokenAddress?: string;\n  height?: string;\n  chartType?: \"price\" | \"market_cap\" | \"volume\";\n  resolution?: string;\n  lightChart?: boolean;\n  showInfo?: boolean;\n  showSwaps?: boolean;\n  bgColor?: string;\n  overlayColor?: string;\n}\n\nexport default function GeckoTerminalChart({\n  network = \"base\",\n  poolAddress,\n  tokenAddress,\n  height = \"500px\",\n  chartType = \"price\",\n  resolution = \"1d\",\n  lightChart = false,\n  showInfo = false,\n  showSwaps = false,\n  bgColor = \"111827\",\n  overlayColor = \"8B5CF6\",\n}: GeckoTerminalChartProps) {\n  const [embedUrl, setEmbedUrl] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function findPool() {\n      if (poolAddress) {\n        const url = `https://www.geckoterminal.com/${network}/pools/${poolAddress}?embed=1&info=${showInfo ? 1 : 0}&swaps=${showSwaps ? 1 : 0}&light_chart=${lightChart ? 1 : 0}&chart_type=${chartType}&resolution=${resolution}&bg_color=${bgColor}&overlay_color=${overlayColor}`;\n        console.log('📊 GeckoTerminal: Using pool address', poolAddress);\n        setEmbedUrl(url);\n        setIsLoading(false);\n        return;\n      }\n\n      if (tokenAddress) {\n        try {\n          console.log('📊 GeckoTerminal: Searching for pool for token', tokenAddress);\n          const response = await fetch(\n            `/api/geckoterminal/pools/${network}/${tokenAddress}?page=1`\n          );\n          \n          if (!response.ok) {\n            throw new Error(\"Failed to fetch pool data\");\n          }\n\n          const data = await response.json();\n          console.log('📊 GeckoTerminal: Pool search result', data);\n          \n          if (data.data && data.data.length > 0) {\n            const topPool = data.data[0];\n            const poolAddr = topPool.attributes.address;\n            const url = `https://www.geckoterminal.com/${network}/pools/${poolAddr}?embed=1&info=${showInfo ? 1 : 0}&swaps=${showSwaps ? 1 : 0}&light_chart=${lightChart ? 1 : 0}&chart_type=${chartType}&resolution=${resolution}&bg_color=${bgColor}&overlay_color=${overlayColor}`;\n            console.log('📊 GeckoTerminal: Chart URL generated', url);\n            setEmbedUrl(url);\n            setIsLoading(false);\n          } else {\n            console.warn('📊 GeckoTerminal: No pools found for token');\n            setError(\"No pools found for this token\");\n            setIsLoading(false);\n          }\n        } catch (err) {\n          console.error('📊 GeckoTerminal chart error:', err);\n          setError(err instanceof Error ? err.message : \"Failed to load chart\");\n          setIsLoading(false);\n        }\n      } else {\n        setError(\"Either poolAddress or tokenAddress is required\");\n        setIsLoading(false);\n      }\n    }\n\n    findPool();\n  }, [network, poolAddress, tokenAddress, chartType, resolution, lightChart, showInfo, showSwaps, bgColor, overlayColor]);\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full flex items-center justify-center\" style={{ height }}>\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (error || !embedUrl) {\n    return (\n      <div className=\"w-full flex items-center justify-center text-muted-foreground\" style={{ height }}>\n        {error || \"Unable to load chart\"}\n      </div>\n    );\n  }\n\n  return (\n    <iframe\n      id=\"geckoterminal-embed\"\n      title=\"GeckoTerminal Chart\"\n      src={embedUrl}\n      frameBorder=\"0\"\n      allow=\"clipboard-write\"\n      allowFullScreen\n      className=\"w-full rounded-lg\"\n      style={{ height }}\n      data-testid=\"geckoterminal-chart-iframe\"\n    />\n  );\n}\n","size_bytes":3844},"server/activity-tracker-service.ts":{"content":"import { createPublicClient, createWalletClient, http, Hash } from \"viem\";\nimport { base, baseSepolia } from \"viem/chains\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport type { Coin } from \"@shared/schema\";\n\nconst ACTIVITY_TRACKER_ADDRESS = process.env.VITE_ACTIVITY_TRACKER_ADDRESS || \"0x0000000000000000000000000000000000000000\";\n\nconst ACTIVITY_TRACKER_ABI = [\n  {\n    inputs: [\n      { name: \"coin\", type: \"address\" },\n      { name: \"creator\", type: \"address\" },\n      { name: \"contentUrl\", type: \"string\" },\n      { name: \"coinName\", type: \"string\" },\n      { name: \"coinSymbol\", type: \"string\" },\n      { name: \"createdAtTimestamp\", type: \"uint256\" }\n    ],\n    name: \"recordCoinCreation\",\n    outputs: [{ name: \"activityId\", type: \"bytes32\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"coinAddress\", type: \"address\" }],\n    name: \"isRegisteredCoin\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n] as const;\n\nexport class ActivityTrackerService {\n  private publicClient: any;\n  private walletClient: any;\n  private chainId: number;\n\n  constructor(chainId: number = base.id) {\n    this.chainId = chainId;\n    const chain = chainId === baseSepolia.id ? baseSepolia : base;\n\n    const alchemyApiKey = process.env.VITE_ALCHEMY_API_KEY || \"o3VW3WRXrsXXMRX3l7jZxLUqhWyZzXBy\";\n    const rpcUrl = `https://base-mainnet.g.alchemy.com/v2/${alchemyApiKey}`;\n\n    this.publicClient = createPublicClient({\n      chain,\n      transport: http(rpcUrl),\n    });\n\n    const privateKey = process.env.PLATFORM_PRIVATE_KEY;\n    if (privateKey) {\n      const account = privateKeyToAccount(privateKey as `0x${string}`);\n      this.walletClient = createWalletClient({\n        account,\n        chain,\n        transport: http(rpcUrl),\n      });\n    }\n  }\n\n  async recordCoinBatch(coins: Coin[]): Promise<Map<number, Hash>> {\n    const results = new Map<number, Hash>();\n\n    if (!this.walletClient) {\n      console.error(\"❌ Wallet client not configured. Set PLATFORM_PRIVATE_KEY environment variable.\");\n      return results;\n    }\n\n    if (!ACTIVITY_TRACKER_ADDRESS || ACTIVITY_TRACKER_ADDRESS === \"0x0000000000000000000000000000000000000000\") {\n      console.error(\"❌ Activity tracker address not configured. Set VITE_ACTIVITY_TRACKER_ADDRESS environment variable.\");\n      return results;\n    }\n\n    if (coins.length === 0) {\n      console.log(\"ℹ️ No coins to record on activity tracker\");\n      return results;\n    }\n\n    try {\n      console.log(`📊 Checking ${coins.length} coins for activity tracker recording...`);\n\n      let alreadyRegisteredCount = 0;\n      let recordedCount = 0;\n      let failedCount = 0;\n      const unrecordedCoins: Coin[] = []; // To store coins that are not yet registered\n\n      // Check registration status and filter out already registered coins\n      for (const coin of coins) {\n        if (!coin.address) {\n          console.warn(`⚠️ Skipping coin ${coin.id} - no address`);\n          failedCount++;\n          continue;\n        }\n\n        if (!coin.creator_wallet) {\n          console.warn(`⚠️ Skipping coin ${coin.id} - no creator wallet`);\n          failedCount++;\n          continue;\n        }\n\n        try {\n          const isRegistered = await this.publicClient.readContract({\n            address: ACTIVITY_TRACKER_ADDRESS as `0x${string}`,\n            abi: ACTIVITY_TRACKER_ABI,\n            functionName: 'isRegisteredCoin',\n            args: [coin.address as `0x${string}`],\n          });\n\n          if (isRegistered) {\n            console.log(`✅ ${coin.symbol} (${coin.address}) is already registered on-chain`);\n            alreadyRegisteredCount++;\n            // Mark as recorded in our DB by returning the coin address as a pseudo-hash\n            results.set(coin.id, coin.address as Hash);\n          } else {\n            unrecordedCoins.push(coin);\n          }\n        } catch (error: any) {\n          console.error(`❌ Error checking registration status for ${coin.symbol} (${coin.address}):`, error.message || error);\n          failedCount++;\n        }\n      }\n\n      // Record each unrecorded coin individually\n      for (const coin of unrecordedCoins) {\n        try {\n        // Validate required fields\n        if (!coin.address || !coin.creator_wallet || !coin.name || !coin.symbol) {\n          console.error(`❌ Missing required fields for coin ${coin.symbol || 'unknown'}`);\n          console.error(`   Address: ${coin.address}, Creator: ${coin.creator_wallet}`);\n          console.error(`   Name: ${coin.name}, Symbol: ${coin.symbol}`);\n          failedCount++;\n          continue;\n        }\n\n        console.log(`🔄 Recording ${coin.symbol} (${coin.address})...`);\n        const txHash = await this.publicClient.simulateContract({\n          address: ACTIVITY_TRACKER_ADDRESS as `0x${string}`,\n          abi: ACTIVITY_TRACKER_ABI,\n          functionName: 'recordCoinCreation',\n          args: [\n            coin.address as `0x${string}`,\n            coin.creator_wallet as `0x${string}`,\n            coin.ipfsUri || coin.image || '',\n            coin.name,\n            coin.symbol\n          ],\n          account: this.walletClient.account,\n        });\n\n        const hash = await this.walletClient.writeContract(txHash.request);\n        console.log(`📤 Activity tracker transaction sent for ${coin.symbol}: ${hash}`);\n\n        const receipt = await this.publicClient.waitForTransactionReceipt({\n          hash,\n          confirmations: 1\n        });\n\n        if (receipt.status === 'success') {\n          results.set(coin.id, hash);\n          recordedCount++;\n          console.log(`✅ Successfully recorded ${coin.symbol} on activity tracker with tx: ${hash}`);\n        } else {\n          console.error(`❌ Activity tracker transaction failed for ${coin.symbol}`);\n          failedCount++;\n        }\n        } catch (error: any) {\n          console.error(`❌ Error recording individual coin ${coin.symbol}:`, error.message || error);\n          failedCount++;\n        }\n      }\n\n      console.log(`📊 Activity Tracker Sync Summary:`);\n      console.log(`  ✅ Already registered: ${alreadyRegisteredCount}`);\n      console.log(`  🆕 Newly recorded: ${recordedCount}`);\n      console.log(`  ❌ Failed: ${failedCount}`);\n      console.log(`  📝 Total processed: ${coins.length}`);\n\n      return results;\n    } catch (error: any) {\n      console.error(`❌ Error recording coins to activity tracker:`, error.message || error);\n      console.error(`   Failed coins: ${failedCount}/${unrecordedCoins.length}`);\n      console.error(`   Results collected: ${results.size}`);\n\n      // Don't throw - return partial results instead\n      return results;\n    }\n  }\n\n  async recordSingleCoin(coin: Coin): Promise<Hash | null> {\n    const results = await this.recordCoinBatch([coin]);\n    return results.get(coin.id) || null;\n  }\n}","size_bytes":6907},"server/activity-tracker-cron.ts":{"content":"import cron, { ScheduledTask } from 'node-cron';\nimport { ActivityTrackerService } from './activity-tracker-service';\nimport type { IStorage } from './storage';\n\nexport class ActivityTrackerCron {\n  private cronJob: ScheduledTask | null = null;\n  private activityTrackerService: ActivityTrackerService;\n  private storage: IStorage;\n  private schedule: string;\n\n  constructor(storage: IStorage, chainId?: number) {\n    this.storage = storage;\n    this.activityTrackerService = new ActivityTrackerService(chainId);\n    \n    // Default: run every hour at minute 0\n    // Can be configured via ACTIVITY_TRACKER_CRON_SCHEDULE env var\n    // Format: \"minute hour day month weekday\"\n    // Examples:\n    // - \"0 * * * *\" = every hour at minute 0\n    // - \"0 */2 * * *\" = every 2 hours\n    // - \"0 0 * * *\" = daily at midnight\n    this.schedule = process.env.ACTIVITY_TRACKER_CRON_SCHEDULE || '0 * * * *';\n  }\n\n  start(): void {\n    if (this.cronJob) {\n      console.log('⏰ Activity tracker cron job is already running');\n      return;\n    }\n\n    console.log(`⏰ Starting activity tracker cron job with schedule: ${this.schedule}`);\n    \n    this.cronJob = cron.schedule(this.schedule, async () => {\n      await this.runSync();\n    });\n\n    console.log('✅ Activity tracker cron job started successfully');\n  }\n\n  stop(): void {\n    if (this.cronJob) {\n      this.cronJob.stop();\n      this.cronJob = null;\n      console.log('🛑 Activity tracker cron job stopped');\n    }\n  }\n\n  async runSync(): Promise<void> {\n    try {\n      console.log('🔄 [CRON] Running scheduled activity tracker sync...');\n      \n      const coins = await this.storage.getAllCoins();\n      const unrecordedCoins = coins.filter(\n        coin => coin.address && coin.status === 'active' && !coin.activityTrackerTxHash\n      );\n\n      if (unrecordedCoins.length === 0) {\n        console.log('✅ [CRON] No coins to record on activity tracker');\n        return;\n      }\n\n      console.log(`📊 [CRON] Found ${unrecordedCoins.length} unrecorded coins to sync`);\n\n      const results = await this.activityTrackerService.recordCoinBatch(unrecordedCoins);\n\n      if (results.size > 0) {\n        const now = new Date();\n        for (const [coinId, txHash] of results.entries()) {\n          await this.storage.updateCoin(coinId, {\n            activityTrackerTxHash: txHash,\n            activityTrackerRecordedAt: now,\n          });\n        }\n\n        console.log(`✅ [CRON] Successfully recorded ${results.size} coins on-chain`);\n        console.log(`📝 [CRON] Transaction hashes: ${Array.from(results.values()).join(', ')}`);\n      } else {\n        console.error('❌ [CRON] Failed to record coins on activity tracker');\n      }\n    } catch (error) {\n      console.error('❌ [CRON] Activity tracker sync error:', error);\n    }\n  }\n\n  getSchedule(): string {\n    return this.schedule;\n  }\n\n  isRunning(): boolean {\n    return this.cronJob !== null;\n  }\n}\n","size_bytes":2924},"client/src/hooks/use-tour.ts":{"content":"\nimport { useState, useEffect } from 'react';\n\nexport function useTour() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    const hasSeenTour = localStorage.getItem(\"hasSeenProductTour\");\n    if (!hasSeenTour) {\n      setIsActive(true);\n    }\n  }, []);\n\n  const nextStep = () => {\n    setCurrentStep(prev => prev + 1);\n  };\n\n  const prevStep = () => {\n    setCurrentStep(prev => Math.max(0, prev - 1));\n  };\n\n  const reset = () => {\n    setCurrentStep(0);\n    setIsActive(true);\n    localStorage.removeItem(\"hasSeenProductTour\");\n  };\n\n  const complete = () => {\n    setIsActive(false);\n    localStorage.setItem(\"hasSeenProductTour\", \"true\");\n  };\n\n  return {\n    currentStep,\n    isActive,\n    nextStep,\n    prevStep,\n    reset,\n    complete,\n  };\n}\n","size_bytes":831},"server/trending-notifications.ts":{"content":"\nimport { storage } from \"./storage\";\nimport { getCoin } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { sendTelegramNotification } from \"./telegram-bot\";\n\ninterface TrendingCoin {\n  coinId: string;\n  coinAddress: string;\n  coinSymbol: string;\n  coinName: string;\n  creatorAddress: string;\n  earnings24h: number;\n  volume24h: number;\n  holders: number;\n}\n\n// Function to check for trending coins and send notifications\nexport async function checkAndNotifyTrendingCoins() {\n  try {\n    const coins = await storage.getAllCoins();\n    const trendingCoins: TrendingCoin[] = [];\n\n    // Fetch stats for all active coins\n    for (const coin of coins) {\n      if (!coin.address || coin.status !== 'active') continue;\n\n      try {\n        const response = await getCoin({\n          collectionAddress: coin.address as `0x${string}`,\n          chainId: base.id,\n        });\n\n        const coinData = response.data?.zora20Token;\n        if (!coinData) continue;\n\n        const volume24h = parseFloat(coinData.volume24h || '0');\n        const holders = coinData.uniqueHolders || 0;\n        const earnings24h = volume24h * 0.005; // 0.5% of volume\n\n        // Check if coin is trending (high earnings or volume)\n        // Lower thresholds for more active notifications\n        if (earnings24h >= 1 || volume24h >= 10 || holders >= 5) {\n          trendingCoins.push({\n            coinId: coin.id,\n            coinAddress: coin.address,\n            coinSymbol: coin.symbol,\n            coinName: coin.name,\n            creatorAddress: coin.creator_wallet || '',\n            earnings24h,\n            volume24h,\n            holders,\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching stats for ${coin.symbol}:`, error);\n      }\n    }\n\n    // Sort by earnings\n    trendingCoins.sort((a, b) => b.earnings24h - a.earnings24h);\n\n    // Notify about top trending coins (top 3)\n    const topTrending = trendingCoins.slice(0, 3);\n\n    for (const trending of topTrending) {\n      // Get all users to notify (random selection)\n      const creators = await storage.getAllCreators();\n      const usersToNotify = creators\n        .filter(c => c.address.toLowerCase() !== trending.creatorAddress.toLowerCase())\n        .sort(() => Math.random() - 0.5)\n        .slice(0, Math.min(5, creators.length)); // Notify up to 5 random users\n\n      for (const user of usersToNotify) {\n        // Create notification\n        await storage.createNotification({\n          userId: user.address,\n          type: 'trending',\n          title: '🔥 Trending Coin Alert!',\n          message: `${trending.coinName} (${trending.coinSymbol}) is trending! $${trending.earnings24h.toFixed(2)} earned in 24h with ${trending.holders} holders. Check it out!`,\n          coinAddress: trending.coinAddress,\n          coinSymbol: trending.coinSymbol,\n          read: false,\n        });\n\n        // Send Telegram notification\n        await sendTelegramNotification(\n          user.address,\n          '🔥 Trending Coin Alert!',\n          `${trending.coinName} (${trending.coinSymbol}) is trending! $${trending.earnings24h.toFixed(2)} earned in 24h with ${trending.holders} holders. Check it out!`,\n          'trending',\n          { address: trending.coinAddress, symbol: trending.coinSymbol, name: trending.coinName },\n          { earnings24h: trending.earnings24h, volume24h: trending.volume24h, holders: trending.holders }\n        );\n      }\n    }\n\n    // Notify creators about their own coin performance\n    for (const trending of topTrending) {\n      if (!trending.creatorAddress) continue;\n\n      await storage.createNotification({\n        userId: trending.creatorAddress,\n        type: 'performance',\n        title: '💎 Your Coin is Performing Great!',\n        message: `${trending.coinName} (${trending.coinSymbol}) earned $${trending.earnings24h.toFixed(2)} in the last 24h! Share it to reach more holders.`,\n        coinAddress: trending.coinAddress,\n        coinSymbol: trending.coinSymbol,\n        read: false,\n      });\n\n      await sendTelegramNotification(\n        trending.creatorAddress,\n        '💎 Your Coin is Performing Great!',\n        `${trending.coinName} (${trending.coinSymbol}) earned $${trending.earnings24h.toFixed(2)} in the last 24h! Share it to reach more holders.`,\n        'performance',\n        { address: trending.coinAddress, symbol: trending.coinSymbol, name: trending.coinName },\n        { earnings24h: trending.earnings24h, volume24h: trending.volume24h, holders: trending.holders }\n      );\n    }\n\n    console.log(`✅ Sent trending notifications for ${topTrending.length} coins`);\n  } catch (error) {\n    console.error('Error in trending notifications:', error);\n  }\n}\n\n// Run every 2 hours\nexport function startTrendingNotifications() {\n  // Run immediately on start\n  checkAndNotifyTrendingCoins();\n\n  // Then run every 2 hours\n  setInterval(() => {\n    checkAndNotifyTrendingCoins();\n  }, 2 * 60 * 60 * 1000); // 2 hours\n\n  console.log('✅ Trending notifications service started (runs every 2 hours)');\n}\n","size_bytes":5056},"client/src/pages/public-profile.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport type { Coin } from \"@shared/schema\";\nimport Layout from \"@/components/layout\";\nimport CoinCard from \"@/components/coin-card\";\nimport {\n  Share2,\n  Grid3x3,\n  List,\n  DollarSign,\n  TrendingUp,\n  Users,\n  Coins as CoinsIcon,\n  Copy,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCoin } from \"@zoralabs/coins-sdk\";\nimport { base } from \"viem/chains\";\nimport { createAvatar } from '@dicebear/core';\nimport { avataaars } from '@dicebear/collection';\nimport { formatSmartCurrency } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PublicProfile() {\n  const [, params] = useRoute(\"/:identifier\");\n  const rawIdentifier = params?.identifier || \"\";\n\n  // Remove @ prefix if present (for @username routes)\n  const identifier = rawIdentifier.startsWith(\"@\") ? rawIdentifier.slice(1) : rawIdentifier;\n\n  // Determine if identifier is a username (starts with @) or wallet address\n  const isUsername = identifier.startsWith('@');\n  const cleanIdentifier = isUsername ? identifier.slice(1) : identifier;\n\n  // Redirect to home if identifier is invalid\n  if (!cleanIdentifier || cleanIdentifier === '[object Object]' || cleanIdentifier === 'undefined') {\n    window.location.href = '/';\n    return null;\n  }\n\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [totalEarnings, setTotalEarnings] = useState<number>(0);\n  const [totalMarketCap, setTotalMarketCap] = useState<number>(0);\n  const [totalHolders, setTotalHolders] = useState<number>(0);\n  const [isLoadingStats, setIsLoadingStats] = useState(false);\n  const { toast } = useToast();\n\n  // Determine if identifier is address or username\n  const isAddress = identifier.startsWith(\"0x\");\n\n  // Fetch creator by address or username\n  const { data: creatorData, isLoading: isLoadingCreatorData } = useQuery({\n    queryKey: ['/api/creators', isAddress ? 'address' : 'username', identifier],\n    queryFn: async () => {\n      const endpoint = isAddress \n        ? `/api/creators/address/${identifier}`\n        : `/api/creators/username/${identifier}`;\n      const response = await fetch(endpoint);\n      if (!response.ok) return null;\n      return response.json();\n    },\n    enabled: !!identifier,\n  });\n\n  const address = creatorData?.address;\n\n  const avatarSvg = creatorData?.avatar || creatorData?.profileImage || createAvatar(avataaars, {\n    seed: address || 'anonymous',\n    size: 128,\n  }).toDataUri();\n\n  const { data: coins = [], isLoading: isLoadingCoins } = useQuery<Coin[]>({\n    queryKey: [\"/api/coins\"],\n  });\n\n  const createdCoins = useMemo(() => {\n    if (!address) return [];\n    return coins.filter(coin =>\n      coin.creator_wallet && coin.creator_wallet.toLowerCase() === address.toLowerCase()\n    );\n  }, [coins, address]);\n\n  const displayedCoins = createdCoins.filter(coin => coin.address !== null) as Array<typeof createdCoins[0] & { address: string }>;\n\n  useEffect(() => {\n    if (!address || !createdCoins.length) {\n      setTotalEarnings(0);\n      setTotalMarketCap(0);\n      setTotalHolders(0);\n      setIsLoadingStats(false);\n      return;\n    }\n\n    let isMounted = true;\n    setIsLoadingStats(true);\n\n    async function fetchAllStats() {\n      try {\n        let earnings = 0;\n        let marketCap = 0;\n        let holders = 0;\n\n        for (const coin of createdCoins) {\n          if (coin.address && coin.status === 'active') {\n            try {\n              const coinData = await getCoin({\n                collectionAddress: coin.address as `0x${string}`,\n                chainId: base.id,\n              });\n\n              const tokenData = coinData.data?.zora20Token;\n\n              if (tokenData?.creatorEarnings && tokenData.creatorEarnings.length > 0) {\n                const earningAmount = parseFloat(String(tokenData.creatorEarnings[0].amountUsd || tokenData.creatorEarnings[0].amount?.amountDecimal || \"0\"));\n                earnings += earningAmount;\n              }\n\n              if (tokenData?.marketCap) {\n                marketCap += parseFloat(tokenData.marketCap);\n              }\n\n              if (tokenData?.uniqueHolders) {\n                holders += tokenData.uniqueHolders;\n              }\n            } catch (err) {\n              console.error(`Error fetching coin stats for ${coin.address}:`, err);\n            }\n          }\n        }\n\n        if (isMounted) {\n          setTotalEarnings(earnings);\n          setTotalMarketCap(marketCap);\n          setTotalHolders(holders);\n          setIsLoadingStats(false);\n        }\n      } catch (error) {\n        console.error(\"Error fetching creator stats:\", error);\n        if (isMounted) {\n          setTotalEarnings(0);\n          setTotalMarketCap(0);\n          setTotalHolders(0);\n          setIsLoadingStats(false);\n        }\n      }\n    }\n\n    fetchAllStats();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [address, createdCoins]);\n\n  const formatAddress = (addr: string) => {\n    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  };\n\n  const handleShare = async () => {\n    // Use @username if available, otherwise use address\n    const profilePath = creatorData?.name \n      ? `/@${creatorData.name}` \n      : `/${address}`;\n    const url = `${window.location.origin}${profilePath}`;\n\n    try {\n      if (navigator.share) {\n        await navigator.share({\n          title: `${creatorData?.name || formatAddress(address)} - CoinIT Profile`,\n          text: `Check out this profile on CoinIT!`,\n          url: url,\n        });\n      } else {\n        await navigator.clipboard.writeText(url);\n        toast({\n          title: \"Link copied\",\n          description: \"Profile link copied to clipboard\",\n        });\n      }\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n\n  if (isLoadingCreatorData) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-muted/20 rounded-full animate-pulse mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading profile...</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!creatorData) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-[60vh] p-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Profile Not Found</h2>\n            <p className=\"text-muted-foreground\">\n              This creator doesn't exist or hasn't created any coins yet.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-2xl mx-auto p-4 sm:p-6\">\n        <div className=\"relative mb-6\">\n          <div className=\"flex flex-col items-center text-center mb-6\">\n            <div className=\"relative mb-4\">\n              <img\n                src={avatarSvg}\n                alt=\"Profile Avatar\"\n                className=\"w-28 h-28 rounded-3xl border-4 border-border shadow-xl object-cover\"\n              />\n            </div>\n\n            <h1 className=\"text-2xl font-bold text-foreground mb-1\">\n              {creatorData?.name || formatAddress(address)}\n            </h1>\n\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              @{address ? `${address.slice(2, 8)}` : ''}\n            </p>\n\n            {creatorData?.bio && (\n              <p className=\"text-muted-foreground text-sm mb-4 max-w-md px-4\">\n                {creatorData.bio}\n              </p>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-4 gap-2 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-foreground mb-1\">\n                {isLoadingStats || isLoadingCoins ? '-' : createdCoins.length}\n              </div>\n              <div className=\"text-xs text-muted-foreground uppercase tracking-wide\">Coins</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-foreground mb-1\">\n                {isLoadingStats ? '-' : totalMarketCap >= 1000000\n                  ? `$${(totalMarketCap / 1000000).toFixed(2)}M`\n                  : totalMarketCap >= 1000\n                    ? `$${(totalMarketCap / 1000).toFixed(1)}k`\n                    : `$${totalMarketCap.toFixed(2)}`}\n              </div>\n              <div className=\"text-xs text-muted-foreground uppercase tracking-wide\">Market Cap</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-foreground mb-1\">\n                {isLoadingStats ? '-' : totalHolders}\n              </div>\n              <div className=\"text-xs text-muted-foreground uppercase tracking-wide\">Holders</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-xl font-bold text-green-600 dark:text-green-500 mb-1\">\n                {isLoadingStats ? '-' : formatSmartCurrency(totalEarnings)}\n              </div>\n              <div className=\"text-xs text-muted-foreground uppercase tracking-wide\">Earnings</div>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3 mb-6\">\n            <Button\n              onClick={handleShare}\n              className=\"flex-1 bg-primary hover:bg-primary/90 text-black font-bold rounded-xl h-11\"\n            >\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              Share Profile\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-bold text-foreground\">\n            Created Coins {createdCoins.length > 0 && `(${createdCoins.length})`}\n          </h2>\n\n          <div className=\"flex gap-1 bg-muted/20 rounded-full p-1\">\n            <button\n              onClick={() => setViewMode(\"grid\")}\n              className={`p-2 rounded-full transition-colors ${\n                viewMode === \"grid\"\n                  ? \"bg-white text-black\"\n                  : \"text-muted-foreground hover:text-white\"\n              }`}\n            >\n              <Grid3x3 className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => setViewMode(\"list\")}\n              className={`p-2 rounded-full transition-colors ${\n                viewMode === \"list\"\n                  ? \"bg-white text-black\"\n                  : \"text-muted-foreground hover:text-white\"\n              }`}\n            >\n              <List className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {isLoadingCoins ? (\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"spotify-card rounded-xl overflow-hidden p-3 space-y-3\">\n                <div className=\"aspect-square w-full bg-muted/20 rounded-lg animate-pulse\"></div>\n              </div>\n            ))}\n          </div>\n        ) : displayedCoins.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"w-16 h-16 bg-muted/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CoinsIcon className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-foreground mb-2\">No coins created yet</h3>\n          </div>\n        ) : (\n          <div className={viewMode === \"grid\" ? \"grid grid-cols-2 gap-4\" : \"space-y-4\"}>\n            {displayedCoins.map((coin) => (\n              <CoinCard\n                key={coin.id}\n                coin={{\n                  ...coin,\n                  createdAt: typeof coin.createdAt === 'string'\n                    ? coin.createdAt\n                    : coin.createdAt\n                      ? coin.createdAt.toISOString()\n                      : new Date().toISOString(),\n                  ipfsUri: coin.ipfsUri ?? undefined\n                }}\n                isOwnCoin={false}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":12190},"server/notification-service.ts":{"content":"import { storage } from './storage';\nimport { sendTelegramNotification } from './telegram-bot';\nimport type { Reward, Creator, Coin } from '@shared/schema';\n\n// Randomized earnings notification messages\nconst EARNINGS_MESSAGES = [\n  \"💰 Ka-ching! You've earned {amount} from {coin}!\",\n  \"🎉 Great news! {amount} just landed in your wallet from {coin}\",\n  \"💎 You're making moves! {amount} earned from {coin}\",\n  \"🔥 Hot earnings alert! {amount} from {coin} is yours\",\n  \"⚡ Zap! {amount} just hit your account from {coin}\",\n  \"🌟 Success! You've earned {amount} from {coin} trades\",\n  \"💸 Money alert! {amount} from {coin} arrived\",\n  \"🎯 Bulls-eye! {amount} earned from {coin}\",\n  \"🚀 To the moon! {amount} from {coin} deposited\",\n  \"💵 Cha-ching! {amount} from {coin} is in your wallet\",\n  \"🏆 Winner! You earned {amount} from {coin}\",\n  \"✨ Sweet! {amount} from {coin} just dropped\",\n];\n\nconst TOP_TRADER_MESSAGES = [\n  \"🔥 {trader} is on fire! Earned {amount} in the last {period}\",\n  \"💎 Whale alert! {trader} made {amount} in {period}\",\n  \"🚀 {trader} just crushed it with {amount} in {period}!\",\n  \"⚡ Power move! {trader} earned {amount} in {period}\",\n  \"👑 King of trades! {trader} made {amount} in {period}\",\n  \"🎯 Perfect execution! {trader} earned {amount} in {period}\",\n  \"💰 Big money! {trader} raked in {amount} in {period}\",\n  \"🌟 Star trader {trader} earned {amount} in {period}\",\n  \"🔮 Magic touch! {trader} made {amount} in {period}\",\n];\n\n// Format number with commas\nfunction formatNumber(num: number | string): string {\n  const n = typeof num === 'string' ? parseFloat(num) : num;\n  if (isNaN(n)) return '0.00';\n  return n.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n}\n\n// Format address\nfunction formatAddress(address: string): string {\n  if (!address) return 'Unknown';\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n}\n\n// Calculate time periods\nfunction getTimePeriod(hours: number): Date {\n  const now = new Date();\n  return new Date(now.getTime() - hours * 60 * 60 * 1000);\n}\n\nexport class NotificationService {\n  \n  // Get top creators by total volume\n  async getTopCreatorsByVolume(limit: number = 10): Promise<Creator[]> {\n    const creators = await storage.getAllCreators();\n    return creators\n      .sort((a, b) => parseFloat(b.totalVolume || '0') - parseFloat(a.totalVolume || '0'))\n      .slice(0, limit);\n  }\n\n  // Get top creators by points\n  async getTopCreatorsByPoints(limit: number = 10): Promise<Creator[]> {\n    const creators = await storage.getAllCreators();\n    return creators\n      .sort((a, b) => parseFloat(b.points || '0') - parseFloat(a.points || '0'))\n      .slice(0, limit);\n  }\n\n  // Get top earners from rewards\n  async getTopEarners(limit: number = 10, hoursAgo?: number): Promise<Array<{address: string, totalEarnings: number, rewardCount: number}>> {\n    const rewards = await storage.getAllRewards();\n    \n    // Filter by time if specified\n    let filteredRewards = rewards;\n    if (hoursAgo) {\n      const cutoff = getTimePeriod(hoursAgo);\n      filteredRewards = rewards.filter(r => new Date(r.createdAt) >= cutoff);\n    }\n\n    // Aggregate earnings by recipient\n    const earningsMap = new Map<string, { totalEarnings: number, rewardCount: number }>();\n    \n    for (const reward of filteredRewards) {\n      const current = earningsMap.get(reward.recipientAddress) || { totalEarnings: 0, rewardCount: 0 };\n      const amount = parseFloat(reward.rewardAmount) / 1e18; // Convert from wei to ETH\n      current.totalEarnings += amount;\n      current.rewardCount += 1;\n      earningsMap.set(reward.recipientAddress, current);\n    }\n\n    // Convert to array and sort\n    return Array.from(earningsMap.entries())\n      .map(([address, data]) => ({ address, ...data }))\n      .sort((a, b) => b.totalEarnings - a.totalEarnings)\n      .slice(0, limit);\n  }\n\n  // Get top coins (you can customize the metric)\n  async getTopCoins(limit: number = 10): Promise<Coin[]> {\n    const coins = await storage.getAllCoins();\n    // For now, sort by creation date (most recent first)\n    // You can modify this to sort by volume or other metrics when available\n    return coins\n      .filter(c => c.status === 'active' && c.address)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, limit);\n  }\n\n  // Get recent trades (based on recent rewards)\n  async getRecentTrades(limit: number = 20): Promise<Reward[]> {\n    const rewards = await storage.getAllRewards();\n    return rewards\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, limit);\n  }\n\n  // Send earnings notification with randomized message\n  async notifyUserEarnings(userAddress: string, reward: Reward): Promise<void> {\n    const amount = (parseFloat(reward.rewardAmount) / 1e18).toFixed(4);\n    const template = EARNINGS_MESSAGES[Math.floor(Math.random() * EARNINGS_MESSAGES.length)];\n    \n    const message = template\n      .replace('{amount}', `${amount} ${reward.rewardCurrency}`)\n      .replace('{coin}', reward.coinSymbol);\n\n    const title = `💰 Earnings Received!`;\n    \n    // Save to database\n    await storage.createNotification({\n      userId: userAddress,\n      type: 'reward',\n      title,\n      message,\n      coinAddress: reward.coinAddress,\n      coinSymbol: reward.coinSymbol,\n      amount: reward.rewardAmount,\n      transactionHash: reward.transactionHash,\n    });\n\n    // Send to Telegram\n    await sendTelegramNotification(\n      userAddress,\n      title,\n      message,\n      'reward'\n    );\n  }\n\n  // Notify about top traders\n  async notifyTopTraders(hours: number): Promise<void> {\n    const topEarners = await this.getTopEarners(5, hours);\n    \n    if (topEarners.length === 0) return;\n\n    const periodText = hours <= 10 ? `${hours} hours` : \n                       hours === 24 ? '24 hours' :\n                       `${Math.floor(hours / 24)} days`;\n\n    for (const earner of topEarners) {\n      const template = TOP_TRADER_MESSAGES[Math.floor(Math.random() * TOP_TRADER_MESSAGES.length)];\n      const message = template\n        .replace('{trader}', formatAddress(earner.address))\n        .replace('{amount}', `$${formatNumber(earner.totalEarnings)}`)\n        .replace('{period}', periodText);\n\n      const title = `🏆 Top Trader Alert - ${periodText}`;\n\n      // Broadcast to channel\n      const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;\n      if (TELEGRAM_CHANNEL_ID) {\n        try {\n          const { bot } = await import('./telegram-bot');\n          if (bot) {\n            await bot.sendMessage(\n              TELEGRAM_CHANNEL_ID,\n              `${title}\\n\\n${message}\\n\\n💎 Trader: [${formatAddress(earner.address)}](https://zora.co/profile/${earner.address})\\n📊 Total Earnings: $${formatNumber(earner.totalEarnings)}\\n🎯 Trades: ${earner.rewardCount}`,\n              { parse_mode: 'Markdown', disable_web_page_preview: false }\n            );\n          }\n        } catch (error) {\n          console.error('Error broadcasting top trader:', error);\n        }\n      }\n    }\n  }\n\n  // Send top creators notification\n  async sendTopCreatorsNotification(): Promise<void> {\n    const topCreators = await this.getTopCreatorsByVolume(10);\n    \n    if (topCreators.length === 0) return;\n\n    let message = `👑 TOP CREATORS BY VOLUME\\n\\n`;\n    \n    topCreators.forEach((creator, index) => {\n      const volume = parseFloat(creator.totalVolume || '0');\n      message += `${index + 1}. ${creator.name || formatAddress(creator.address)}\\n`;\n      message += `   💰 Volume: $${formatNumber(volume)}\\n`;\n      message += `   🪙 Coins: ${creator.totalCoins}\\n`;\n      message += `   ⭐ Points: ${formatNumber(parseFloat(creator.points || '0'))}\\n\\n`;\n    });\n\n    const title = `👑 Top Creators Leaderboard`;\n\n    // Broadcast to channel\n    const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;\n    if (TELEGRAM_CHANNEL_ID) {\n      try {\n        const { bot } = await import('./telegram-bot');\n        if (bot) {\n          await bot.sendMessage(\n            TELEGRAM_CHANNEL_ID,\n            `${title}\\n\\n${message}`,\n            { parse_mode: 'Markdown', disable_web_page_preview: true }\n          );\n        }\n      } catch (error) {\n        console.error('Error broadcasting top creators:', error);\n      }\n    }\n  }\n\n  // Send top earners notification\n  async sendTopEarnersNotification(hours?: number): Promise<void> {\n    const topEarners = await this.getTopEarners(10, hours);\n    \n    if (topEarners.length === 0) return;\n\n    const periodText = hours ? \n      (hours <= 10 ? `${hours} hours` : \n       hours === 24 ? '24 hours' :\n       `${Math.floor(hours / 24)} days`) : \n      'All Time';\n\n    let message = `💎 TOP EARNERS - ${periodText.toUpperCase()}\\n\\n`;\n    \n    topEarners.forEach((earner, index) => {\n      message += `${index + 1}. [${formatAddress(earner.address)}](https://zora.co/profile/${earner.address})\\n`;\n      message += `   💰 Earnings: $${formatNumber(earner.totalEarnings)}\\n`;\n      message += `   🎯 Trades: ${earner.rewardCount}\\n\\n`;\n    });\n\n    const title = `💎 Top Earners - ${periodText}`;\n\n    // Broadcast to channel\n    const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;\n    if (TELEGRAM_CHANNEL_ID) {\n      try {\n        const { bot } = await import('./telegram-bot');\n        if (bot) {\n          await bot.sendMessage(\n            TELEGRAM_CHANNEL_ID,\n            `${title}\\n\\n${message}`,\n            { parse_mode: 'Markdown', disable_web_page_preview: false }\n          );\n        }\n      } catch (error) {\n        console.error('Error broadcasting top earners:', error);\n      }\n    }\n  }\n\n  // Send top coins notification\n  async sendTopCoinsNotification(): Promise<void> {\n    const topCoins = await this.getTopCoins(10);\n    \n    if (topCoins.length === 0) return;\n\n    let message = `🏆 TOP TRENDING COINS\\n\\n`;\n    \n    topCoins.forEach((coin, index) => {\n      message += `${index + 1}. *${coin.name}* (${coin.symbol})\\n`;\n      message += `   👤 Creator: [${formatAddress(coin.creator_wallet)}](https://zora.co/profile/${coin.creator_wallet})\\n`;\n      if (coin.address) {\n        message += `   🔗 [Trade Now](https://zora.co/creator-coins/base:${coin.address})\\n`;\n      }\n      message += `\\n`;\n    });\n\n    const title = `🏆 Top Trending Coins`;\n\n    // Broadcast to channel\n    const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;\n    if (TELEGRAM_CHANNEL_ID) {\n      try {\n        const { bot } = await import('./telegram-bot');\n        if (bot) {\n          await bot.sendMessage(\n            TELEGRAM_CHANNEL_ID,\n            `${title}\\n\\n${message}`,\n            { parse_mode: 'Markdown', disable_web_page_preview: false }\n          );\n        }\n      } catch (error) {\n        console.error('Error broadcasting top coins:', error);\n      }\n    }\n  }\n\n  // Send top points earners notification\n  async sendTopPointsNotification(): Promise<void> {\n    const topCreators = await this.getTopCreatorsByPoints(10);\n    \n    if (topCreators.length === 0) return;\n\n    let message = `⭐ TOP POINTS EARNERS\\n\\n`;\n    \n    topCreators.forEach((creator, index) => {\n      const points = parseFloat(creator.points || '0');\n      message += `${index + 1}. ${creator.name || formatAddress(creator.address)}\\n`;\n      message += `   ⭐ Points: ${formatNumber(points)}\\n`;\n      message += `   🪙 Coins: ${creator.totalCoins}\\n`;\n      message += `   📊 Volume: $${formatNumber(parseFloat(creator.totalVolume || '0'))}\\n\\n`;\n    });\n\n    const title = `⭐ Top Points Earners`;\n\n    // Broadcast to channel\n    const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;\n    if (TELEGRAM_CHANNEL_ID) {\n      try {\n        const { bot } = await import('./telegram-bot');\n        if (bot) {\n          await bot.sendMessage(\n            TELEGRAM_CHANNEL_ID,\n            `${title}\\n\\n${message}`,\n            { parse_mode: 'Markdown', disable_web_page_preview: true }\n          );\n        }\n      } catch (error) {\n        console.error('Error broadcasting top points:', error);\n      }\n    }\n  }\n\n  // Send recent trades notification\n  async sendRecentTradesNotification(): Promise<void> {\n    const recentTrades = await this.getRecentTrades(10);\n    \n    if (recentTrades.length === 0) return;\n\n    let message = `📊 RECENT TRADING ACTIVITY\\n\\n`;\n    \n    recentTrades.forEach((trade, index) => {\n      const amount = (parseFloat(trade.rewardAmount) / 1e18).toFixed(4);\n      message += `${index + 1}. ${trade.coinSymbol}\\n`;\n      message += `   💰 ${amount} ${trade.rewardCurrency}\\n`;\n      message += `   👤 [${formatAddress(trade.recipientAddress)}](https://zora.co/profile/${trade.recipientAddress})\\n`;\n      message += `   🔗 [Tx](https://basescan.org/tx/${trade.transactionHash})\\n\\n`;\n    });\n\n    const title = `📊 Recent Trades`;\n\n    // Broadcast to channel\n    const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;\n    if (TELEGRAM_CHANNEL_ID) {\n      try {\n        const { bot } = await import('./telegram-bot');\n        if (bot) {\n          await bot.sendMessage(\n            TELEGRAM_CHANNEL_ID,\n            `${title}\\n\\n${message}`,\n            { parse_mode: 'Markdown', disable_web_page_preview: false }\n          );\n        }\n      } catch (error) {\n        console.error('Error broadcasting recent trades:', error);\n      }\n    }\n  }\n\n  // Weekly top earners (convenience method)\n  async sendWeeklyTopEarnersNotification(): Promise<void> {\n    await this.sendTopEarnersNotification(24 * 7); // 7 days\n  }\n\n  // Send all periodic notifications\n  async sendAllPeriodicNotifications(): Promise<void> {\n    console.log('📢 Sending periodic notifications...');\n    \n    try {\n      await this.sendTopCreatorsNotification();\n      await this.sendTopEarnersNotification(24); // 24h\n      await this.sendTopCoinsNotification();\n      await this.sendTopPointsNotification();\n      await this.sendRecentTradesNotification();\n      \n      console.log('✅ All periodic notifications sent successfully');\n    } catch (error) {\n      console.error('❌ Error sending periodic notifications:', error);\n    }\n  }\n}\n\nexport const notificationService = new NotificationService();\n","size_bytes":14248},"server/notification-cron.ts":{"content":"import cron from 'node-cron';\nimport { notificationService } from './notification-service';\n\nexport class NotificationCron {\n  private jobs: cron.ScheduledTask[] = [];\n  private started: boolean = false;\n\n  start() {\n    // Idempotence check - prevent duplicate job scheduling\n    if (this.started || this.jobs.length > 0) {\n      console.log('⚠️ Notification cron jobs already running, skipping duplicate start');\n      return;\n    }\n\n    this.started = true;\n    console.log('🔔 Starting notification cron jobs...');\n\n    // Send all periodic notifications every 4 hours\n    const periodicJob = cron.schedule('0 */4 * * *', async () => {\n      console.log('📢 Running periodic notifications...');\n      try {\n        await notificationService.sendAllPeriodicNotifications();\n      } catch (error) {\n        console.error('❌ Periodic notifications error:', error);\n      }\n    });\n    this.jobs.push(periodicJob);\n\n    // Send top traders notifications for 24h every 6 hours\n    const tradersJob24h = cron.schedule('0 */6 * * *', async () => {\n      console.log('🏆 Sending 24h top traders notification...');\n      try {\n        await notificationService.notifyTopTraders(24);\n      } catch (error) {\n        console.error('❌ Top traders (24h) notification error:', error);\n      }\n    });\n    this.jobs.push(tradersJob24h);\n\n    // Send top traders notifications for 10h every 3 hours\n    const tradersJob10h = cron.schedule('0 */3 * * *', async () => {\n      console.log('🔥 Sending 10h top traders notification...');\n      try {\n        await notificationService.notifyTopTraders(10);\n      } catch (error) {\n        console.error('❌ Top traders (10h) notification error:', error);\n      }\n    });\n    this.jobs.push(tradersJob10h);\n\n    // Send top traders notifications for 3 days once a day\n    const tradersJob3d = cron.schedule('0 12 * * *', async () => {\n      console.log('💎 Sending 3-day top traders notification...');\n      try {\n        await notificationService.notifyTopTraders(72); // 3 days = 72 hours\n      } catch (error) {\n        console.error('❌ Top traders (3d) notification error:', error);\n      }\n    });\n    this.jobs.push(tradersJob3d);\n\n    // Send weekly top earners every Monday at 10 AM\n    const weeklyJob = cron.schedule('0 10 * * 1', async () => {\n      console.log('📊 Sending weekly top earners notification...');\n      try {\n        await notificationService.sendWeeklyTopEarnersNotification();\n      } catch (error) {\n        console.error('❌ Weekly top earners notification error:', error);\n      }\n    });\n    this.jobs.push(weeklyJob);\n\n    // Send top creators every 8 hours\n    const creatorsJob = cron.schedule('0 */8 * * *', async () => {\n      console.log('👑 Sending top creators notification...');\n      try {\n        await notificationService.sendTopCreatorsNotification();\n      } catch (error) {\n        console.error('❌ Top creators notification error:', error);\n      }\n    });\n    this.jobs.push(creatorsJob);\n\n    // Send top coins every 6 hours\n    const coinsJob = cron.schedule('0 */6 * * *', async () => {\n      console.log('🏆 Sending top coins notification...');\n      try {\n        await notificationService.sendTopCoinsNotification();\n      } catch (error) {\n        console.error('❌ Top coins notification error:', error);\n      }\n    });\n    this.jobs.push(coinsJob);\n\n    // Send recent trades every 2 hours\n    const tradesJob = cron.schedule('0 */2 * * *', async () => {\n      console.log('📊 Sending recent trades notification...');\n      try {\n        await notificationService.sendRecentTradesNotification();\n      } catch (error) {\n        console.error('❌ Recent trades notification error:', error);\n      }\n    });\n    this.jobs.push(tradesJob);\n\n    console.log(`✅ Started ${this.jobs.length} notification cron jobs`);\n  }\n\n  stop() {\n    console.log('🛑 Stopping notification cron jobs...');\n    this.jobs.forEach(job => job.stop());\n    this.jobs = [];\n    this.started = false;\n    console.log('✅ All notification cron jobs stopped');\n  }\n\n  getSchedules(): string[] {\n    return [\n      'All periodic notifications: every 4 hours',\n      'Top traders (24h): every 6 hours',\n      'Top traders (10h): every 3 hours',\n      'Top traders (3 days): daily at 12 PM',\n      'Weekly top earners: Mondays at 10 AM',\n      'Top creators: every 8 hours',\n      'Top coins: every 6 hours',\n      'Recent trades: every 2 hours'\n    ];\n  }\n}\n\nexport const notificationCron = new NotificationCron();\n","size_bytes":4512},"server/streak-reminder-cron.ts":{"content":"\nimport cron from 'node-cron';\nimport { storage } from './storage';\nimport { sendTelegramNotification } from './telegram-bot';\n\n// Run every 6 hours to remind users about unclaimed points\nexport function startStreakReminderCron() {\n  // Run at 9 AM, 3 PM, and 9 PM daily\n  cron.schedule('0 9,15,21 * * *', async () => {\n    try {\n      console.log('🔔 Running streak reminder check...');\n      \n      const creators = await storage.getAllCreators();\n      const today = new Date().toISOString().split('T')[0];\n      let remindersCount = 0;\n\n      for (const creator of creators) {\n        try {\n          const loginStreak = await storage.getLoginStreak(creator.address);\n\n          // New user - hasn't claimed first bonus\n          if (!loginStreak) {\n            await storage.createNotification({\n              userId: creator.address,\n              type: 'reward',\n              title: '🎁 Claim Your Welcome Bonus!',\n              message: 'You have 10 points waiting for you! Visit the app to claim your first daily login bonus and start your streak.',\n              amount: '10',\n              read: false,\n            });\n\n            await sendTelegramNotification(\n              creator.address,\n              '🎁 Claim Your Welcome Bonus!',\n              'You have 10 points waiting! Visit the app to claim your first daily login bonus 🔥',\n              'reward'\n            );\n\n            remindersCount++;\n            continue;\n          }\n\n          // User hasn't claimed today's points\n          if (loginStreak.lastLoginDate !== today) {\n            const lastLogin = new Date(loginStreak.lastLoginDate || today);\n            const todayDate = new Date(today);\n            const daysDiff = Math.floor((todayDate.getTime() - lastLogin.getTime()) / (1000 * 60 * 60 * 24));\n            \n            let currentStreak = parseInt(loginStreak.currentStreak || '0');\n            let pointsAvailable = 10;\n            let streakStatus = '';\n\n            if (daysDiff === 1) {\n              const nextStreak = currentStreak + 1;\n              pointsAvailable = 10 + Math.min(Math.floor(nextStreak / 7) * 5, 50);\n              streakStatus = `Continue your ${currentStreak} day streak`;\n            } else {\n              pointsAvailable = 10;\n              streakStatus = `Your ${currentStreak} day streak will reset`;\n            }\n\n            await storage.createNotification({\n              userId: creator.address,\n              type: 'reward',\n              title: '🔥 Daily Points Waiting!',\n              message: `${streakStatus}! Claim ${pointsAvailable} points now by visiting the app. Don't let your streak expire!`,\n              amount: pointsAvailable.toString(),\n              read: false,\n            });\n\n            await sendTelegramNotification(\n              creator.address,\n              '🔥 Daily Points Waiting!',\n              `${streakStatus}! Claim ${pointsAvailable} points now 🎁`,\n              'reward'\n            );\n\n            remindersCount++;\n          }\n        } catch (error) {\n          console.error(`Error sending reminder to ${creator.address}:`, error);\n        }\n      }\n\n      console.log(`✅ Sent ${remindersCount} streak reminders`);\n    } catch (error) {\n      console.error('❌ Streak reminder cron error:', error);\n    }\n  });\n\n  console.log('✅ Streak reminder cron started (runs at 9 AM, 3 PM, and 9 PM daily)');\n}\n","size_bytes":3399},"client/src/components/streak-display.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Flame, Check, Trophy } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\n\ninterface StreakDisplayProps {\n  userAddress: string;\n}\n\nexport default function StreakDisplay({ userAddress }: StreakDisplayProps) {\n  const { toast } = useToast();\n  const [hasCheckedIn, setHasCheckedIn] = useState(false);\n\n  const { data: streakData, isLoading } = useQuery({\n    queryKey: ['/api/login-streak', userAddress],\n    enabled: !!userAddress,\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/login-streak/check-in', {\n        address: userAddress,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.alreadyCheckedIn) {\n        toast({\n          title: \"Already checked in today!\",\n          description: \"Come back tomorrow to continue your streak 🔥\",\n        });\n      } else {\n        toast({\n          title: `+${data.pointsEarned} Points Claimed!`,\n          description: data.isNewStreak \n            ? \"Your streak started fresh! Login daily to build it up 💪\" \n            : `${data.streak?.currentStreak || 1} day streak! Keep it going! 🔥`,\n          variant: \"success\",\n        });\n      }\n      setHasCheckedIn(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/login-streak', userAddress] });\n      queryClient.invalidateQueries({ queryKey: ['/api/creators/address', userAddress] });\n      queryClient.invalidateQueries({ queryKey: [`/api/notifications/${userAddress}`] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to check in. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const checkUnclaimedMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/login-streak/check-unclaimed', {\n        address: userAddress,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.hasUnclaimed) {\n        queryClient.invalidateQueries({ queryKey: [`/api/notifications/${userAddress}`] });\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (streakData && !hasCheckedIn && !checkInMutation.isPending) {\n      const today = new Date().toISOString().split('T')[0];\n      if (streakData.lastLoginDate !== today) {\n        checkInMutation.mutate();\n      }\n    }\n  }, [streakData, userAddress, hasCheckedIn]);\n\n  // Check for unclaimed points every 5 minutes\n  useEffect(() => {\n    if (!userAddress) return;\n\n    // Initial check\n    checkUnclaimedMutation.mutate();\n\n    // Set up interval for reminders\n    const interval = setInterval(() => {\n      checkUnclaimedMutation.mutate();\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => clearInterval(interval);\n  }, [userAddress]);\n\n  if (isLoading || !streakData) {\n    return null;\n  }\n\n  const currentStreak = parseInt(streakData.currentStreak || '0');\n  const longestStreak = parseInt(streakData.longestStreak || '0');\n  const totalPoints = parseInt(streakData.totalPoints || '0');\n\n  const getLastWeekDays = () => {\n    const days = [];\n    const today = new Date();\n    const loginDates = new Set(streakData.loginDates || []);\n    \n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const dayName = date.toLocaleDateString('en-US', { weekday: 'short' }).charAt(0);\n      \n      days.push({\n        date: dateStr,\n        day: dayName,\n        isChecked: loginDates.has(dateStr),\n        isToday: i === 0\n      });\n    }\n    return days;\n  };\n\n  const weekDays = getLastWeekDays();\n\n  return (\n    <Card className=\"bg-gradient-to-br from-orange-500/10 to-red-500/10 border-orange-500/20 p-6\" data-testid=\"card-streak-display\">\n      <div className=\"flex flex-col items-center text-center space-y-4\">\n        <div className=\"relative\">\n          <div className=\"w-24 h-24 rounded-full bg-orange-500/20 flex items-center justify-center\">\n            <Flame className=\"w-12 h-12 text-orange-500\" />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"text-5xl font-bold text-gray-900 dark:text-white mb-1\" data-testid=\"text-streak-count\">\n            {currentStreak}\n          </div>\n          <div className=\"text-sm font-semibold text-gray-600 dark:text-gray-400\">\n            Day Streak\n          </div>\n          {currentStreak > 0 && (\n            <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n              Keep logging in daily! 🔥\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex gap-2 justify-center w-full\">\n          {weekDays.map((day, index) => (\n            <div key={index} className=\"flex flex-col items-center gap-1\">\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 uppercase\">\n                {day.day}\n              </div>\n              <div\n                className={`w-10 h-10 rounded-full flex items-center justify-center transition-all ${\n                  day.isChecked\n                    ? 'bg-orange-500 text-white'\n                    : day.isToday\n                    ? 'bg-gray-300 dark:bg-gray-600 border-2 border-orange-400 dark:border-orange-500'\n                    : 'bg-gray-200 dark:bg-gray-700 text-gray-400 dark:text-gray-500'\n                }`}\n                data-testid={`day-${day.day}-${day.isChecked ? 'checked' : 'unchecked'}`}\n              >\n                {day.isChecked && <Check className=\"w-5 h-5\" />}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"w-full bg-gray-100 dark:bg-gray-800/50 rounded-xl p-4 mt-4\">\n          <div className=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-3\">\n            Your Stats\n          </div>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-total-points\">\n                {totalPoints}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Points</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-current-streak\">\n                {currentStreak}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Current</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-500 flex items-center justify-center gap-1\" data-testid=\"text-longest-streak\">\n                <Trophy className=\"w-5 h-5\" />\n                {longestStreak}\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Best</div>\n            </div>\n          </div>\n        </div>\n\n        {currentStreak === 0 && (\n          <Button\n            onClick={() => checkInMutation.mutate()}\n            disabled={checkInMutation.isPending}\n            className=\"w-full bg-orange-500 hover:bg-orange-600 text-white\"\n            data-testid=\"button-start-streak\"\n          >\n            Start Your Streak\n          </Button>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":7571},"client/src/components/daily-points-modal.tsx":{"content":"\nimport { useEffect, useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Flame, Gift, TrendingUp, Award } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DailyPointsModalProps {\n  userAddress: string;\n}\n\nexport default function DailyPointsModal({ userAddress }: DailyPointsModalProps) {\n  const [open, setOpen] = useState(false);\n  const [claimData, setClaimData] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: streakData } = useQuery({\n    queryKey: ['/api/login-streak', userAddress],\n    enabled: !!userAddress,\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/login-streak/check-in', {\n        address: userAddress,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.pointsEarned > 0) {\n        setClaimData(data);\n        setOpen(true);\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/login-streak'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/creators'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/notifications/${userAddress}`] });\n    },\n  });\n\n  useEffect(() => {\n    if (streakData && userAddress) {\n      const today = new Date().toISOString().split('T')[0];\n      if (streakData.lastLoginDate !== today) {\n        checkInMutation.mutate();\n      }\n    }\n  }, [streakData, userAddress]);\n\n  const handleClose = () => {\n    setOpen(false);\n    setClaimData(null);\n  };\n\n  if (!claimData) return null;\n\n  const isFirstLogin = claimData.isFirstLogin;\n  const pointsEarned = claimData.pointsEarned;\n  const currentStreak = parseInt(claimData.streak?.currentStreak || '0');\n  const isNewRecord = currentStreak.toString() === claimData.streak?.longestStreak && \n                       currentStreak > 1;\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mb-4\">\n            {isFirstLogin ? (\n              <Gift className=\"w-8 h-8 text-white\" />\n            ) : isNewRecord ? (\n              <Award className=\"w-8 h-8 text-white\" />\n            ) : (\n              <Flame className=\"w-8 h-8 text-white\" />\n            )}\n          </div>\n          <DialogTitle className=\"text-center text-2xl\">\n            {isFirstLogin ? (\n              '🎉 Welcome Bonus!'\n            ) : isNewRecord ? (\n              `🏆 New Record!`\n            ) : currentStreak >= 7 ? (\n              `🔥 Day ${currentStreak} Streak!`\n            ) : (\n              `🔥 Day ${currentStreak} Login!`\n            )}\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-base\">\n            {isFirstLogin ? (\n              `You've claimed ${pointsEarned} points for your first login!`\n            ) : isNewRecord ? (\n              `New personal best! You've claimed ${pointsEarned} points for ${currentStreak} consecutive days!`\n            ) : currentStreak >= 7 ? (\n              `Amazing streak! You've claimed ${pointsEarned} points (${pointsEarned - 10} bonus)!`\n            ) : (\n              `You've claimed ${pointsEarned} points! Keep your streak going!`\n            )}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"bg-gradient-to-br from-orange-500/10 to-red-500/10 rounded-xl p-4 border border-orange-500/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-orange-500/20 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-orange-500\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Points Claimed</p>\n                <p className=\"text-3xl font-bold text-orange-500\">+{pointsEarned}</p>\n              </div>\n            </div>\n            {!isFirstLogin && (\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Current Streak</p>\n                <p className=\"text-2xl font-bold\">{currentStreak} days</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFirstLogin && currentStreak < 7 && (\n          <p className=\"text-sm text-center text-muted-foreground\">\n            {7 - currentStreak} more days to unlock bonus points!\n          </p>\n        )}\n\n        <Button onClick={handleClose} className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600\">\n          Awesome! Continue\n        </Button>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5052}},"version":2}